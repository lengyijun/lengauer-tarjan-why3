(*
reference: 
  the tiger book(ml) 19.2

*)

(* a wrapper of fmap *)
module MMap
  use export fmap.Fmap

  val constant addd (k : 'k) (v : 'v) (mp : fmap 'k 'v): fmap 'k 'v
    ensures{ result = add k v mp}

  val constant mmem (k : 'k) (mp : fmap 'k 'v) : bool
    ensures {result <-> mem k mp}

  val constant create : (fmap 'k 'v)
    ensures {result = empty }
 
end

theory Graph

  use list.List
  use list.Append
  use list.Length
  use int.Int
  use ref.Ref
  use MMap

  (* the graph is defined by a set of vertices and a set of edges *)
  type vertex


  clone set.SetApp as SV with type elt = vertex
  clone set.SetApp as SE with type elt = (vertex, vertex)

(*
  clone MMap as MVI with type key = vertex, type value = int
  clone MMap as MIV with type key = int, type value = vertex
*)

  val constant vertices: SV.set
  constant edges: SE.set

  predicate edge (x y: vertex) = SE.mem (x,y) edges

  (* edges are well-formed *)
  axiom edges_def:
    forall x y: vertex.
    SE.mem (x, y) edges -> SV.mem x vertices /\ SV.mem y vertices


  (** direct predecessors *)
  function preds vertex: SV.fset vertex

  axiom preds_def: forall v:vertex. forall u:vertex.
   SE.mem (u,v) edges <-> SV.mem u (preds v)

  (** direct successors *)
  val constant succs (u : vertex): SV.set
    ensures {SE.subset result vertices}
    ensures { forall v:vertex. SE.mem (u,v) edges <-> SV.mem v result }

  val constant root: vertex
    ensures { SV.mem result vertices }

  (* paths *)
  clone export graph.Path
     with type vertex = vertex, predicate edge = edge

  lemma path_in_vertices:
    forall v1 v2: vertex, l: list vertex.
    SV.mem v1 vertices -> path v1 l v2 -> SV.mem v2 vertices

  val constant rremove (x : vertex)(roots : SV.set) : SV.set
    ensures {result = SV.remove x roots }
 
  let rec constant dfs1 (current_parent : vertex) (roots : SV.set) (dfsnum_parent : fmap vertex (int, vertex)) (vertex_mp : fmap int vertex) (sn : int) : (dfsnum1 : fmap vertex (int, vertex), vertex_mp1 : fmap int vertex, sn1 : int) = 
    requires{SV.subset roots vertices}
    requires{SV.subset dfsnum_parent.domain vertices}
    requires{forall x. mem x dfsnum_parent -> let (a, _) = find x dfsnum_parent in a < sn}
    requires{forall x y. x <> y -> mem x dfsnum_parent -> mem y dfsnum_parent -> let (a, _) = find x dfsnum_parent in let (b, _) = find y dfsnum_parent in a <> b}
    ensures{ forall x y. x <> y -> mem x dfsnum1 -> mem y dfsnum1 -> let (a, _) = find x dfsnum1 in let (b, _) = find y dfsnum1 in a <> b  }
    ensures{ forall x. mem x dfsnum1 -> let (a, _) = find x dfsnum1 in a < sn1}
    ensures{ SV.subset dfsnum_parent.domain dfsnum1.domain}
    ensures{ SV.subset dfsnum1.domain vertices}
    ensures{ forall x. mem x dfsnum_parent -> find x dfsnum_parent = find x dfsnum1}
    ensures{ sn1 >= sn}
    variant{SV.cardinal vertices - size dfsnum_parent}
    if SV.is_empty roots then
      (dfsnum_parent , vertex_mp, sn)
    else
      let x = SV.choose roots in 
        if mmem x dfsnum_parent then 
          (dfsnum_parent, vertex_mp, sn)
        else
          let dfsnum_parent' = addd x (sn, current_parent) dfsnum_parent in
          let vertex_mp' = addd sn x vertex_mp in
          let sn' = sn + 1 in 
          let (dfsnum_parent'', vertex_mp'', sn'') = dfs1 x (succs x) dfsnum_parent' vertex_mp' sn' in
          let roots' = rremove x roots in
          dfs1 current_parent roots' dfsnum_parent'' vertex_mp'' sn''


  let constant dfsnum_N : (fmap vertex int , fmap int vertex, int) = dfs1 root vertices (addd root (0, root) create) (addd 0 root create) 1 
  
  lemma dfsnum_property : 
  let (dfsnum_parent, _ , _) = dfsnum_N in 
    find root dfsnum_parent = (0, root)  /\
    SE.subset dfsnum_parent.domain vertices /\
    forall x y. x <> y -> mem x dfsnum_parent -> mem y dfsnum_parent -> find x dfsnum_parent <> find y dfsnum_parent

(*
  predicate (-*->) (x y : vertex) = find x dfsnum_parent <= find y dfsnum_parent

  predicate (-+->) (x y : vertex) = find x dfsnum_parent < find y dfsnum_parent
*)

end

