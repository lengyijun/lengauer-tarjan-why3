(*
reference: 
  the tiger book(ml) 19.2

*)
theory Graph

  use export list.List
  use export list.Append
  use export list.Length
  use export int.Int
  use export fmap.Fmap
  use ref.Ref



  (* the graph is defined by a set of vertices and a set of edges *)
  type vertex


  clone set.SetApp as SV with type elt = vertex
  clone set.SetApp as SE with type elt = (vertex, vertex)

  val constant vertices: SV.set
  constant edges: SE.set

  predicate edge (x y: vertex) = SE.mem (x,y) edges

  (* edges are well-formed *)
  axiom edges_def:
    forall x y: vertex.
    SE.mem (x, y) edges -> SV.mem x vertices /\ SV.mem y vertices


  (** direct predecessors *)
  function preds vertex: SV.fset vertex

  axiom preds_def: forall v:vertex. forall u:vertex.
   SE.mem (u,v) edges <-> SV.mem u (preds v)

  (** direct successors *)
  val constant succs (u : vertex): SV.set
    ensures {SE.subset result vertices}
    ensures { forall v:vertex. SE.mem (u,v) edges <-> SV.mem v result }

  val constant root: vertex
    ensures { SV.mem result vertices }

  (* paths *)
  clone export graph.Path
     with type vertex = vertex, predicate edge = edge

  lemma path_in_vertices:
    forall v1 v2: vertex, l: list vertex.
    SV.mem v1 vertices -> path v1 l v2 -> SV.mem v2 vertices


  val constant addd (k : vertex) (v : int) (mp : fmap vertex int): fmap vertex int
    ensures{ result = add k v mp}

  val constant mmem (k : vertex) (mp : fmap vertex int) : bool
    ensures {result <-> mem k mp}

  val constant rremove (x : vertex)(roots : SV.set) : SV.set
    ensures {result = SV.remove x roots }
  
     
  let rec constant dfs1 (roots : SV.set) (mp : (fmap vertex int)) (sn : int) : (fmap vertex int, int) = 
    variant{SV.cardinal vertices - size mp}
    if not SV.is_empty roots then
      (mp , sn)
    else
      let x = SV.choose roots in 
        if mmem x mp then 
          (mp, sn)
        else
        let mp' = addd x sn mp in
        let sn' = sn + 1 in 
       let roots' = rremove x roots in
        dfs1 roots' mp' sn'



  val constant create : (fmap vertex int)
    ensures {result = empty }


  val constant dfsnum_N : (fmap vertex int , int)
    ensures { result =  let mmp = addd root 0 create in  dfs1 vertices mmp 1 }
  
  lemma dfsnum_property : 
  let (dfsnum, _ ) = dfsnum_N in 
    find root dfsnum = 0  /\
    SE.subset dfsnum.domain vertices /\
    forall x y. x <> y -> mem x dfsnum -> mem y dfsnum -> find x dfsnum <> find y dfsnum

(*
  predicate (-*->) (x y : vertex) = find x dfsnum <= find y dfsnum

  predicate (-+->) (x y : vertex) = find x dfsnum < find y dfsnum
*)

end

(*
    requires{FS.subset roots vertices}
    requires{FS.subset mp.domain vertices}
    requires{forall x. mem x mp -> find x mp < sn}
    requires{forall x y. x <> y -> mem x mp -> mem y mp -> find x mp <> find y mp }
    returns{(mp1, _) -> forall x y. x <> y -> mem x mp1 -> mem y mp1 -> find x mp1 <> find y mp1 }
    returns{(mp1, sn1) -> forall x. mem x mp1 -> find x mp1 < sn1}
    returns{(mp1, _) -> FS.subset mp.domain mp1.domain}
    returns{(mp1, _) -> FS.subset mp1.domain vertices}
    returns{(mp1, _) -> forall x. mem x mp -> find x mp = find x mp1}
    returns{(_, sn1) -> sn1 >= sn}
    variant{FS.cardinal vertices - size mp}
*)
