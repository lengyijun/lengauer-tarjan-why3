<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="2" name="CVC4" version="1.8" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="3" name="CVC5" version="1.0.8" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="4" name="Alt-Ergo" version="2.5.2" timelimit="100" steplimit="0" memlimit="10000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="dominator.mlw"/>
<theory name="Graph" proved="true">
 <goal name="root&#39;vc" expl="VC for root" proved="true">
 <proof prover="4"><result status="valid" time="0.022601" steps="1"/></proof>
 </goal>
 <goal name="path_left_extension" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_left_extension.0" proved="true">
  <proof prover="4"><result status="valid" time="0.111180" steps="445"/></proof>
  </goal>
  <goal name="path_left_extension.1" proved="true">
  <proof prover="4"><result status="valid" time="0.051474" steps="71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_right_inversion" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_right_inversion.0" proved="true">
  <proof prover="4"><result status="valid" time="0.017944" steps="4"/></proof>
  </goal>
  <goal name="path_right_inversion.1" proved="true">
  <proof prover="3"><result status="valid" time="0.127045" steps="18262"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_trans" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_trans.0" proved="true">
  <proof prover="4"><result status="valid" time="0.022075" steps="11"/></proof>
  </goal>
  <goal name="path_trans.1" proved="true">
  <proof prover="4"><result status="valid" time="0.041841" steps="174"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="empty_path" proved="true">
 <proof prover="4"><result status="valid" time="0.036203" steps="38"/></proof>
 </goal>
 <goal name="path_decomposition" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="path_decomposition.0" proved="true">
  <transf name="split_goal_full" proved="true" >
   <goal name="path_decomposition.0.0" proved="true">
   <proof prover="4"><result status="valid" time="0.041094" steps="188"/></proof>
   </goal>
   <goal name="path_decomposition.0.1" proved="true">
   <proof prover="4"><result status="valid" time="0.030214" steps="178"/></proof>
   </goal>
   <goal name="path_decomposition.0.2" proved="true">
   <proof prover="4"><result status="valid" time="0.046206" steps="296"/></proof>
   </goal>
   <goal name="path_decomposition.0.3" proved="true">
   <proof prover="4"><result status="valid" time="0.039850" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="root_dominate_all" proved="true">
 <proof prover="4"><result status="valid" time="0.019374" steps="81"/></proof>
 </goal>
 <goal name="dominate_em" proved="true">
 <proof prover="4"><result status="valid" time="0.012705" steps="2"/></proof>
 </goal>
 <goal name="Exists_induction.base" proved="true">
 <proof prover="3"><result status="valid" time="1.673165" steps="103311"/></proof>
 </goal>
 <goal name="Exists_induction.induction_step" proved="true">
 <transf name="unfold" proved="true" arg1="p1">
  <goal name="induction_step.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="destruct_term" proved="true" arg1="p1">
    <goal name="induction_step.0.0.0" proved="true">
    <transf name="assert" proved="true" arg1="(exists z p3. p1 = p3 ++ Cons z Nil )">
     <goal name="induction_step.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.273504" steps="32115"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="induction_step.0.0.0.1.0" proved="true">
      <transf name="instantiate" proved="true" arg1="dominate_em" arg2="z, y">
       <goal name="induction_step.0.0.0.1.0.0" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="induction_step.0.0.0.1.0.0.0" proved="true">
        <proof prover="4"><result status="valid" time="0.179721" steps="1389"/></proof>
        </goal>
        <goal name="induction_step.0.0.0.1.0.0.1" proved="true">
        <transf name="instantiate" proved="true" arg1="H4" arg2="p3, (Cons z Nil), y">
         <goal name="induction_step.0.0.0.1.0.0.1.0" proved="true">
         <transf name="assert" proved="true" arg1="((exists idominator:vertex. dominate idominator y /\ (exists l1:list vertex, l2:list vertex. (l1 ++ Cons idominator l2) = Cons root p3 /\ (forall x2:vertex. mem1 x2 l2 -&gt; not dominate x2 y))))">
          <goal name="induction_step.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <proof prover="4"><result status="valid" time="0.572689" steps="5563"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.0.1.0.1" proved="true">
          <transf name="destruct_rec" proved="true" arg1="h">
           <goal name="induction_step.0.0.0.1.0.0.1.0.1.0" proved="true">
           <transf name="exists" proved="true" arg1="idominator">
            <goal name="induction_step.0.0.0.1.0.0.1.0.1.0.0" proved="true">
            <transf name="split_goal_full" proved="true" >
             <goal name="induction_step.0.0.0.1.0.0.1.0.1.0.0.0" proved="true">
             <proof prover="4"><result status="valid" time="0.016808" steps="22"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.0.1.0.1.0.0.1" proved="true">
             <proof prover="4"><result status="valid" time="99.337026" steps="424064"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="induction_step.0.0.1" proved="true">
    <proof prover="3"><result status="valid" time="0.082502" steps="13556"/></proof>
    <proof prover="4"><result status="valid" time="1.188162" steps="10638"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="idom_exists_a" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="idom_exists_a.0" proved="true">
  <transf name="assert" proved="true" arg1="(p1 (length p))">
   <goal name="idom_exists_a.0.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.020312" steps="13"/></proof>
   </goal>
   <goal name="idom_exists_a.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="p1" arg2="in" arg3="h">
    <goal name="idom_exists_a.0.1.0" proved="true">
    <transf name="instantiate" proved="true" arg1="h" arg2="p, (Nil : list vertex), y">
     <goal name="idom_exists_a.0.1.0.0" proved="true">
     <transf name="assert" proved="true" arg1="((exists idominator:vertex. dominate idominator y /\ (exists l1:list vertex, l2:list vertex. (l1 ++ Cons idominator l2) = Cons root p /\ (forall x. mem1 x l2 -&gt; not dominate x y))))">
      <goal name="idom_exists_a.0.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="4"><result status="valid" time="0.049826" steps="253"/></proof>
      </goal>
      <goal name="idom_exists_a.0.1.0.0.1" proved="true">
      <transf name="destruct_rec" proved="true" arg1="h">
       <goal name="idom_exists_a.0.1.0.0.1.0" proved="true">
       <transf name="exists" proved="true" arg1="idominator">
        <goal name="idom_exists_a.0.1.0.0.1.0.0" proved="true">
        <transf name="unfold" proved="true" arg1="idom">
         <goal name="idom_exists_a.0.1.0.0.1.0.0.0" proved="true">
         <transf name="exists" proved="true" arg1="p">
          <goal name="idom_exists_a.0.1.0.0.1.0.0.0.0" proved="true">
          <transf name="split_goal_full" proved="true" >
           <goal name="idom_exists_a.0.1.0.0.1.0.0.0.0.0" proved="true">
           <proof prover="4"><result status="valid" time="0.017279" steps="12"/></proof>
           </goal>
           <goal name="idom_exists_a.0.1.0.0.1.0.0.0.0.1" proved="true">
           <proof prover="4"><result status="valid" time="0.013208" steps="12"/></proof>
           </goal>
           <goal name="idom_exists_a.0.1.0.0.1.0.0.0.0.2" proved="true">
           <proof prover="4"><result status="valid" time="0.046520" steps="187"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="idom_exists_b" proved="true">
 <proof prover="4"><result status="valid" time="0.022451" steps="25"/></proof>
 </goal>
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="4"><result status="valid" time="0.034724" steps="85"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <transf name="unfold" proved="true" arg1="p2">
  <goal name="induction_step.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="destruct_term" proved="true" arg1="l1">
    <goal name="induction_step.0.0.0" proved="true">
    <transf name="case" proved="true" arg1="(x1 = y)">
     <goal name="induction_step.0.0.0.0" expl="true case" proved="true">
     <proof prover="4"><result status="valid" time="2.398339" steps="15716"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1" expl="false case" proved="true">
     <proof prover="2"><result status="valid" time="2.669167" steps="223702"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="induction_step.0.0.1" proved="true">
    <proof prover="3"><result status="valid" time="0.046218" steps="12998"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="no_acycle_a" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="no_acycle_a.0" proved="true">
  <transf name="instantiate" proved="true" arg1="SimpleInduction" arg2="(length l1)">
   <goal name="no_acycle_a.0.0" proved="true">
   <proof prover="4"><result status="valid" time="0.046233" steps="190"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="no_acycle" proved="true">
 <proof prover="4"><result status="valid" time="0.034366" steps="53"/></proof>
 </goal>
 <goal name="idom_unique" proved="true">
 <transf name="unfold" proved="true" arg1="idom">
  <goal name="idom_unique.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="idom_unique.0.0" proved="true">
   <transf name="case" proved="true" arg1="(m1 = m2)">
    <goal name="idom_unique.0.0.0" expl="true case" proved="true">
    <proof prover="4"><result status="valid" time="0.019902" steps="20"/></proof>
    </goal>
    <goal name="idom_unique.0.0.1" expl="false case" proved="true">
    <transf name="case" proved="true" arg1="(m1 = root)">
     <goal name="idom_unique.0.0.1.0" expl="false case (true case)" proved="true">
     <transf name="case" proved="true" arg1="(m2 = root)">
      <goal name="idom_unique.0.0.1.0.0" expl="false case (true case)" proved="true">
      <proof prover="3"><result status="valid" time="0.073549" steps="12759"/></proof>
      </goal>
      <goal name="idom_unique.0.0.1.0.1" expl="false case (true case)" proved="true">
      <proof prover="3"><result status="valid" time="1.325191" steps="128645"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="idom_unique.0.0.1.1" expl="false case" proved="true">
     <transf name="case" proved="true" arg1="(m2 = root)">
      <goal name="idom_unique.0.0.1.1.0" expl="false case (true case)" proved="true">
      <proof prover="2"><result status="valid" time="0.752109" steps="84678"/></proof>
      <proof prover="3"><result status="valid" time="4.194418" steps="205152"/></proof>
      </goal>
      <goal name="idom_unique.0.0.1.1.1" expl="false case" proved="true">
      <transf name="assert" proved="true" arg1="(mem1 m2 p1)">
       <goal name="idom_unique.0.0.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.073069" steps="273"/></proof>
       </goal>
       <goal name="idom_unique.0.0.1.1.1.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(mem1 m1 p)">
        <goal name="idom_unique.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
        <proof prover="4"><result status="valid" time="0.096677" steps="397"/></proof>
        </goal>
        <goal name="idom_unique.0.0.1.1.1.1.1" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(not mem1 m1 l2)">
         <goal name="idom_unique.0.0.1.1.1.1.1.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="0.155757" steps="15943"/></proof>
         <proof prover="3"><result status="valid" time="0.070843" steps="13160"/></proof>
         </goal>
         <goal name="idom_unique.0.0.1.1.1.1.1.1" expl="false case" proved="true">
         <transf name="assert" proved="true" arg1="(mem1 m1 l1)">
          <goal name="idom_unique.0.0.1.1.1.1.1.1.0" expl="asserted formula" proved="true">
          <proof prover="4"><result status="valid" time="0.411950" steps="1759"/></proof>
          </goal>
          <goal name="idom_unique.0.0.1.1.1.1.1.1.1" expl="false case" proved="true">
          <transf name="assert" proved="true" arg1="(not mem1 m2 l21)">
           <goal name="idom_unique.0.0.1.1.1.1.1.1.1.0" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="0.064446" steps="13177"/></proof>
           </goal>
           <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1" expl="false case" proved="true">
           <transf name="assert" proved="true" arg1="(mem1 m2 l11)">
            <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.0" expl="asserted formula" proved="true">
            <proof prover="4"><result status="valid" time="0.374515" steps="2051"/></proof>
            </goal>
            <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1" expl="false case" proved="true">
            <transf name="destruct_term" proved="true" arg1="l1">
             <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0" expl="false case" proved="true">
             <transf name="destruct_term" proved="true" arg1="l11">
              <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0" expl="false case" proved="true">
              <transf name="subst_all" proved="true" >
               <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0" expl="false case" proved="true">
               <transf name="assert" proved="true" arg1="(x1 = root /\ x ++ Cons m2 l2 = p)">
                <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
                <proof prover="4"><result status="valid" time="0.065160" steps="388"/></proof>
                </goal>
                <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1" expl="false case" proved="true">
                <transf name="destruct" proved="true" arg1="h">
                 <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0" expl="false case" proved="true">
                 <transf name="subst_all" proved="true" >
                  <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0" expl="false case" proved="true">
                  <transf name="assert" proved="true" arg1="(x2 = root /\ x1 ++ Cons m1 l21 = p)">
                   <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="4"><result status="valid" time="0.069188" steps="403"/></proof>
                   </goal>
                   <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1" expl="false case" proved="true">
                   <transf name="destruct_rec" proved="true" arg1="h">
                    <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0" expl="false case" proved="true">
                    <transf name="subst_all" proved="true" >
                     <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0" expl="false case" proved="true">
                     <transf name="assert" proved="true" arg1="((exists l1&#39;:list vertex. path root (l1&#39; ++ Cons m1 l21) n /\ not mem1 m1 l1&#39; /\ length l1&#39; &lt;= length x1))">
                      <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
                      <proof prover="4"><result status="valid" time="0.059508" steps="263"/></proof>
                      </goal>
                      <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.1" expl="false case" proved="true">
                      <transf name="destruct_rec" proved="true" arg1="h">
                       <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.1.0" expl="false case" proved="true">
                       <transf name="assert" proved="true" arg1="(mem1 m2 l1&#39;)">
                        <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
                        <proof prover="4"><result status="valid" time="0.807777" steps="4447"/></proof>
                        </goal>
                        <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.1.0.1" expl="false case" proved="true">
                        <transf name="assert" proved="true" arg1="(exists l3 l4. l1&#39; = l3 ++ Cons m2 l4 /\ not mem1 m1 l3)">
                         <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.1.0.1.0" expl="asserted formula" proved="true">
                         <proof prover="4"><result status="valid" time="0.056223" steps="315"/></proof>
                         </goal>
                         <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.1.0.1.1" expl="false case" proved="true">
                         <transf name="destruct_rec" proved="true" arg1="h">
                          <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.1.0.1.1.0" expl="false case" proved="true">
                          <transf name="assert" proved="true" arg1="(path root (l3 ++ Cons m2 l2) n)">
                           <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.1.0.1.1.0.0" expl="asserted formula" proved="true">
                           <proof prover="4"><result status="valid" time="0.085839" steps="375"/></proof>
                           </goal>
                           <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0.1.0.1.1.0.1" expl="false case" proved="true">
                           <proof prover="4"><result status="valid" time="1.193850" steps="6204"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.1" expl="false case" proved="true">
              <proof prover="4"><result status="valid" time="0.026357" steps="43"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.1" expl="false case" proved="true">
             <proof prover="4"><result status="valid" time="0.029516" steps="39"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
