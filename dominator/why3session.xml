<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.2" timelimit="120" steplimit="0" memlimit="10000"/>
<prover id="1" name="Eprover" version="2.0" timelimit="120" steplimit="0" memlimit="10000"/>
<prover id="2" name="CVC4" version="1.8" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="3" name="CVC5" version="1.0.8" timelimit="120" steplimit="0" memlimit="10000"/>
<prover id="4" name="Alt-Ergo" version="2.5.2" timelimit="120" steplimit="0" memlimit="10000"/>
<file format="whyml">
<path name=".."/><path name="dominator.mlw"/>
<theory name="Graph" proved="true">
 <goal name="root&#39;vc" expl="VC for root" proved="true">
 <proof prover="4" timelimit="100"><result status="valid" time="0.022601" steps="1"/></proof>
 </goal>
 <goal name="path_left_extension" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_left_extension.0" proved="true">
  <proof prover="4" timelimit="100"><result status="valid" time="0.353238" steps="3252"/></proof>
  </goal>
  <goal name="path_left_extension.1" proved="true">
  <proof prover="4" timelimit="100"><result status="valid" time="0.051474" steps="63"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_right_inversion" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_right_inversion.0" proved="true">
  <proof prover="4" timelimit="100"><result status="valid" time="0.017944" steps="4"/></proof>
  </goal>
  <goal name="path_right_inversion.1" proved="true">
  <proof prover="3" timelimit="100"><result status="valid" time="0.127045" steps="15022"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="path_trans" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="path_trans.0" proved="true">
  <proof prover="4" timelimit="100"><result status="valid" time="0.022075" steps="11"/></proof>
  </goal>
  <goal name="path_trans.1" proved="true">
  <proof prover="4" timelimit="100"><result status="valid" time="0.041841" steps="131"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="empty_path" proved="true">
 <proof prover="4" timelimit="100"><result status="valid" time="0.036203" steps="34"/></proof>
 </goal>
 <goal name="path_decomposition" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="path_decomposition.0" proved="true">
  <transf name="split_goal_full" proved="true" >
   <goal name="path_decomposition.0.0" proved="true">
   <proof prover="4" timelimit="100"><result status="valid" time="0.041094" steps="105"/></proof>
   </goal>
   <goal name="path_decomposition.0.1" proved="true">
   <proof prover="4" timelimit="100"><result status="valid" time="0.030214" steps="100"/></proof>
   </goal>
   <goal name="path_decomposition.0.2" proved="true">
   <proof prover="4" timelimit="100"><result status="valid" time="0.046206" steps="255"/></proof>
   </goal>
   <goal name="path_decomposition.0.3" proved="true">
   <proof prover="4" timelimit="100"><result status="valid" time="0.039850" steps="134"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="root_dominate_all" proved="true">
 <proof prover="4" timelimit="100"><result status="valid" time="0.019374" steps="73"/></proof>
 </goal>
 <goal name="dominate_em" proved="true">
 <proof prover="4" timelimit="100"><result status="valid" time="0.012705" steps="2"/></proof>
 </goal>
</theory>
<theory name="IdomExistsHelper" proved="true">
 <goal name="Exists_induction.base" proved="true">
 <proof prover="3"><result status="valid" time="1.432307" steps="65865"/></proof>
 </goal>
 <goal name="Exists_induction.induction_step" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="induction_step.0.0.0" proved="true">
    <transf name="assert" proved="true" arg1="(exists p2 z. p1 = p2 ++ Cons z Nil)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.143894"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="induction_step.0.0.0.1.0" proved="true">
      <transf name="assert" proved="true" arg1="(z ~~&gt; y \/ not z ~~&gt; y)">
       <goal name="induction_step.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.023675" steps="16"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="induction_step.0.0.0.1.0.1.0" proved="true">
        <proof prover="4"><result status="valid" time="0.082202" steps="641"/></proof>
        </goal>
        <goal name="induction_step.0.0.0.1.0.1.1" proved="true">
        <transf name="unfold" proved="true" arg1="p11" arg2="in" arg3="H4">
         <goal name="induction_step.0.0.0.1.0.1.1.0" proved="true">
         <transf name="instantiate" proved="true" arg1="H4" arg2="p2, (Cons z p21), y">
          <goal name="induction_step.0.0.0.1.0.1.1.0.0" proved="true">
          <transf name="assert" proved="true" arg1="((exists idominator:vertex. idominator ~~&gt; y /\ (exists l1:list vertex, l2:list vertex. (l1 ++ Cons idominator l2) = Cons root p2 /\ (forall x:vertex. mem1 x l2 -&gt; not x ~~&gt; y))))">
           <goal name="induction_step.0.0.0.1.0.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="4"><result status="valid" time="0.074660" steps="498"/></proof>
           </goal>
           <goal name="induction_step.0.0.0.1.0.1.1.0.0.1" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h">
            <goal name="induction_step.0.0.0.1.0.1.1.0.0.1.0" proved="true">
            <transf name="exists" proved="true" arg1="idominator">
             <goal name="induction_step.0.0.0.1.0.1.1.0.0.1.0.0" proved="true">
             <proof prover="4"><result status="valid" time="23.920729" steps="157744"/></proof>
             <transf name="split_goal_full" proved="true" >
              <goal name="induction_step.0.0.0.1.0.1.1.0.0.1.0.0.0" proved="true">
              <proof prover="4"><result status="valid" time="0.020166" steps="20"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.1.0.0.1.0.0.1" proved="true">
              <proof prover="4"><result status="valid" time="24.020691" steps="157770"/></proof>
              <transf name="exists" proved="true" arg1="l1">
               <goal name="induction_step.0.0.0.1.0.1.1.0.0.1.0.0.1.0" proved="true">
               <transf name="exists" proved="true" arg1="(l2 ++ Cons z Nil)">
                <goal name="induction_step.0.0.0.1.0.1.1.0.0.1.0.0.1.0.0" proved="true">
                <proof prover="4"><result status="valid" time="0.123800" steps="950"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="IdomExists" proved="true">
 <goal name="idom_exists_c" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="idom_exists_c.0" proved="true">
  <transf name="assert" proved="true" arg1="(p1 (length p))">
   <goal name="idom_exists_c.0.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.018140" steps="13"/></proof>
   </goal>
   <goal name="idom_exists_c.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="p1" arg2="in" arg3="h">
    <goal name="idom_exists_c.0.1.0" proved="true">
    <transf name="instantiate" proved="true" arg1="h" arg2="p, (Nil : list vertex), y">
     <goal name="idom_exists_c.0.1.0.0" proved="true">
     <transf name="apply" proved="true" arg1="Hinst">
      <goal name="idom_exists_c.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.019282" steps="8"/></proof>
      </goal>
      <goal name="idom_exists_c.0.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.017318" steps="12"/></proof>
      </goal>
      <goal name="idom_exists_c.0.1.0.0.2" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.017057" steps="15"/></proof>
      </goal>
      <goal name="idom_exists_c.0.1.0.0.3" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.013095" steps="8"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="idom_exists_a" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="idom_exists_a.0" proved="true">
  <transf name="instantiate" proved="true" arg1="idom_exists_c" arg2="p, y">
   <goal name="idom_exists_a.0.0" proved="true">
   <transf name="assert" proved="true" arg1="((exists idominator:vertex. idominator ~~&gt; y /\ (exists l1:list vertex, l2:list vertex. (l1 ++ Cons idominator l2) = Cons root p /\ (forall x:vertex. mem1 x l2 -&gt; not x ~~&gt; y))))">
    <goal name="idom_exists_a.0.0.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.037439" steps="150"/></proof>
    </goal>
    <goal name="idom_exists_a.0.0.1" proved="true">
    <transf name="destruct_rec" proved="true" arg1="h">
     <goal name="idom_exists_a.0.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="idominator">
      <goal name="idom_exists_a.0.0.1.0.0" proved="true">
      <proof prover="4"><result status="valid" time="0.121799" steps="444"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="UniquePathHelper" proved="true">
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="4"><result status="valid" time="0.031369" steps="30"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <proof prover="4"><result status="valid" time="0.099757" steps="475"/></proof>
 </goal>
</theory>
<theory name="UniquePath" proved="true">
 <goal name="no_acycle_a" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="no_acycle_a.0" proved="true">
  <transf name="assert" proved="true" arg1="(p2 (length l1))">
   <goal name="no_acycle_a.0.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.019797" steps="15"/></proof>
   </goal>
   <goal name="no_acycle_a.0.1" proved="true">
   <transf name="assert" proved="true" arg1="((exists l3:list vertex, l4:list vertex. (l3 ++ Cons y l4) = l1 /\ not mem1 y l3))">
    <goal name="no_acycle_a.0.1.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.041595" steps="144"/></proof>
    </goal>
    <goal name="no_acycle_a.0.1.1" proved="true">
    <transf name="destruct_rec" proved="true" arg1="h">
     <goal name="no_acycle_a.0.1.1.0" proved="true">
     <transf name="exists" proved="true" arg1="l3">
      <goal name="no_acycle_a.0.1.1.0.0" proved="true">
      <proof prover="4"><result status="valid" time="0.034728" steps="106"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="no_acycle" proved="true">
 <proof prover="4"><result status="valid" time="0.017350" steps="43"/></proof>
 </goal>
</theory>
<theory name="IdomUniq" proved="true">
 <goal name="idom_unique" proved="true">
 <transf name="inline_all" proved="true" >
  <goal name="idom_unique.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="idom_unique.0.0" proved="true">
   <transf name="case" proved="true" arg1="(m1 = m2)">
    <goal name="idom_unique.0.0.0" expl="true case" proved="true">
    <proof prover="4"><result status="valid" time="0.024391" steps="18"/></proof>
    </goal>
    <goal name="idom_unique.0.0.1" expl="false case" proved="true">
    <transf name="case" proved="true" arg1="(m1 = root)">
     <goal name="idom_unique.0.0.1.0" expl="false case (true case)" proved="true">
     <proof prover="1"><result status="valid" time="23.012374"/></proof>
     <proof prover="3"><result status="valid" time="73.319148" steps="1954686"/></proof>
     </goal>
     <goal name="idom_unique.0.0.1.1" expl="false case" proved="true">
     <transf name="case" proved="true" arg1="(m2 = root)">
      <goal name="idom_unique.0.0.1.1.0" expl="false case (true case)" proved="true">
      <proof prover="1"><result status="valid" time="23.200348"/></proof>
      </goal>
      <goal name="idom_unique.0.0.1.1.1" expl="false case" proved="true">
      <transf name="assert" proved="true" arg1="(mem1 m2 p1)">
       <goal name="idom_unique.0.0.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.033104" steps="172"/></proof>
       </goal>
       <goal name="idom_unique.0.0.1.1.1.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(mem1 m1 p)">
        <goal name="idom_unique.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
        <proof prover="4"><result status="valid" time="0.044817" steps="187"/></proof>
        </goal>
        <goal name="idom_unique.0.0.1.1.1.1.1" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(not mem1 m1 l2)">
         <goal name="idom_unique.0.0.1.1.1.1.1.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="0.125950" steps="23246"/></proof>
         <proof prover="3" timelimit="100"><result status="valid" time="0.082101" steps="18707"/></proof>
         </goal>
         <goal name="idom_unique.0.0.1.1.1.1.1.1" expl="false case" proved="true">
         <transf name="assert" proved="true" arg1="(mem1 m1 l1)">
          <goal name="idom_unique.0.0.1.1.1.1.1.1.0" expl="asserted formula" proved="true">
          <proof prover="4" timelimit="100"><result status="valid" time="0.362953" steps="1006"/></proof>
          </goal>
          <goal name="idom_unique.0.0.1.1.1.1.1.1.1" expl="false case" proved="true">
          <transf name="assert" proved="true" arg1="(not mem1 m2 l21)">
           <goal name="idom_unique.0.0.1.1.1.1.1.1.1.0" expl="asserted formula" proved="true">
           <proof prover="3" timelimit="100"><result status="valid" time="0.081730" steps="18902"/></proof>
           </goal>
           <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1" expl="false case" proved="true">
           <transf name="assert" proved="true" arg1="(mem1 m2 l11)">
            <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.0" expl="asserted formula" proved="true">
            <proof prover="4" timelimit="100"><result status="valid" time="0.445734" steps="1159"/></proof>
            </goal>
            <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1" expl="false case" proved="true">
            <transf name="destruct_term" proved="true" arg1="l1">
             <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0" expl="false case" proved="true">
             <transf name="destruct_term" proved="true" arg1="l11">
              <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0" expl="false case" proved="true">
              <transf name="subst_all" proved="true" >
               <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0" expl="false case" proved="true">
               <transf name="assert" proved="true" arg1="(x1 = root /\ x ++ Cons m2 l2 = p)">
                <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
                <proof prover="4" timelimit="100"><result status="valid" time="0.217126" steps="473"/></proof>
                </goal>
                <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1" expl="false case" proved="true">
                <transf name="destruct" proved="true" arg1="h">
                 <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0" expl="false case" proved="true">
                 <transf name="subst_all" proved="true" >
                  <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0" expl="false case" proved="true">
                  <transf name="assert" proved="true" arg1="(mem1 m1 x)">
                   <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="4"><result status="valid" time="0.033212" steps="43"/></proof>
                   </goal>
                   <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1" expl="false case" proved="true">
                   <transf name="remove" proved="true" arg1="h5">
                    <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0" expl="false case" proved="true">
                    <transf name="assert" proved="true" arg1="(x2 = root /\ x1 ++ Cons m1 l21= p1)">
                     <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
                     <proof prover="4"><result status="valid" time="0.234603" steps="483"/></proof>
                     </goal>
                     <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1" expl="false case" proved="true">
                     <transf name="destruct_rec" proved="true" arg1="h">
                      <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0" expl="false case" proved="true">
                      <transf name="subst_all" proved="true" >
                       <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0" expl="false case" proved="true">
                       <transf name="assert" proved="true" arg1="(mem1 m1 x)">
                        <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
                        <proof prover="4"><result status="valid" time="0.031909" steps="34"/></proof>
                        </goal>
                        <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1" expl="false case" proved="true">
                        <transf name="assert" proved="true" arg1="(mem1 m2 x1)">
                         <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.0" expl="asserted formula" proved="true">
                         <proof prover="4"><result status="valid" time="0.027337" steps="43"/></proof>
                         </goal>
                         <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1" expl="false case" proved="true">
                         <transf name="remove" proved="true" arg1="h5">
                          <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0" expl="false case" proved="true">
                          <transf name="remove" proved="true" arg1="h3">
                           <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0" expl="false case" proved="true">
                           <transf name="remove" proved="true" arg1="h2">
                            <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0" expl="false case" proved="true">
                            <transf name="assert" proved="true" arg1="((exists l1&#39;:list vertex. path root (l1&#39; ++ Cons m1 l21) n /\ not mem1 m1 l1&#39; /\ (length l1&#39; &lt; length x1 \/ length l1&#39; = length x1)))">
                             <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
                             <proof prover="4"><result status="valid" time="0.083178" steps="318"/></proof>
                             </goal>
                             <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.1" expl="false case" proved="true">
                             <transf name="destruct" proved="true" arg1="h">
                              <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.1.0" expl="false case" proved="true">
                              <transf name="assert" proved="true" arg1="(mem1 m2 l1&#39;)">
                               <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.1.0.0" expl="asserted formula" proved="true">
                               <proof prover="4"><result status="valid" time="0.683307" steps="1829"/></proof>
                               </goal>
                               <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.1.0.1" expl="false case" proved="true">
                               <transf name="assert" proved="true" arg1="(exists l3 l4. l1&#39; = l3 ++ Cons m2 l4 /\ not mem1 m2 l3)">
                                <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
                                <proof prover="1"><result status="valid" time="1.675545"/></proof>
                                </goal>
                                <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.1.0.1.1" expl="false case" proved="true">
                                <transf name="destruct_rec" proved="true" arg1="h">
                                 <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.1.0.1.1.0" expl="false case" proved="true">
                                 <transf name="assert" proved="true" arg1="(path root (l3 ++ Cons m2 l2) n)">
                                  <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.1.0.1.1.0.0" expl="asserted formula" proved="true">
                                  <proof prover="4"><result status="valid" time="0.275395" steps="438"/></proof>
                                  </goal>
                                  <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.0.0.1.0.0.1.0.1.0.0.1.1.0.0.0.1.0.1.1.0.1" expl="false case" proved="true">
                                  <proof prover="4"><result status="valid" time="0.978785" steps="2437"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.0.1" expl="false case" proved="true">
              <proof prover="1"><result status="valid" time="0.092454"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="idom_unique.0.0.1.1.1.1.1.1.1.1.1.1" expl="false case" proved="true">
             <proof prover="4"><result status="valid" time="0.024691" steps="39"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="idom_on_every_path" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="idom_on_every_path.0" proved="true">
  <proof prover="4"><result status="valid" time="0.023687" steps="31"/></proof>
  </goal>
  <goal name="idom_on_every_path.1" proved="true">
  <proof prover="4"><result status="valid" time="0.021065" steps="33"/></proof>
  </goal>
  <goal name="idom_on_every_path.2" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="idom_on_every_path.2.0" proved="true">
   <transf name="instantiate" proved="true" arg1="idom_exists_c" arg2="p, w">
    <goal name="idom_on_every_path.2.0.0" proved="true">
    <transf name="assert" proved="true" arg1="((exists idominator:vertex. idominator ~~&gt; w /\ (exists l1:list vertex, l2:list vertex. (l1 ++ Cons idominator l2) = Cons root p /\ (forall x:vertex. mem1 x l2 -&gt; not x ~~&gt; w))))">
     <goal name="idom_on_every_path.2.0.0.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.050819" steps="305"/></proof>
     </goal>
     <goal name="idom_on_every_path.2.0.0.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="idom_on_every_path.2.0.0.1.0" proved="true">
      <transf name="assert" proved="true" arg1="(idominator ~&gt; w)">
       <goal name="idom_on_every_path.2.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.079390" steps="397"/></proof>
       </goal>
       <goal name="idom_on_every_path.2.0.0.1.0.1" proved="true">
       <transf name="assert" proved="true" arg1="(idominator = idom_w)">
        <goal name="idom_on_every_path.2.0.0.1.0.1.0" expl="asserted formula" proved="true">
        <proof prover="4"><result status="valid" time="0.030462" steps="19"/></proof>
        </goal>
        <goal name="idom_on_every_path.2.0.0.1.0.1.1" proved="true">
        <proof prover="4"><result status="valid" time="0.040137" steps="195"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="idom_on_every_path.3" proved="true">
  <proof prover="4"><result status="valid" time="1.349753" steps="5709"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ListHelper" proved="true">
 <goal name="shame" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="shame.0" proved="true">
  <proof prover="4"><result status="valid" time="0.080782" steps="647"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="IdomPropertyA" proved="true">
 <goal name="idom_is_the_last" proved="true">
 <proof prover="4"><result status="valid" time="0.084033" steps="425"/></proof>
 </goal>
</theory>
<theory name="ShouldFail">
 <goal name="wrong1">
 <proof prover="0" obsolete="true"><result status="timeout" time="120.000000" steps="90207541"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="120.000000"/></proof>
 <proof prover="3" obsolete="true"><result status="timeout" time="120.000000" steps="3696308"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="120.000000" steps="273949"/></proof>
 </goal>
</theory>
</file>
</why3session>
