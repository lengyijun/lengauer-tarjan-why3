<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.5.2" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="1" name="CVC5" version="1.0.8" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="2" name="Eprover" version="2.0" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="3" name="CVC4" version="1.8" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="4" name="Z3" version="4.12.2" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="5" name="CVC4" version="1.8" alternative="strings" timelimit="100" steplimit="0" memlimit="10000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="lengauer-tarjan.mlw"/>
<theory name="Graph" proved="true">
 <goal name="path_in_vertices" proved="true">
 <proof prover="0"><result status="valid" time="0.037955" steps="91"/></proof>
 </goal>
 <goal name="span_cutoff" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="span_cutoff.0" proved="true">
  <proof prover="0"><result status="valid" time="0.021424" steps="19"/></proof>
  <proof prover="1"><result status="valid" time="0.064616" steps="17334"/></proof>
  <proof prover="2"><result status="valid" time="0.040772"/></proof>
  <proof prover="3"><result status="valid" time="0.108110" steps="21089"/></proof>
  <proof prover="4"><result status="valid" time="0.044794" steps="104029"/></proof>
  </goal>
  <goal name="span_cutoff.1" proved="true">
  <proof prover="2"><result status="valid" time="0.059208"/></proof>
  <proof prover="3"><result status="timeout" time="100.000000" steps="8411383"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="concat_lemma.0" proved="true">
  <proof prover="0"><result status="valid" time="0.026947" steps="19"/></proof>
  </goal>
  <goal name="concat_lemma.1" proved="true">
  <proof prover="0"><result status="valid" time="0.047265" steps="195"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="InductionNodeMem.base" proved="true">
 <proof prover="0"><result status="valid" time="0.079001" steps="422"/></proof>
 </goal>
 <goal name="InductionNodeMem.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="0.044251" steps="202"/></proof>
 <proof prover="1"><result status="valid" time="0.148591" steps="22926"/></proof>
 <proof prover="3"><result status="valid" time="0.207274" steps="29999"/></proof>
 </goal>
 <goal name="start_node_mem" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="start_node_mem.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_node_mem (length l))">
   <goal name="start_node_mem.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.023066" steps="19"/></proof>
   </goal>
   <goal name="start_node_mem.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.040940" steps="110"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="0"><result status="valid" time="0.093504" steps="761"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="1.304331" steps="6865"/></proof>
 </goal>
 <goal name="unnamed_a" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_a.0" proved="true">
  <transf name="assert" proved="true" arg1="(p1 (length l))">
   <goal name="unnamed_a.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.029669" steps="26"/></proof>
   </goal>
   <goal name="unnamed_a.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.789403" steps="3461"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionUnique.base" proved="true">
 <proof prover="0"><result status="valid" time="0.276879" steps="1028"/></proof>
 </goal>
 <goal name="InductionUnique.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="0.096726" steps="712"/></proof>
 </goal>
 <goal name="path_unique" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="path_unique.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_unique (length l1))">
   <goal name="path_unique.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.030189" steps="25"/></proof>
   </goal>
   <goal name="path_unique.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.050074" steps="154"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="must_on_tree" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="must_on_tree.0" proved="true">
  <proof prover="0"><result status="valid" time="0.029365" steps="186"/></proof>
  </goal>
  <goal name="must_on_tree.1" proved="true">
  <proof prover="0"><result status="valid" time="0.050545" steps="22"/></proof>
  </goal>
  <goal name="must_on_tree.2" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="must_on_tree.2.0" proved="true">
   <transf name="assert" proved="true" arg1="(y &lt;&gt; root)">
    <goal name="must_on_tree.2.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.033264" steps="75"/></proof>
    </goal>
    <goal name="must_on_tree.2.0.1" proved="true">
    <transf name="assert" proved="true" arg1="(x = root \/ exists l2. (--+-&gt;) dfsnum_parent root l2 x)">
     <goal name="must_on_tree.2.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.191909" steps="702"/></proof>
     </goal>
     <goal name="must_on_tree.2.0.1.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="must_on_tree.2.0.1.1.0" proved="true">
      <proof prover="0"><result status="valid" time="0.046834" steps="22"/></proof>
      </goal>
      <goal name="must_on_tree.2.0.1.1.1" proved="true">
      <proof prover="1"><result status="valid" time="5.541564" steps="269498"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="subset_lemma" proved="true">
 <proof prover="0"><result status="valid" time="0.125037" steps="979"/></proof>
 </goal>
 <goal name="Inductionc.base" proved="true">
 <proof prover="0"><result status="valid" time="0.177100" steps="788"/></proof>
 </goal>
 <goal name="Inductionc.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="0.061577" steps="683"/></proof>
 <proof prover="1"><result status="valid" time="0.797157" steps="75063"/></proof>
 </goal>
 <goal name="unnamed_c" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_c.0" proved="true">
  <transf name="assert" proved="true" arg1="(pc (length l))">
   <goal name="unnamed_c.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.030790" steps="25"/></proof>
   </goal>
   <goal name="unnamed_c.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.032308" steps="186"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Inductionb.base" proved="true">
 <proof prover="0"><result status="valid" time="0.442959" steps="2001"/></proof>
 </goal>
 <goal name="Inductionb.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="1.485583" steps="7459"/></proof>
 </goal>
 <goal name="unnamed_b" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_b.0" proved="true">
  <transf name="assert" proved="true" arg1="(pb (length l))">
   <goal name="unnamed_b.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.024877" steps="28"/></proof>
   </goal>
   <goal name="unnamed_b.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.047709" steps="206"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="dfs&#39;vc" expl="VC for dfs" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="dfs&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.027507" steps="16"/></proof>
  </goal>
  <goal name="dfs&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.043450" steps="56"/></proof>
  </goal>
  <goal name="dfs&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.030368" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.033407" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.027595" steps="18"/></proof>
  <proof prover="1"><result status="valid" time="0.054147" steps="24806"/></proof>
  </goal>
  <goal name="dfs&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.043344" steps="188"/></proof>
  <proof prover="1"><result status="valid" time="0.105831" steps="26660"/></proof>
  <proof prover="2"><result status="valid" time="7.024015"/></proof>
  </goal>
  <goal name="dfs&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.069702" steps="63"/></proof>
  </goal>
  <goal name="dfs&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.136331" steps="59"/></proof>
  </goal>
  <goal name="dfs&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.037860" steps="63"/></proof>
  </goal>
  <goal name="dfs&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.072558" steps="69"/></proof>
  </goal>
  <goal name="dfs&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.123894" steps="193"/></proof>
  </goal>
  <goal name="dfs&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.103776" steps="574"/></proof>
  </goal>
  <goal name="dfs&#39;vc.12" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfs&#39;vc.12.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(w = z)">
    <goal name="dfs&#39;vc.12.0.0" expl="true case (precondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.084667" steps="252"/></proof>
    </goal>
    <goal name="dfs&#39;vc.12.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mapsto v (iv, pv) dfsnum_parent /\ mapsto w (iw, pw) dfsnum_parent)">
     <goal name="dfs&#39;vc.12.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.035218" steps="46"/></proof>
     </goal>
     <goal name="dfs&#39;vc.12.0.1.1" expl="false case (precondition)" proved="true">
     <proof prover="0"><result status="valid" time="0.080524" steps="222"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.600876" steps="6877"/></proof>
  </goal>
  <goal name="dfs&#39;vc.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.360833" steps="5164"/></proof>
  </goal>
  <goal name="dfs&#39;vc.15" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.186504" steps="765"/></proof>
  </goal>
  <goal name="dfs&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.631546" steps="3180"/></proof>
  </goal>
  <goal name="dfs&#39;vc.17" expl="assertion" proved="true">
  <transf name="intros_n" proved="true" arg1="25">
   <goal name="dfs&#39;vc.17.0" expl="assertion" proved="true">
   <transf name="induction_pr" proved="true" >
    <goal name="dfs&#39;vc.17.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.059398" steps="179"/></proof>
    </goal>
    <goal name="dfs&#39;vc.17.0.1" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.057820" steps="203"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.18" expl="assertion" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfs&#39;vc.18.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="dfs&#39;vc.18.0.0" expl="assertion" proved="true">
    <transf name="split_goal_full" proved="true" >
     <goal name="dfs&#39;vc.18.0.0.0" expl="VC for dfs" proved="true">
     <proof prover="0"><result status="valid" time="0.106714" steps="43"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.1" expl="VC for dfs" proved="true">
     <proof prover="0"><result status="valid" time="0.612669" steps="3219"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.2" expl="VC for dfs" proved="true">
     <proof prover="0"><result status="valid" time="2.476614" steps="10219"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.3" expl="VC for dfs" proved="true">
     <proof prover="0"><result status="valid" time="0.166411" steps="400"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.4" expl="VC for dfs" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="dfs&#39;vc.18.0.0.4.0" expl="VC for dfs" proved="true">
      <transf name="case" proved="true" arg1="(x = z)">
       <goal name="dfs&#39;vc.18.0.0.4.0.0" expl="true case" proved="true">
       <proof prover="1"><result status="valid" time="4.843980" steps="196300"/></proof>
       <proof prover="2"><result status="valid" time="0.124933"/></proof>
       </goal>
       <goal name="dfs&#39;vc.18.0.0.4.0.1" expl="false case" proved="true">
       <proof prover="0"><result status="valid" time="6.515225" steps="21576"/></proof>
       <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent root l x)">
        <goal name="dfs&#39;vc.18.0.0.4.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="4.351224" steps="16848"/></proof>
        </goal>
        <goal name="dfs&#39;vc.18.0.0.4.0.1.1" expl="false case" proved="true">
        <proof prover="0"><result status="valid" time="0.100695" steps="170"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.5" expl="VC for dfs" proved="true">
     <proof prover="0"><result status="valid" time="4.460002" steps="15911"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.6" expl="VC for dfs" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="dfs&#39;vc.18.0.0.6.0" expl="VC for dfs" proved="true">
      <transf name="assert" proved="true" arg1="(size dfsnum_parent + 1 = sn)">
       <goal name="dfs&#39;vc.18.0.0.6.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.046859" steps="166"/></proof>
       </goal>
       <goal name="dfs&#39;vc.18.0.0.6.0.1" expl="VC for dfs" proved="true">
       <transf name="assert" proved="true" arg1="(i &lt; size dfsnum_parent \/ i = size dfsnum_parent )">
        <goal name="dfs&#39;vc.18.0.0.6.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.033087" steps="42"/></proof>
        </goal>
        <goal name="dfs&#39;vc.18.0.0.6.0.1.1" expl="VC for dfs" proved="true">
        <transf name="destruct" proved="true" arg1="h">
         <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0" expl="VC for dfs" proved="true">
         <proof prover="2"><result status="valid" time="0.313948"/></proof>
         <transf name="assert" proved="true" arg1="(exists x:vertex, p3:vertex. mapsto x (i, p3) dfsnum_parent)">
          <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.0" expl="asserted formula" proved="true">
          <proof prover="2"><result status="valid" time="0.232763"/></proof>
          </goal>
          <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.1" expl="VC for dfs" proved="true">
          <proof prover="0"><result status="valid" time="0.121802" steps="185"/></proof>
          <proof prover="1"><result status="valid" time="0.276791" steps="29160"/></proof>
          <proof prover="2"><result status="valid" time="0.216942"/></proof>
          <proof prover="4"><result status="valid" time="0.132185" steps="175608"/></proof>
          <proof prover="5"><result status="unknown" time="0.345575" steps="33508"/></proof>
          <transf name="destruct_rec" proved="true" arg1="h">
           <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.1.0" expl="VC for dfs" proved="true">
           <transf name="exists" proved="true" arg1="x">
            <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.1.0.0" proved="true">
            <transf name="exists" proved="true" arg1="p3">
             <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.1.0.0.0" proved="true">
             <proof prover="0"><result status="valid" time="0.119332" steps="53"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="dfs&#39;vc.18.0.0.6.0.1.1.1" expl="VC for dfs" proved="true">
         <proof prover="0"><result status="valid" time="1.566662" steps="5157"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.7" expl="VC for dfs" proved="true">
     <proof prover="0"><result status="valid" time="0.454202" steps="1164"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.19" expl="assertion" proved="true">
  <transf name="split_goal_full" proved="true" >
   <goal name="dfs&#39;vc.19.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.051599" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.032935" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.034965" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.3" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.061869" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.4" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.059792" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.5" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.031081" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.6" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.054996" steps="18"/></proof>
   <proof prover="1"><result status="valid" time="0.110475" steps="25057"/></proof>
   <transf name="introduce_premises" proved="true" >
    <goal name="dfs&#39;vc.19.6.0" expl="assertion" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="dfs&#39;vc.19.6.0.0" expl="assertion" proved="true">
     <transf name="split_goal_full" proved="true" >
      <goal name="dfs&#39;vc.19.6.0.0.0" expl="VC for dfs" proved="true">
      <proof prover="0"><result status="valid" time="0.049396" steps="36"/></proof>
      </goal>
      <goal name="dfs&#39;vc.19.6.0.0.1" expl="VC for dfs" proved="true">
      <proof prover="0"><result status="valid" time="0.023236" steps="36"/></proof>
      </goal>
      <goal name="dfs&#39;vc.19.6.0.0.2" expl="VC for dfs" proved="true">
      <proof prover="0"><result status="valid" time="0.049690" steps="36"/></proof>
      </goal>
      <goal name="dfs&#39;vc.19.6.0.0.3" expl="VC for dfs" proved="true">
      <proof prover="0"><result status="valid" time="0.051762" steps="36"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="dfs&#39;vc.19.7" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.208532" steps="519"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.8" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.024908" steps="18"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.9" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.202108" steps="408"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.10" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.034020" steps="18"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.11" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.256955" steps="409"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.12" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.056544" steps="18"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.13" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.026836" steps="66"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.14" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.027231" steps="18"/></proof>
   <proof prover="1"><result status="valid" time="0.167399" steps="25055"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.15" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.057176" steps="481"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.20" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.096284" steps="317"/></proof>
  </goal>
  <goal name="dfs&#39;vc.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.026375" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.145891" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.097147" steps="18"/></proof>
  <proof prover="1"><result status="valid" time="0.060820" steps="25274"/></proof>
  <proof prover="2"><result status="valid" time="0.032862"/></proof>
  <proof prover="3"><result status="valid" time="0.268456" steps="35552"/></proof>
  </goal>
  <goal name="dfs&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.266718" steps="718"/></proof>
  </goal>
  <goal name="dfs&#39;vc.25" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.057153" steps="74"/></proof>
  </goal>
  <goal name="dfs&#39;vc.26" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.313288" steps="1083"/></proof>
  </goal>
  <goal name="dfs&#39;vc.27" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.064302" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.28" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.103880" steps="87"/></proof>
  </goal>
  <goal name="dfs&#39;vc.29" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.284403" steps="1252"/></proof>
  </goal>
  <goal name="dfs&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.396848" steps="1618"/></proof>
  </goal>
  <goal name="dfs&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="51.083500" steps="150289"/></proof>
  </goal>
  <goal name="dfs&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.625871" steps="2547"/></proof>
  </goal>
  <goal name="dfs&#39;vc.33" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfs&#39;vc.33.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(c = z)">
    <goal name="dfs&#39;vc.33.0.0" expl="true case (precondition)" proved="true">
    <proof prover="0"><result status="valid" time="1.291525" steps="4542"/></proof>
    </goal>
    <goal name="dfs&#39;vc.33.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mapsto a (ia, pa) dfsnum_parent /\ mapsto c (ic, pc) dfsnum_parent /\ mapsto b (ib, pb) dfsnum_parent)">
     <goal name="dfs&#39;vc.33.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.640334" steps="2228"/></proof>
     </goal>
     <goal name="dfs&#39;vc.33.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="((--+-&gt;) dfsnum_parent a lac c)">
      <goal name="dfs&#39;vc.33.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.244595" steps="448"/></proof>
      </goal>
      <goal name="dfs&#39;vc.33.0.1.1.1" expl="false case (precondition)" proved="true">
      <proof prover="0"><result status="valid" time="7.467295" steps="18214"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.34" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.280076" steps="771"/></proof>
  </goal>
  <goal name="dfs&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.028340" steps="72"/></proof>
  </goal>
  <goal name="dfs&#39;vc.36" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.063564"/></proof>
  </goal>
  <goal name="dfs&#39;vc.37" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.101471" steps="93"/></proof>
  </goal>
  <goal name="dfs&#39;vc.38" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.262203" steps="759"/></proof>
  </goal>
  <goal name="dfs&#39;vc.39" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.594252" steps="2526"/></proof>
  </goal>
  <goal name="dfs&#39;vc.40" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.177190" steps="470"/></proof>
  </goal>
  <goal name="dfs&#39;vc.41" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.063066" steps="102"/></proof>
  </goal>
  <goal name="dfs&#39;vc.42" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.111046" steps="108"/></proof>
  </goal>
  <goal name="dfs&#39;vc.43" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.287162" steps="1077"/></proof>
  <proof prover="1"><result status="valid" time="0.320659" steps="34587"/></proof>
  <proof prover="4"><result status="valid" time="0.120342" steps="179708"/></proof>
  </goal>
  <goal name="dfs&#39;vc.44" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.077242" steps="72"/></proof>
  </goal>
  <goal name="dfs&#39;vc.45" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.584473" steps="1293"/></proof>
  </goal>
  <goal name="dfs&#39;vc.46" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.894130" steps="2742"/></proof>
  </goal>
  <goal name="dfs&#39;vc.47" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.011103" steps="3219"/></proof>
  </goal>
  <goal name="dfs&#39;vc.48" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.131485" steps="556"/></proof>
  </goal>
  <goal name="dfs&#39;vc.49" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.051614" steps="246"/></proof>
  </goal>
  <goal name="dfs&#39;vc.50" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.074554" steps="78"/></proof>
  <proof prover="1"><result status="valid" time="0.290275" steps="30122"/></proof>
  <proof prover="3"><result status="valid" time="0.404688" steps="40489"/></proof>
  </goal>
  <goal name="dfs&#39;vc.51" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.060714" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.52" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.241654" steps="899"/></proof>
  </goal>
  <goal name="dfs&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.066710" steps="76"/></proof>
  </goal>
  <goal name="dfs&#39;vc.54" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.272197" steps="771"/></proof>
  </goal>
  <goal name="dfs&#39;vc.55" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.030331" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.56" expl="precondition" proved="true">
  <transf name="inline_all" proved="true" >
   <goal name="dfs&#39;vc.56.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.403676" steps="212"/></proof>
   <proof prover="1"><result status="valid" time="0.455313" steps="79077"/></proof>
   <proof prover="2"><result status="valid" time="15.462761"/></proof>
   <proof prover="3"><result status="valid" time="0.701381" steps="104920"/></proof>
   <proof prover="4"><result status="valid" time="0.171591" steps="444064"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.57" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.635732" steps="2186"/></proof>
  </goal>
  <goal name="dfs&#39;vc.58" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.642049" steps="3744"/></proof>
  <proof prover="1"><result status="valid" time="0.202039" steps="28051"/></proof>
  <proof prover="2"><result status="valid" time="1.815683"/></proof>
  </goal>
  <goal name="dfs&#39;vc.59" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfs&#39;vc.59.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(w = z)">
    <goal name="dfs&#39;vc.59.0.0" expl="true case (precondition)" proved="true">
    <proof prover="0"><result status="valid" time="11.085879" steps="25028"/></proof>
    </goal>
    <goal name="dfs&#39;vc.59.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mapsto v (iv, pv) dfsnum_parent /\ mapsto w (iw, pw) dfsnum_parent )">
     <goal name="dfs&#39;vc.59.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.566375" steps="1535"/></proof>
     </goal>
     <goal name="dfs&#39;vc.59.0.1.1" expl="false case (precondition)" proved="true">
     <proof prover="0"><result status="valid" time="2.716531" steps="6047"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.60" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfs&#39;vc.60.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(b = z)">
    <goal name="dfs&#39;vc.60.0.0" expl="true case (precondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.296663" steps="768"/></proof>
    </goal>
    <goal name="dfs&#39;vc.60.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mapsto a (ia, pa) dfsnum_parent /\ mapsto b (ib, pb) dfsnum_parent )">
     <goal name="dfs&#39;vc.60.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.960008" steps="2627"/></proof>
     </goal>
     <goal name="dfs&#39;vc.60.0.1.1" expl="false case (precondition)" proved="true">
     <proof prover="0"><result status="valid" time="11.940933" steps="26704"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.61" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfs&#39;vc.61.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(c = z)">
    <goal name="dfs&#39;vc.61.0.0" expl="true case (precondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.964736" steps="2471"/></proof>
    </goal>
    <goal name="dfs&#39;vc.61.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mapsto b (ib, pb) dfsnum_parent /\ mapsto a (ia, pa) dfsnum_parent /\ mapsto c (ic, pc) dfsnum_parent)">
     <goal name="dfs&#39;vc.61.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.274367" steps="2748"/></proof>
     </goal>
     <goal name="dfs&#39;vc.61.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="((--+-&gt;) dfsnum_parent a lac c)">
      <goal name="dfs&#39;vc.61.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.235027" steps="493"/></proof>
      </goal>
      <goal name="dfs&#39;vc.61.0.1.1.1" expl="false case (precondition)" proved="true">
      <proof prover="0"><result status="valid" time="21.215787" steps="52403"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.62" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.271288" steps="913"/></proof>
  </goal>
  <goal name="dfs&#39;vc.63" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.033590" steps="74"/></proof>
  </goal>
  <goal name="dfs&#39;vc.64" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.136372" steps="357"/></proof>
  </goal>
  <goal name="dfs&#39;vc.65" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.032268" steps="97"/></proof>
  </goal>
  <goal name="dfs&#39;vc.66" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.683116" steps="1420"/></proof>
  </goal>
  <goal name="dfs&#39;vc.67" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.790660" steps="2022"/></proof>
  </goal>
  <goal name="dfs&#39;vc.68" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.178011" steps="416"/></proof>
  </goal>
  <goal name="dfs&#39;vc.69" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.042401" steps="106"/></proof>
  </goal>
  <goal name="dfs&#39;vc.70" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.103837" steps="112"/></proof>
  </goal>
  <goal name="dfs&#39;vc.71" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.496899" steps="1384"/></proof>
  <proof prover="1"><result status="valid" time="0.313616" steps="34128"/></proof>
  </goal>
  <goal name="dfs&#39;vc.72" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.822670" steps="6039"/></proof>
  <proof prover="1"><result status="valid" time="0.619179" steps="46577"/></proof>
  <proof prover="2"><result status="valid" time="5.704650"/></proof>
  </goal>
  <goal name="dfs&#39;vc.73" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.870272" steps="1638"/></proof>
  </goal>
  <goal name="dfs&#39;vc.74" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.002232" steps="2280"/></proof>
  </goal>
  <goal name="dfs&#39;vc.75" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="7.047264" steps="21359"/></proof>
  </goal>
  <goal name="dfs&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.030614" steps="16"/></proof>
  <proof prover="1"><result status="valid" time="0.063301" steps="24711"/></proof>
  <proof prover="2"><result status="valid" time="0.031486"/></proof>
  <proof prover="3"><result status="valid" time="0.261846" steps="34738"/></proof>
  <proof prover="4"><result status="valid" time="0.039145" steps="11461"/></proof>
  </goal>
  <goal name="dfs&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.068768" steps="137"/></proof>
  </goal>
  <goal name="dfs&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.141446" steps="53"/></proof>
  </goal>
  <goal name="dfs&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.103920" steps="174"/></proof>
  </goal>
  <goal name="dfs&#39;vc.80" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.079699" steps="149"/></proof>
  <proof prover="1"><result status="valid" time="0.251292" steps="28914"/></proof>
  <proof prover="2"><result status="valid" time="0.179647"/></proof>
  <proof prover="3"><result status="valid" time="0.339300" steps="38896"/></proof>
  <proof prover="4"><result status="valid" time="0.099073" steps="152585"/></proof>
  </goal>
  <goal name="dfs&#39;vc.81" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.306885" steps="431"/></proof>
  </goal>
  <goal name="dfs&#39;vc.82" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.161153" steps="189"/></proof>
  </goal>
  <goal name="dfs&#39;vc.83" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.686566" steps="1160"/></proof>
  </goal>
  <goal name="dfs&#39;vc.84" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.590857" steps="2945"/></proof>
  </goal>
  <goal name="dfs&#39;vc.85" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.030147" steps="40"/></proof>
  <proof prover="1"><result status="valid" time="0.201387" steps="28039"/></proof>
  </goal>
  <goal name="dfs&#39;vc.86" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.063923" steps="241"/></proof>
  </goal>
  <goal name="dfs&#39;vc.87" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.155614" steps="77"/></proof>
  </goal>
  <goal name="dfs&#39;vc.88" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.083398" steps="291"/></proof>
  </goal>
  <goal name="dfs&#39;vc.89" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.256122" steps="523"/></proof>
  </goal>
  <goal name="dfs&#39;vc.90" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.207088" steps="570"/></proof>
  </goal>
  <goal name="dfs&#39;vc.91" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.323799" steps="642"/></proof>
  </goal>
  <goal name="dfs&#39;vc.92" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.144087" steps="3461"/></proof>
  </goal>
  <goal name="dfs&#39;vc.93" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.943607" steps="6263"/></proof>
  </goal>
  <goal name="dfs&#39;vc.94" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.922790" steps="2489"/></proof>
  </goal>
  <goal name="dfs&#39;vc.95" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.317218" steps="665"/></proof>
  </goal>
  <goal name="dfs&#39;vc.96" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.110529" steps="116"/></proof>
  </goal>
  <goal name="dfs&#39;vc.97" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.238403" steps="523"/></proof>
  </goal>
  <goal name="dfs&#39;vc.98" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.332937" steps="949"/></proof>
  </goal>
  <goal name="dfs&#39;vc.99" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.053986" steps="40"/></proof>
  </goal>
  <goal name="dfs&#39;vc.100" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.349955" steps="1082"/></proof>
  <proof prover="2"><result status="valid" time="34.920474"/></proof>
  </goal>
  <goal name="dfs&#39;vc.101" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.453798" steps="3224"/></proof>
  </goal>
  <goal name="dfs&#39;vc.102" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.839435" steps="2404"/></proof>
  </goal>
  <goal name="dfs&#39;vc.103" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.457574" steps="4289"/></proof>
  </goal>
  <goal name="dfs&#39;vc.104" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.310956" steps="735"/></proof>
  </goal>
  <goal name="dfs&#39;vc.105" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.131159" steps="120"/></proof>
  </goal>
  <goal name="dfs&#39;vc.106" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.226671" steps="569"/></proof>
  </goal>
  <goal name="dfs&#39;vc.107" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.560815" steps="1103"/></proof>
  </goal>
  <goal name="dfs&#39;vc.108" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.320005" steps="1123"/></proof>
  </goal>
  <goal name="dfs&#39;vc.109" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.642843" steps="1229"/></proof>
  </goal>
  <goal name="dfs&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.121965" steps="3370"/></proof>
  </goal>
  <goal name="dfs&#39;vc.111" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.690689" steps="3617"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_parent&#39;vc" expl="VC for dfsnum_parent" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="dfsnum_parent&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.050894" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.137870" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.2" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfsnum_parent&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="subst_all" proved="true" >
    <goal name="dfsnum_parent&#39;vc.2.0.0" expl="precondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="dfsnum_parent&#39;vc.2.0.0.0" expl="precondition" proved="true">
     <transf name="split_goal_full" proved="true" >
      <goal name="dfsnum_parent&#39;vc.2.0.0.0.0" expl="VC for dfsnum_parent" proved="true">
      <proof prover="0"><result status="valid" time="0.070851" steps="189"/></proof>
      </goal>
      <goal name="dfsnum_parent&#39;vc.2.0.0.0.1" expl="VC for dfsnum_parent" proved="true">
      <proof prover="0"><result status="valid" time="0.125934" steps="268"/></proof>
      </goal>
      <goal name="dfsnum_parent&#39;vc.2.0.0.0.2" expl="VC for dfsnum_parent" proved="true">
      <proof prover="0"><result status="valid" time="0.079683" steps="246"/></proof>
      </goal>
      <goal name="dfsnum_parent&#39;vc.2.0.0.0.3" expl="VC for dfsnum_parent" proved="true">
      <proof prover="0"><result status="valid" time="0.078592" steps="244"/></proof>
      </goal>
      <goal name="dfsnum_parent&#39;vc.2.0.0.0.4" expl="VC for dfsnum_parent" proved="true">
      <proof prover="0"><result status="valid" time="0.085164" steps="212"/></proof>
      </goal>
      <goal name="dfsnum_parent&#39;vc.2.0.0.0.5" expl="VC for dfsnum_parent" proved="true">
      <proof prover="0"><result status="valid" time="0.089151" steps="300"/></proof>
      </goal>
      <goal name="dfsnum_parent&#39;vc.2.0.0.0.6" expl="VC for dfsnum_parent" proved="true">
      <proof prover="0"><result status="valid" time="96.604507" steps="391460"/></proof>
      </goal>
      <goal name="dfsnum_parent&#39;vc.2.0.0.0.7" expl="VC for dfsnum_parent" proved="true">
      <proof prover="0"><result status="valid" time="0.127615" steps="348"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfsnum_parent&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.195920" steps="235"/></proof>
  <proof prover="1"><result status="valid" time="0.536353" steps="50377"/></proof>
  <proof prover="4"><result status="valid" time="0.113848" steps="301878"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.072869" steps="30"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.057307" steps="32"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.047008" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.059732" steps="40"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.092685" steps="209"/></proof>
  <proof prover="1"><result status="valid" time="0.228878" steps="42084"/></proof>
  <proof prover="4"><result status="valid" time="0.117486" steps="274499"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.043569" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.300679" steps="483"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.320229" steps="619"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.635997" steps="1486"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_h" proved="true">
 <proof prover="0"><result status="valid" time="30.339618" steps="81042"/></proof>
 </goal>
 <goal name="dfsnum_property_j" proved="true">
 <proof prover="0"><result status="valid" time="41.604674" steps="87003"/></proof>
 </goal>
 <goal name="dfsnum_property_a" proved="true">
 <proof prover="0"><result status="valid" time="32.180855" steps="73961"/></proof>
 </goal>
 <goal name="dfsnum_property_e" proved="true">
 <proof prover="0"><result status="valid" time="67.044461" steps="161281"/></proof>
 </goal>
 <goal name="dfsnum_property_d" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="dfsnum_property_d.0" proved="true">
  <proof prover="0"><result status="valid" time="0.221401" steps="205"/></proof>
  <proof prover="1"><result status="valid" time="0.251331" steps="41911"/></proof>
  </goal>
  <goal name="dfsnum_property_d.1" proved="true">
  <proof prover="0"><result status="valid" time="0.138992" steps="122"/></proof>
  <proof prover="1"><result status="valid" time="0.371778" steps="42212"/></proof>
  <proof prover="3"><result status="valid" time="0.522067" steps="56850"/></proof>
  <transf name="introduce_premises" proved="true" >
   <goal name="dfsnum_property_d.1.0" proved="true">
   <proof prover="0"><result status="valid" time="0.163815" steps="138"/></proof>
   <proof prover="1"><result status="valid" time="0.350560" steps="46220"/></proof>
   <proof prover="3"><result status="valid" time="0.612962" steps="60973"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_c" proved="true">
 <proof prover="0"><result status="valid" time="0.449506" steps="850"/></proof>
 </goal>
 <goal name="InductionJustSpecialPath.base" proved="true">
 <proof prover="0"><result status="valid" time="0.489820" steps="1205"/></proof>
 </goal>
 <goal name="InductionJustSpecialPath.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="0.320602" steps="761"/></proof>
 </goal>
 <goal name="just_special_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="just_special_path.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_just_special_path (length l))">
   <goal name="just_special_path.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.059826" steps="39"/></proof>
   </goal>
   <goal name="just_special_path.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.092677" steps="114"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_g" proved="true">
 <proof prover="0"><result status="valid" time="0.248636" steps="411"/></proof>
 </goal>
 <goal name="lemma2_helper_a" proved="true">
 <proof prover="0"><result status="valid" time="0.503775" steps="1159"/></proof>
 </goal>
 <goal name="lemma2_helper_b" proved="true">
 <proof prover="0"><result status="valid" time="7.531379" steps="14836"/></proof>
 </goal>
 <goal name="lemma2" proved="true">
 <proof prover="0"><result status="valid" time="0.393648" steps="552"/></proof>
 </goal>
 <goal name="InductionLemma1Helper.base" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="base.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="base.0.0" proved="true">
   <transf name="exists" proved="true" arg1="(Nil : list vertex)">
    <goal name="base.0.0.0" proved="true">
    <transf name="exists" proved="true" arg1="l">
     <goal name="base.0.0.0.0" proved="true">
     <transf name="exists" proved="true" arg1="a">
      <goal name="base.0.0.0.0.0" proved="true">
      <transf name="exists" proved="true" arg1="ia">
       <goal name="base.0.0.0.0.0.0" proved="true">
       <transf name="exists" proved="true" arg1="pa">
        <goal name="base.0.0.0.0.0.0.0" proved="true">
        <transf name="split_goal_full" proved="true" >
         <goal name="base.0.0.0.0.0.0.0.0" proved="true">
         <proof prover="0"><result status="valid" time="0.059994" steps="41"/></proof>
         </goal>
         <goal name="base.0.0.0.0.0.0.0.1" proved="true">
         <proof prover="0"><result status="valid" time="0.051059" steps="26"/></proof>
         </goal>
         <goal name="base.0.0.0.0.0.0.0.2" proved="true">
         <proof prover="0"><result status="valid" time="0.055423" steps="26"/></proof>
         </goal>
         <goal name="base.0.0.0.0.0.0.0.3" proved="true">
         <proof prover="0"><result status="valid" time="0.090979" steps="160"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1Helper.induction_step" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="induction_step.0.0.0" proved="true">
    <transf name="assert" proved="true" arg1="(exists l5 d . l = l5 ++ Cons d Nil)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="1.069834" steps="68678"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="induction_step.0.0.0.1.0" proved="true">
      <transf name="assert" proved="true" arg1="(exists id pd. mapsto d (id , pd) dfsnum_parent)">
       <goal name="induction_step.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="67.264340" steps="185566"/></proof>
       <proof prover="1"><result status="valid" time="2.245417" steps="98825"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="induction_step.0.0.0.1.0.1.0" proved="true">
        <transf name="assert" proved="true" arg1="(id &lt; t \/ id &gt;= t)">
         <goal name="induction_step.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.058681" steps="36"/></proof>
         </goal>
         <goal name="induction_step.0.0.0.1.0.1.0.1" proved="true">
         <transf name="destruct" proved="true" arg1="h">
          <goal name="induction_step.0.0.0.1.0.1.0.1.0" proved="true">
          <proof prover="0"><result status="valid" time="0.511588" steps="870"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.1.0.1.1" proved="true">
          <transf name="unfold" proved="true" arg1="p_lemma1_helper" arg2="in" arg3="H4">
           <goal name="induction_step.0.0.0.1.0.1.0.1.1.0" proved="true">
           <transf name="instantiate" proved="true" arg1="H4" arg2="l5, a, ia, pa, t">
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0" proved="true">
            <transf name="assert" proved="true" arg1="((exists l1:list vertex, l2:list vertex, b:vertex, ib:int, pb1:vertex. Cons a l5 = (l1 ++ Cons b l2) /\ mapsto b (ib, pb1) dfsnum_parent /\ ib &lt; t /\ (forall x:vertex, ix:int, px:vertex. mem2 x l2 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= t)))">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="0.549568" steps="1292"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h">
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0" proved="true">
              <transf name="subst_all" proved="true" >
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0" proved="true">
               <transf name="exists" proved="true" arg1="l1">
                <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0" proved="true">
                <transf name="exists" proved="true" arg1="(l2 ++ Cons d Nil)">
                 <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0.0" proved="true">
                 <transf name="exists" proved="true" arg1="b">
                  <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0.0.0" proved="true">
                  <transf name="exists" proved="true" arg1="ib">
                   <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0.0.0.0" proved="true">
                   <proof prover="0"><result status="valid" time="2.065143" steps="4281"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1_helper" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma1_helper.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_lemma1_helper (length l))">
   <goal name="lemma1_helper.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.071338" steps="43"/></proof>
   </goal>
   <goal name="lemma1_helper.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="p_lemma1_helper" arg2="in" arg3="h">
    <goal name="lemma1_helper.0.1.0" proved="true">
    <transf name="instantiate" proved="true" arg1="h" arg2="l, a, ia, pa">
     <goal name="lemma1_helper.0.1.0.0" proved="true">
     <transf name="apply" proved="true" arg1="Hinst">
      <goal name="lemma1_helper.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.057008" steps="26"/></proof>
      </goal>
      <goal name="lemma1_helper.0.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.080267" steps="42"/></proof>
      </goal>
      <goal name="lemma1_helper.0.1.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.070656" steps="26"/></proof>
      </goal>
      <goal name="lemma1_helper.0.1.0.0.3" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.064685" steps="26"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1_helper_b" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma1_helper_b.0" proved="true">
  <transf name="assert" proved="true" arg1="(v = root \/ exists l2. path root l2 v)">
   <goal name="lemma1_helper_b.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.526992" steps="785"/></proof>
   </goal>
   <goal name="lemma1_helper_b.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(exists l3. path v l3 x)">
    <goal name="lemma1_helper_b.0.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.334138" steps="341"/></proof>
    </goal>
    <goal name="lemma1_helper_b.0.1.1" proved="true">
    <proof prover="1"><result status="valid" time="50.765875" steps="856865"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionK.base" proved="true">
 <proof prover="0"><result status="valid" time="0.394867" steps="568"/></proof>
 </goal>
 <goal name="InductionK.induction_step" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="induction_step.0.0.0" proved="true">
    <transf name="assert" proved="true" arg1="(exists u l1 . path v l1 u /\ edge u w /\ l1 ++ Cons u Nil = l)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.301801" steps="320"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="induction_step.0.0.0.1.0" proved="true">
      <transf name="case" proved="true" arg1="(v = u)">
       <goal name="induction_step.0.0.0.1.0.0" expl="true case" proved="true">
       <proof prover="0"><result status="valid" time="0.232896" steps="205"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1" expl="false case" proved="true">
       <transf name="unfold" proved="true" arg1="p_dfsnum_property_k" arg2="in" arg3="H6">
        <goal name="induction_step.0.0.0.1.0.1.0" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(exists iu pu. mapsto u (iu, pu) dfsnum_parent)">
         <goal name="induction_step.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="7.086635" steps="206422"/></proof>
         </goal>
         <goal name="induction_step.0.0.0.1.0.1.0.1" expl="false case" proved="true">
         <transf name="destruct_rec" proved="true" arg1="h">
          <goal name="induction_step.0.0.0.1.0.1.0.1.0" expl="false case" proved="true">
          <transf name="assert" proved="true" arg1="(exists p. (--+-&gt;) dfsnum_parent v p u)">
           <goal name="induction_step.0.0.0.1.0.1.0.1.0.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="7.525327" steps="18765"/></proof>
           </goal>
           <goal name="induction_step.0.0.0.1.0.1.0.1.0.1" expl="false case" proved="true">
           <transf name="assert" proved="true" arg1="(iw = iu \/ iw &gt; iu \/ iw &lt; iu)">
            <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
            <proof prover="0"><result status="valid" time="0.060090" steps="50"/></proof>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1" expl="false case" proved="true">
            <transf name="destruct_rec" proved="true" arg1="h">
             <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.0" expl="false case" proved="true">
             <proof prover="0"><result status="valid" time="3.813734" steps="6158"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.1" expl="false case" proved="true">
             <transf name="assert" proved="true" arg1="(exists p. (--+-&gt;) dfsnum_parent u p w)">
              <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.1.0" expl="asserted formula" proved="true">
              <proof prover="0"><result status="valid" time="0.288176" steps="220"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.1.1" expl="false case" proved="true">
              <proof prover="1"><result status="valid" time="6.492393" steps="227312"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.2" expl="false case" proved="true">
             <proof prover="0"><result status="valid" time="0.974794" steps="1453"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_k" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="dfsnum_property_k.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_dfsnum_property_k (length l))">
   <goal name="dfsnum_property_k.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.081781" steps="50"/></proof>
   </goal>
   <goal name="dfsnum_property_k.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.566190" steps="1048"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1.base" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="base.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="base.0.0" proved="true">
   <transf name="assert" proved="true" arg1="(edge  v w)">
    <goal name="base.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.067553" steps="164"/></proof>
    </goal>
    <goal name="base.0.0.1" proved="true">
    <transf name="exists" proved="true" arg1="v">
     <goal name="base.0.0.1.0" proved="true">
     <transf name="split_goal_full" proved="true" >
      <goal name="base.0.0.1.0.0" proved="true">
      <proof prover="0"><result status="valid" time="0.175808" steps="52"/></proof>
      </goal>
      <goal name="base.0.0.1.0.1" proved="true">
      <proof prover="0"><result status="valid" time="0.073091" steps="49"/></proof>
      </goal>
      <goal name="base.0.0.1.0.2" proved="true">
      <proof prover="0"><result status="valid" time="0.245351" steps="166"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1.induction_step" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="induction_step.0.0.0" proved="true">
    <transf name="assert" proved="true" arg1="(forall x. mem2 x p -&gt; mem x dfsnum_parent)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.374801" steps="444"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1" proved="true">
     <transf name="instantiate" proved="true" arg1="lemma1_helper" arg2="p, v, iv, pv, iw">
      <goal name="induction_step.0.0.0.1.0" proved="true">
      <transf name="assert" proved="true" arg1="((exists l1:list vertex, l2:list vertex, b:vertex, ib:int, pb1:vertex. Cons v p = (l1 ++ Cons b l2) /\ mapsto b (ib, pb1) dfsnum_parent /\ ib &lt; iw /\ (forall x:vertex, ix:int, px:vertex. mem2 x l2 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= iw)))">
       <goal name="induction_step.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.407944" steps="483"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="induction_step.0.0.0.1.0.1.0" proved="true">
        <transf name="assert" proved="true" arg1="(path b l2 w)">
         <goal name="induction_step.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="destruct_term" proved="true" arg1="l1">
          <goal name="induction_step.0.0.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.544479" steps="726"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.1.0.0.1" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.194543" steps="78"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="induction_step.0.0.0.1.0.1.0.1" proved="true">
         <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent b l w)">
          <goal name="induction_step.0.0.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="4.873690" steps="18832"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.1.0.1.1" proved="true">
          <transf name="assert" proved="true" arg1="((iv = ib) \/ (iv &lt; ib) \/ (iv &gt; ib))">
           <goal name="induction_step.0.0.0.1.0.1.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.067167" steps="52"/></proof>
           </goal>
           <goal name="induction_step.0.0.0.1.0.1.0.1.1.1" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h">
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0" proved="true">
            <transf name="assert" proved="true" arg1="(b = v)">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="7.379334" steps="9447"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.1" proved="true">
             <transf name="subst" proved="true" arg1="b">
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.1.0" proved="true">
              <transf name="exists" proved="true" arg1="v">
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.1.0.0" proved="true">
               <proof prover="0"><result status="valid" time="0.338830" steps="453"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1" proved="true">
            <transf name="unfold" proved="true" arg1="p_lemma1" arg2="in" arg3="H5">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0" proved="true">
             <transf name="instantiate" proved="true" arg1="H5" arg2="v, b, iv, ib, pv, pb1">
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0" proved="true">
              <transf name="destruct_term" proved="true" arg1="l1">
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0" proved="true">
               <transf name="assert" proved="true" arg1="(path v x b)">
                <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
                <proof prover="0"><result status="valid" time="0.671312" steps="876"/></proof>
                </goal>
                <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1" proved="true">
                <transf name="assert" proved="true" arg1="(exists x2:vertex. mem2 x2 (Cons v x) /\ x2 -*-&gt; v /\ x2 -*-&gt; b)">
                 <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="0.816560" steps="1110"/></proof>
                 </goal>
                 <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1" proved="true">
                 <transf name="destruct_rec" proved="true" arg1="h">
                  <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0" proved="true">
                  <transf name="exists" proved="true" arg1="x2">
                   <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0" proved="true">
                   <transf name="split_goal_full" proved="true" >
                    <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.0" proved="true">
                    <proof prover="0"><result status="valid" time="0.257374" steps="338"/></proof>
                    </goal>
                    <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.1" proved="true">
                    <proof prover="0"><result status="valid" time="0.061055" steps="64"/></proof>
                    </goal>
                    <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2" proved="true">
                    <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent b l w)">
                     <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.0" expl="asserted formula" proved="true">
                     <proof prover="0"><result status="valid" time="0.087079" steps="81"/></proof>
                     </goal>
                     <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1" proved="true">
                     <transf name="unfold" proved="true" arg1="(-*-&gt;)" arg2="in" arg3="h1">
                      <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0" proved="true">
                      <transf name="destruct_rec" proved="true" arg1="h1">
                       <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.0" proved="true">
                       <proof prover="0"><result status="valid" time="0.300439" steps="318"/></proof>
                       </goal>
                       <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.1" proved="true">
                       <transf name="destruct_rec" proved="true" arg1="h">
                        <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.1.0" proved="true">
                        <transf name="instantiate" proved="true" arg1="concat_lemma" arg2="dfsnum_parent, x2, l1, b, l, w">
                         <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.1.0.0" proved="true">
                         <proof prover="0"><result status="valid" time="0.320597" steps="344"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.1" proved="true">
               <proof prover="0"><result status="valid" time="0.086541" steps="87"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2" proved="true">
            <transf name="exists" proved="true" arg1="b">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0" proved="true">
             <proof prover="0"><result status="valid" time="4.477652" steps="9889"/></proof>
             <transf name="split_goal_full" proved="true" >
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0.0" proved="true">
              <proof prover="0"><result status="valid" time="0.301636" steps="248"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0.1" proved="true">
              <proof prover="0"><result status="valid" time="3.408814" steps="6191"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0.2" proved="true">
              <proof prover="0"><result status="valid" time="0.287204" steps="230"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma1.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_lemma1 (length p))">
   <goal name="lemma1.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.183661" steps="52"/></proof>
   </goal>
   <goal name="lemma1.0.1" proved="true">
   <proof prover="0"><result status="valid" time="1.767612" steps="2060"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="parent_is_candidate_of_semi_dominator" proved="true">
 <proof prover="0"><result status="valid" time="0.605454" steps="843"/></proof>
 </goal>
 <goal name="semi_dominator_less_equal_than_parent" proved="true">
 <proof prover="0"><result status="valid" time="0.076519" steps="134"/></proof>
 </goal>
 <goal name="semi_dominator_less_than_self" proved="true">
 <proof prover="0"><result status="valid" time="0.244550" steps="962"/></proof>
 </goal>
 <goal name="lemma3" proved="true">
 <proof prover="0" obsolete="true"><undone/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma3.0" proved="true">
  <transf name="assert" proved="true" arg1="(exists p:list vertex. path semi_w p w /\ (forall x:vertex. mem2 x p -&gt; dfsnum x &gt; dfsnum semi_w))">
   <goal name="lemma3.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="1.260924" steps="7086"/></proof>
   </goal>
   <goal name="lemma3.0.1" proved="true">
   <transf name="destruct_rec" proved="true" arg1="h">
    <goal name="lemma3.0.1.0" proved="true">
    <transf name="assert" proved="true" arg1="(exists iw pw. mapsto w (iw, pw) dfsnum_parent)">
     <goal name="lemma3.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="2.696243" steps="16797"/></proof>
     </goal>
     <goal name="lemma3.0.1.0.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="lemma3.0.1.0.1.0" proved="true">
      <transf name="assert" proved="true" arg1="(exists i_semi_w p_semi_w. mapsto semi_w (i_semi_w, p_semi_w) dfsnum_parent)">
       <goal name="lemma3.0.1.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="21.995187" steps="114893"/></proof>
       </goal>
       <goal name="lemma3.0.1.0.1.0.1" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="lemma3.0.1.0.1.0.1.0" proved="true">
        <transf name="instantiate" proved="true" arg1="lemma1" arg2="semi_w, w, i_semi_w, iw, p_semi_w, pw">
         <goal name="lemma3.0.1.0.1.0.1.0.0" proved="true">
         <transf name="assert" proved="true" arg1="(forall p3:list vertex. path semi_w p3 w -&gt; (exists x:vertex. mem2 x (Cons semi_w p3) /\ x -*-&gt; semi_w /\ x -*-&gt; w))">
          <goal name="lemma3.0.1.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.307709" steps="1796"/></proof>
          </goal>
          <goal name="lemma3.0.1.0.1.0.1.0.0.1" proved="true">
          <transf name="instantiate" proved="true" arg1="h" arg2="p">
           <goal name="lemma3.0.1.0.1.0.1.0.0.1.0" proved="true">
           <transf name="assert" proved="true" arg1="((exists x:vertex. mem2 x (Cons semi_w p) /\ x -*-&gt; semi_w /\ x -*-&gt; w))">
            <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
            <proof prover="0"><result status="valid" time="0.084670" steps="57"/></proof>
            </goal>
            <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1" proved="true">
            <transf name="destruct_rec" proved="true" arg1="h">
             <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0" proved="true">
             <transf name="assert" proved="true" arg1="(x = semi_w \/ mem2 x p)">
              <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
              <proof prover="0"><result status="valid" time="0.076354" steps="64"/></proof>
              </goal>
              <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.1" proved="true">
              <transf name="destruct_rec" proved="true" arg1="h">
               <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.1.0" proved="true">
               <proof prover="0"><result status="valid" time="0.245828" steps="1277"/></proof>
               </goal>
               <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.1.1" proved="true">
               <proof prover="0"><result status="valid" time="3.913887" steps="18768"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
