<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.5.2" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="1" name="CVC5" version="1.0.8" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="2" name="Eprover" version="2.0" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="3" name="CVC4" version="1.8" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="4" name="Z3" version="4.12.2" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="5" name="CVC4" version="1.8" alternative="strings" timelimit="100" steplimit="0" memlimit="10000"/>
<file format="whyml">
<path name=".."/><path name="lengauer-tarjan.mlw"/>
<theory name="DfsnumParent" proved="true">
 <goal name="concat_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="concat_lemma.0" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.030047" steps="15"/></proof>
  </goal>
  <goal name="concat_lemma.1" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.040031" steps="171"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentStartMemHelper" proved="true">
 <goal name="InductionNodeMem.base" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.059711" steps="334"/></proof>
 </goal>
 <goal name="InductionNodeMem.induction_step" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.039271" steps="152"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentStartMem" proved="true">
 <goal name="start_node_mem" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="start_node_mem.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_node_mem (length l))">
   <goal name="start_node_mem.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.019648" steps="15"/></proof>
   </goal>
   <goal name="start_node_mem.0.1" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.039639" steps="84"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentSortedHelper" proved="true">
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.102695" steps="663"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="2.384784" steps="13051"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentSorted" proved="true">
 <goal name="unnamed_a" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_a.0" proved="true">
  <transf name="assert" proved="true" arg1="(p1 (length l))">
   <goal name="unnamed_a.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.029792" steps="19"/></proof>
   </goal>
   <goal name="unnamed_a.0.1" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="2.174745" steps="13187"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unnamed_e" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="unnamed_e.0" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.033776" steps="187"/></proof>
  </goal>
  <goal name="unnamed_e.1" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="31.798093" steps="171558"/></proof>
  </goal>
  <goal name="unnamed_e.2" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="2.556890" steps="15099"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentSimplelistHelper" proved="true">
 <goal name="InductionPathIsSimpleList.base" proved="true">
 <proof prover="1" timelimit="120"><result status="valid" time="0.222361" steps="38829"/></proof>
 </goal>
 <goal name="InductionPathIsSimpleList.induction_step" proved="true">
 <proof prover="1" timelimit="120"><result status="valid" time="1.534409" steps="118462"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentSimplelist" proved="true">
 <goal name="unnamed_d" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_d.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_path_is_simplelist (length l))">
   <goal name="unnamed_d.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.031694" steps="20"/></proof>
   </goal>
   <goal name="unnamed_d.0.1" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.073901" steps="209"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentUniqueHelper" proved="true">
 <goal name="InductionUnique.base" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.284955" steps="1203"/></proof>
 <proof prover="1" timelimit="120"><result status="valid" time="0.352554" steps="44162"/></proof>
 </goal>
 <goal name="InductionUnique.induction_step" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.079298" steps="898"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentUnique" proved="true">
 <goal name="path_unique" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="path_unique.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_unique (length l1))">
   <goal name="path_unique.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.030915" steps="23"/></proof>
   </goal>
   <goal name="path_unique.0.1" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.050719" steps="158"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CutoffHelper" proved="true">
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.028399" steps="46"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="intros_n" proved="true" arg1="8">
   <goal name="induction_step.0.0" proved="true">
   <transf name="induction_pr" proved="true" >
    <goal name="induction_step.0.0.0" proved="true">
    <proof prover="1" timelimit="120"><result status="valid" time="0.058598" steps="15724"/></proof>
    </goal>
    <goal name="induction_step.0.0.1" proved="true">
    <proof prover="1" timelimit="120"><result status="valid" time="2.083481" steps="119295"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cutoff" proved="true">
 <goal name="span_cutoff" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="span_cutoff.0" proved="true">
  <transf name="assert" proved="true" arg1="(p1 (length l))">
   <goal name="span_cutoff.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.016489" steps="16"/></proof>
   </goal>
   <goal name="span_cutoff.0.1" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.140337" steps="1173"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentMustOnTree" proved="true">
 <goal name="must_on_tree" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="must_on_tree.0" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.047893" steps="250"/></proof>
  <proof prover="1" timelimit="120"><result status="valid" time="0.115786" steps="22930"/></proof>
  <proof prover="2" timelimit="120"><result status="valid" time="0.069921"/></proof>
  </goal>
  <goal name="must_on_tree.1" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.022607" steps="22"/></proof>
  </goal>
  <goal name="must_on_tree.2" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="must_on_tree.2.0" proved="true">
   <proof prover="1" timelimit="120"><result status="valid" time="2.577070" steps="117276"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="JustSpecialPathHelper" proved="true">
 <goal name="InductionJustSpecialPath.base" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.059643" steps="318"/></proof>
 </goal>
 <goal name="InductionJustSpecialPath.induction_step" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.071078" steps="173"/></proof>
 </goal>
</theory>
<theory name="JustSpecialPath" proved="true">
 <goal name="just_special_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="just_special_path.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_just_special_path (length l))">
   <goal name="just_special_path.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.036039" steps="15"/></proof>
   </goal>
   <goal name="just_special_path.0.1" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.034310" steps="82"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentSubset" proved="true">
 <goal name="subset_lemma" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.130830" steps="695"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentPathSmall2LargeHelper" proved="true">
 <goal name="Inductionc.base" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.052751" steps="184"/></proof>
 </goal>
 <goal name="Inductionc.induction_step" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.061265" steps="158"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentPathSmall2Large" proved="true">
 <goal name="unnamed_c" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_c.0" proved="true">
  <transf name="assert" proved="true" arg1="(pc (length l))">
   <goal name="unnamed_c.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.028073" steps="14"/></proof>
   </goal>
   <goal name="unnamed_c.0.1" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.046445" steps="176"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentPathLarge2SmallHelper" proved="true">
 <goal name="Inductionb.base" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.150975" steps="937"/></proof>
 </goal>
 <goal name="Inductionb.induction_step" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="2.489456" steps="18394"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentPathLarge2Small" proved="true">
 <goal name="unnamed_b" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_b.0" proved="true">
  <transf name="assert" proved="true" arg1="(pb (length l))">
   <goal name="unnamed_b.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.025814" steps="17"/></proof>
   </goal>
   <goal name="unnamed_b.0.1" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.036144" steps="93"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ReachableInDfsNumHelper" proved="true">
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.033034" steps="108"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <proof prover="0" timelimit="120"><result status="valid" time="0.082405" steps="487"/></proof>
 </goal>
</theory>
<theory name="ReachableInDfsNum" proved="true">
 <goal name="dfsnum_property_e" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="dfsnum_property_e.0" proved="true">
  <transf name="assert" proved="true" arg1="(p1 (length p))">
   <goal name="dfsnum_property_e.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.046552" steps="15"/></proof>
   </goal>
   <goal name="dfsnum_property_e.0.1" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.105077" steps="619"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma2" proved="true">
 <goal name="lemma2" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma2.0" proved="true">
  <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent root l w)">
   <goal name="lemma2.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.056455" steps="178"/></proof>
   </goal>
   <goal name="lemma2.0.1" proved="true">
   <transf name="destruct_rec" proved="true" arg1="h">
    <goal name="lemma2.0.1.0" proved="true">
    <transf name="assert" proved="true" arg1="(mem2 idom_w (Cons root l))">
     <goal name="lemma2.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.073910" steps="308"/></proof>
     </goal>
     <goal name="lemma2.0.1.0.1" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.188831" steps="1021"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma1HelperA">
 <goal name="InductionLemma1Helper.base" proved="true">
 <proof prover="1" timelimit="120"><result status="valid" time="1.898852" steps="137063"/></proof>
 <proof prover="4" timelimit="120"><result status="valid" time="0.377031" steps="570516"/></proof>
 </goal>
 <goal name="InductionLemma1Helper.induction_step">
 <transf name="inline_goal" >
  <goal name="induction_step.0">
  <transf name="introduce_premises" >
   <goal name="induction_step.0.0">
   <transf name="assert" arg1="(exists l1 z. l = l1 ++ Cons z Nil)">
    <goal name="induction_step.0.0.0" expl="asserted formula" proved="true">
    <proof prover="2" timelimit="120"><result status="valid" time="0.212667"/></proof>
    </goal>
    <goal name="induction_step.0.0.1">
    <transf name="destruct_rec" arg1="h">
     <goal name="induction_step.0.0.1.0">
     <transf name="assert" arg1="(exists iz pz . mapsto z (iz , pz) dfsnum_parent)">
      <goal name="induction_step.0.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0" timelimit="120"><result status="valid" time="4.298377" steps="33221"/></proof>
      </goal>
      <goal name="induction_step.0.0.1.0.1">
      <transf name="destruct_rec" arg1="h">
       <goal name="induction_step.0.0.1.0.1.0">
       <transf name="instantiate" arg1="H5" arg2="dfsnum_parent">
        <goal name="induction_step.0.0.1.0.1.0.0">
        <transf name="assert" arg1="((forall l2:list vertex, a1:vertex, ia1:int, pa1:vertex, t1:int. length l2 = n -&gt; (forall x:vertex. mem2 x l2 -&gt; mem x dfsnum_parent) -&gt; mapsto a1 (ia1, pa1) dfsnum_parent -&gt; ia1 &lt; t1 -&gt; (exists b:vertex, ib:int, pb:vertex, l11:list vertex, l21:list vertex. Cons a1 l2 = (l11 ++ Cons b l21) /\ mapsto b (ib, pb) dfsnum_parent /\ ib &lt; t1 /\ (forall x:vertex, ix:int, px:vertex. mem2 x l21 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= t1))))">
         <goal name="induction_step.0.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
         <proof prover="1" timelimit="120"><result status="valid" time="0.069931" steps="18183"/></proof>
         </goal>
         <goal name="induction_step.0.0.1.0.1.0.0.1">
         <transf name="instantiate" arg1="h" arg2="l1, a, ia, pa, t">
          <goal name="induction_step.0.0.1.0.1.0.0.1.0">
          <transf name="assert" arg1="(iz &lt; t \/ iz &gt;= t )">
           <goal name="induction_step.0.0.1.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
           <proof prover="0" timelimit="120"><result status="valid" time="0.023249" steps="18"/></proof>
           </goal>
           <goal name="induction_step.0.0.1.0.1.0.0.1.0.1">
           <transf name="destruct_rec" arg1="h">
            <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.0" proved="true">
            <proof prover="0" timelimit="120"><result status="valid" time="0.079319" steps="456"/></proof>
            </goal>
            <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1">
            <proof prover="0" timelimit="120"><result status="timeout" time="130.772332" steps="641018"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1_helper" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma1_helper.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_lemma1_helper (length l))">
   <goal name="lemma1_helper.0.0" expl="asserted formula" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.023344" steps="16"/></proof>
   </goal>
   <goal name="lemma1_helper.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="p_lemma1_helper" arg2="in" arg3="h">
    <goal name="lemma1_helper.0.1.0" proved="true">
    <transf name="apply" proved="true" arg1="h" arg2="with" arg3="ia, pa">
     <goal name="lemma1_helper.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.023289" steps="10"/></proof>
     </goal>
     <goal name="lemma1_helper.0.1.0.1" expl="apply premises" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.024837" steps="10"/></proof>
     </goal>
     <goal name="lemma1_helper.0.1.0.2" expl="apply premises" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.030936" steps="16"/></proof>
     </goal>
     <goal name="lemma1_helper.0.1.0.3" expl="apply premises" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.020845" steps="10"/></proof>
     </goal>
     <goal name="lemma1_helper.0.1.0.4" expl="apply premises" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.025407" steps="10"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma1HelperB">
 <goal name="InductionLemma1.base" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="base.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="base.0.0" proved="true">
   <transf name="exists" proved="true" arg1="v">
    <goal name="base.0.0.0" proved="true">
    <proof prover="0" timelimit="120"><result status="valid" time="0.069210" steps="360"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1.induction_step">
 <transf name="inline_goal" >
  <goal name="induction_step.0">
  <transf name="introduce_premises" >
   <goal name="induction_step.0.0">
   <transf name="instantiate" arg1="lemma1_helper" arg2="dfsnum_parent">
    <goal name="induction_step.0.0.0">
    <transf name="assert" arg1="((forall l:list vertex, a:vertex, ia:int, pa:vertex, t:int. (forall x:vertex. mem2 x l -&gt; mem x dfsnum_parent) -&gt; mapsto a (ia, pa) dfsnum_parent -&gt; ia &lt; t -&gt; (exists b:vertex, ib:int, pb:vertex, l1:list vertex, l2:list vertex. Cons a l = (l1 ++ Cons b l2) /\ mapsto b (ib, pb) dfsnum_parent /\ ib &lt; t /\ (forall x:vertex, ix:int, px:vertex. mem2 x l2 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= t))))">
     <goal name="induction_step.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120" obsolete="true"><result status="failure" time="0.000000"/></proof>
     <proof prover="1" timelimit="120"><result status="valid" time="0.072876" steps="18981"/></proof>
     <proof prover="2" timelimit="120" obsolete="true"><result status="failure" time="0.000000"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1">
     <transf name="instantiate" arg1="h" arg2="p, v, iv, pv, iw">
      <goal name="induction_step.0.0.0.1.0">
      <transf name="assert" arg1="((exists b:vertex, ib:int, pb:vertex, l1:list vertex, l2:list vertex. Cons v p = (l1 ++ Cons b l2) /\ mapsto b (ib, pb) dfsnum_parent /\ ib &lt; iw /\ (forall x:vertex, ix:int, px:vertex. mem2 x l2 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= iw)))">
       <goal name="induction_step.0.0.0.1.0.0" expl="asserted formula">
       <proof prover="0" timelimit="120" obsolete="true"><result status="timeout" time="120.000000" steps="685227"/></proof>
       <transf name="apply" arg1="Hinst">
        <goal name="induction_step.0.0.0.1.0.0.0" expl="apply premises">
        <proof prover="0" timelimit="120" obsolete="true"><result status="timeout" time="120.000000" steps="652078"/></proof>
        </goal>
        <goal name="induction_step.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="0" timelimit="120"><result status="valid" time="0.027147" steps="20"/></proof>
        </goal>
        <goal name="induction_step.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="0" timelimit="120"><result status="valid" time="0.022969" steps="20"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1">
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma1">
 <goal name="lemma1">
 </goal>
</theory>
<theory name="LengauerTarjan">
 <goal name="dfs&#39;vc" expl="VC for dfs">
 <transf name="split_goal_full" >
  <goal name="dfs&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.020555" steps="14"/></proof>
  </goal>
  <goal name="dfs&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.039582" steps="49"/></proof>
  </goal>
  <goal name="dfs&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.045763" steps="38"/></proof>
  </goal>
  <goal name="dfs&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.026662" steps="38"/></proof>
  </goal>
  <goal name="dfs&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.028427" steps="38"/></proof>
  </goal>
  <goal name="dfs&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.051424" steps="179"/></proof>
  </goal>
  <goal name="dfs&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.033039" steps="58"/></proof>
  </goal>
  <goal name="dfs&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.033824" steps="55"/></proof>
  </goal>
  <goal name="dfs&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.026165" steps="38"/></proof>
  </goal>
  <goal name="dfs&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.044776" steps="203"/></proof>
  </goal>
  <goal name="dfs&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.348281" steps="1266"/></proof>
  </goal>
  <goal name="dfs&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.476605" steps="1645"/></proof>
  </goal>
  <goal name="dfs&#39;vc.12" expl="assertion" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.104049" steps="721"/></proof>
  </goal>
  <goal name="dfs&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.827029" steps="4087"/></proof>
  </goal>
  <goal name="dfs&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.127016" steps="658"/></proof>
  </goal>
  <goal name="dfs&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_goal_full" proved="true" >
   <goal name="dfs&#39;vc.15.0" expl="assertion" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.032971" steps="14"/></proof>
   </goal>
   <goal name="dfs&#39;vc.15.1" expl="assertion" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.040835" steps="14"/></proof>
   </goal>
   <goal name="dfs&#39;vc.15.2" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="dfs&#39;vc.15.2.0" expl="assertion" proved="true">
    <transf name="split_goal_full" proved="true" >
     <goal name="dfs&#39;vc.15.2.0.0" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.055206" steps="177"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.2.0.1" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="1.034686" steps="3260"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.2.0.2" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="41.411663" steps="63200"/></proof>
     <proof prover="1" timelimit="120"><result status="valid" time="82.494812" steps="1419054"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.2.0.3" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.129297" steps="437"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.2.0.4" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="timeout" time="120.000000" steps="112745"/></proof>
     <proof prover="1" timelimit="120"><result status="valid" time="8.111554" steps="251857"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.2.0.5" expl="VC for dfs" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="dfs&#39;vc.15.2.0.5.0" expl="VC for dfs" proved="true">
      <transf name="case" proved="true" arg1="(y = z)">
       <goal name="dfs&#39;vc.15.2.0.5.0.0" expl="true case" proved="true">
       <proof prover="0" timelimit="120"><result status="valid" time="0.308848" steps="1450"/></proof>
       </goal>
       <goal name="dfs&#39;vc.15.2.0.5.0.1" expl="false case" proved="true">
       <proof prover="0" timelimit="120"><result status="valid" time="32.615196" steps="132069"/></proof>
       <transf name="case" proved="true" arg1="(x4 = z)">
        <goal name="dfs&#39;vc.15.2.0.5.0.1.0" expl="false case (true case)" proved="true">
        <proof prover="0" timelimit="120"><result status="valid" time="0.291315" steps="1451"/></proof>
        </goal>
        <goal name="dfs&#39;vc.15.2.0.5.0.1.1" expl="false case" proved="true">
        <proof prover="0" timelimit="120"><result status="valid" time="10.016808" steps="32493"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="dfs&#39;vc.15.2.0.6" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="timeout" time="120.000000" steps="96220"/></proof>
     <proof prover="1" timelimit="120"><result status="timeout" time="120.000000" steps="1254761"/></proof>
     <transf name="introduce_premises" proved="true" >
      <goal name="dfs&#39;vc.15.2.0.6.0" expl="VC for dfs" proved="true">
      <transf name="case" proved="true" arg1="(i = sn -1)">
       <goal name="dfs&#39;vc.15.2.0.6.0.0" expl="true case" proved="true">
       <proof prover="0" timelimit="120"><result status="valid" time="0.612432" steps="2216"/></proof>
       </goal>
       <goal name="dfs&#39;vc.15.2.0.6.0.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(exists x1:vertex, p:vertex. mapsto x1 (i, p) dfsnum_parent)">
        <goal name="dfs&#39;vc.15.2.0.6.0.1.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="H7">
         <goal name="dfs&#39;vc.15.2.0.6.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0" timelimit="120"><result status="valid" time="0.070320" steps="197"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="dfs&#39;vc.15.2.0.6.0.1.1" expl="false case" proved="true">
        <proof prover="0" timelimit="120"><result status="valid" time="0.604940" steps="1491"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="dfs&#39;vc.15.2.0.7" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.713038" steps="2303"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.2.0.8" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.955637" steps="2940"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="dfs&#39;vc.15.3" expl="assertion" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.027470" steps="42"/></proof>
   </goal>
   <goal name="dfs&#39;vc.15.4" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="dfs&#39;vc.15.4.0" expl="assertion" proved="true">
    <transf name="split_goal_full" proved="true" >
     <goal name="dfs&#39;vc.15.4.0.0" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.041216" steps="160"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.4.0.1" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.561666" steps="2029"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.4.0.2" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="3.646058" steps="6256"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.4.0.3" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.077708" steps="376"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.4.0.4" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="1.792798" steps="3287"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.4.0.5" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="9.659240" steps="18232"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.4.0.6" expl="VC for dfs" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="dfs&#39;vc.15.4.0.6.0" expl="VC for dfs" proved="true">
      <transf name="case" proved="true" arg1="(i = sn - 1)">
       <goal name="dfs&#39;vc.15.4.0.6.0.0" expl="true case" proved="true">
       <proof prover="0" timelimit="120"><result status="valid" time="0.405377" steps="1245"/></proof>
       </goal>
       <goal name="dfs&#39;vc.15.4.0.6.0.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(exists x1:vertex, p:vertex. mapsto x1 (i, p) dfsnum_parent)">
        <goal name="dfs&#39;vc.15.4.0.6.0.1.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="H7">
         <goal name="dfs&#39;vc.15.4.0.6.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0" timelimit="120"><result status="valid" time="0.075136" steps="194"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="dfs&#39;vc.15.4.0.6.0.1.1" expl="false case" proved="true">
        <proof prover="0" timelimit="120"><result status="valid" time="0.678317" steps="1251"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="dfs&#39;vc.15.4.0.7" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.427672" steps="1484"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.4.0.8" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.738644" steps="1666"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="dfs&#39;vc.15.5" expl="assertion" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.030168" steps="38"/></proof>
   </goal>
   <goal name="dfs&#39;vc.15.6" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="dfs&#39;vc.15.6.0" expl="assertion" proved="true">
    <transf name="split_goal_full" proved="true" >
     <goal name="dfs&#39;vc.15.6.0.0" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.092938" steps="176"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.6.0.1" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="1.457315" steps="3966"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.6.0.2" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="36.154240" steps="41007"/></proof>
     <proof prover="1" timelimit="120"><result status="valid" time="87.767072" steps="1344616"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.6.0.3" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.181442" steps="421"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.6.0.4" expl="VC for dfs" proved="true">
     <proof prover="1" timelimit="120"><result status="valid" time="7.982920" steps="220841"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.6.0.5" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="44.131261" steps="26936"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.6.0.6" expl="VC for dfs" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="dfs&#39;vc.15.6.0.6.0" expl="VC for dfs" proved="true">
      <transf name="case" proved="true" arg1="(i = sn -1)">
       <goal name="dfs&#39;vc.15.6.0.6.0.0" expl="true case" proved="true">
       <proof prover="0" timelimit="120"><result status="valid" time="1.148479" steps="2939"/></proof>
       </goal>
       <goal name="dfs&#39;vc.15.6.0.6.0.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(exists x1:vertex, p:vertex. mapsto x1 (i, p) dfsnum_parent)">
        <goal name="dfs&#39;vc.15.6.0.6.0.1.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="H7">
         <goal name="dfs&#39;vc.15.6.0.6.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0" timelimit="120"><result status="valid" time="0.031249" steps="200"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="dfs&#39;vc.15.6.0.6.0.1.1" expl="false case" proved="true">
        <proof prover="0" timelimit="120"><result status="valid" time="1.004920" steps="1431"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="dfs&#39;vc.15.6.0.7" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="1.490038" steps="2439"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.6.0.8" expl="VC for dfs" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="1.076053" steps="3051"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="dfs&#39;vc.15.7" expl="assertion" proved="true">
   <proof prover="0" timelimit="120"><result status="valid" time="0.023411" steps="40"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.306754" steps="555"/></proof>
  </goal>
  <goal name="dfs&#39;vc.17" expl="variant decrease" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.088797" steps="298"/></proof>
  </goal>
  <goal name="dfs&#39;vc.18" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.047774" steps="38"/></proof>
  </goal>
  <goal name="dfs&#39;vc.19" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.031019" steps="38"/></proof>
  </goal>
  <goal name="dfs&#39;vc.20" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.030604" steps="38"/></proof>
  </goal>
  <goal name="dfs&#39;vc.21" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.302029" steps="710"/></proof>
  </goal>
  <goal name="dfs&#39;vc.22" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.054042" steps="75"/></proof>
  </goal>
  <goal name="dfs&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.055807" steps="71"/></proof>
  </goal>
  <goal name="dfs&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.066216" steps="234"/></proof>
  </goal>
  <goal name="dfs&#39;vc.25" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="74.910158" steps="169934"/></proof>
  </goal>
  <goal name="dfs&#39;vc.26" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="1.327765" steps="3007"/></proof>
  </goal>
  <goal name="dfs&#39;vc.27" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfs&#39;vc.27.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(z = c)">
    <goal name="dfs&#39;vc.27.0.0" expl="true case (precondition)" proved="true">
    <proof prover="0" timelimit="120"><result status="valid" time="1.185418" steps="6187"/></proof>
    </goal>
    <goal name="dfs&#39;vc.27.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mapsto b (ib, pb) dfsnum_parent /\ mapsto c (ic, pc) dfsnum_parent /\ mapsto a (ia, pa) dfsnum_parent)">
     <goal name="dfs&#39;vc.27.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.334096" steps="1841"/></proof>
     </goal>
     <goal name="dfs&#39;vc.27.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="((--+-&gt;) dfsnum_parent a lac c)">
      <goal name="dfs&#39;vc.27.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="2" timelimit="120"><result status="valid" time="11.394451"/></proof>
      </goal>
      <goal name="dfs&#39;vc.27.0.1.1.1" expl="false case (precondition)" proved="true">
      <proof prover="0" timelimit="120"><result status="valid" time="3.684239" steps="12171"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.28" expl="assertion" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.332237" steps="804"/></proof>
  </goal>
  <goal name="dfs&#39;vc.29" expl="variant decrease" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.073222" steps="420"/></proof>
  </goal>
  <goal name="dfs&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.050428" steps="66"/></proof>
  </goal>
  <goal name="dfs&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.040563" steps="66"/></proof>
  </goal>
  <goal name="dfs&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.043315" steps="82"/></proof>
  </goal>
  <goal name="dfs&#39;vc.33" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.213918" steps="417"/></proof>
  </goal>
  <goal name="dfs&#39;vc.34" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="timeout" time="120.000000" steps="292898"/></proof>
  <proof prover="1" timelimit="120"><result status="valid" time="2.498940" steps="220100"/></proof>
  </goal>
  <goal name="dfs&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.044172" steps="89"/></proof>
  </goal>
  <goal name="dfs&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.191668" steps="385"/></proof>
  </goal>
  <goal name="dfs&#39;vc.37" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.551567" steps="1303"/></proof>
  </goal>
  <goal name="dfs&#39;vc.38" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="1.052908" steps="2285"/></proof>
  </goal>
  <goal name="dfs&#39;vc.39" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="1.893310" steps="3872"/></proof>
  </goal>
  <goal name="dfs&#39;vc.40" expl="variant decrease" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.109920" steps="318"/></proof>
  </goal>
  <goal name="dfs&#39;vc.41" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.042708" steps="235"/></proof>
  </goal>
  <goal name="dfs&#39;vc.42" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.059981" steps="68"/></proof>
  </goal>
  <goal name="dfs&#39;vc.43" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.026784" steps="38"/></proof>
  </goal>
  <goal name="dfs&#39;vc.44" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.533705" steps="1220"/></proof>
  </goal>
  <goal name="dfs&#39;vc.45" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.035763" steps="76"/></proof>
  </goal>
  <goal name="dfs&#39;vc.46" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.056413" steps="72"/></proof>
  </goal>
  <goal name="dfs&#39;vc.47" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.067363" steps="255"/></proof>
  </goal>
  <goal name="dfs&#39;vc.48" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfs&#39;vc.48.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(w = z)">
    <goal name="dfs&#39;vc.48.0.0" expl="true case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mapsto v (iv, pv) dfsnum_parent)">
     <goal name="dfs&#39;vc.48.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.813872" steps="2143"/></proof>
     </goal>
     <goal name="dfs&#39;vc.48.0.0.1" expl="true case (precondition)" proved="true">
     <transf name="case" proved="true" arg1="(mem2 v grey)">
      <goal name="dfs&#39;vc.48.0.0.1.0" expl="true case (precondition)" proved="true">
      <proof prover="0" timelimit="120"><result status="valid" time="17.636732" steps="35209"/></proof>
      </goal>
      <goal name="dfs&#39;vc.48.0.0.1.1" expl="false case (true case. precondition)" proved="true">
      <proof prover="0" timelimit="120"><result status="valid" time="0.353315" steps="853"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="dfs&#39;vc.48.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mapsto v (iv, pv) dfsnum_parent /\ mapsto w (iw, pw) dfsnum_parent )">
     <goal name="dfs&#39;vc.48.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.660087" steps="1447"/></proof>
     </goal>
     <goal name="dfs&#39;vc.48.0.1.1" expl="false case (precondition)" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="1.114951" steps="2734"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.49" expl="precondition">
  <proof prover="0" timelimit="120"><result status="timeout" time="120.000000" steps="196415"/></proof>
  </goal>
  <goal name="dfs&#39;vc.50" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfs&#39;vc.50.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(z = c)">
    <goal name="dfs&#39;vc.50.0.0" expl="true case (precondition)" proved="true">
    <proof prover="0" timelimit="120"><result status="valid" time="6.103497" steps="11775"/></proof>
    </goal>
    <goal name="dfs&#39;vc.50.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mapsto b (ib, pb) dfsnum_parent /\ mapsto c (ic, pc) dfsnum_parent /\ mapsto a (ia, pa) dfsnum_parent)">
     <goal name="dfs&#39;vc.50.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0" timelimit="120"><result status="valid" time="0.913094" steps="2115"/></proof>
     </goal>
     <goal name="dfs&#39;vc.50.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="((--+-&gt;) dfsnum_parent a lac c)">
      <goal name="dfs&#39;vc.50.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="2" timelimit="120"><result status="valid" time="19.634992"/></proof>
      </goal>
      <goal name="dfs&#39;vc.50.0.1.1.1" expl="false case (precondition)" proved="true">
      <proof prover="0" timelimit="120"><result status="valid" time="22.333284" steps="34129"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.51" expl="assertion" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.360650" steps="745"/></proof>
  </goal>
  <goal name="dfs&#39;vc.52" expl="variant decrease" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.137456" steps="476"/></proof>
  </goal>
  <goal name="dfs&#39;vc.53" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.047413" steps="66"/></proof>
  </goal>
  <goal name="dfs&#39;vc.54" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.457599" steps="1143"/></proof>
  </goal>
  <goal name="dfs&#39;vc.55" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.087021" steps="84"/></proof>
  </goal>
  <goal name="dfs&#39;vc.56" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.567631" steps="1231"/></proof>
  </goal>
  <goal name="dfs&#39;vc.57" expl="precondition" proved="true">
  <proof prover="1" timelimit="120"><result status="valid" time="7.766294" steps="254967"/></proof>
  </goal>
  <goal name="dfs&#39;vc.58" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.057218" steps="94"/></proof>
  </goal>
  <goal name="dfs&#39;vc.59" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.408953" steps="1288"/></proof>
  </goal>
  <goal name="dfs&#39;vc.60" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.710784" steps="1597"/></proof>
  </goal>
  <goal name="dfs&#39;vc.61" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.860258" steps="2262"/></proof>
  </goal>
  <goal name="dfs&#39;vc.62" expl="precondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="2.479284" steps="5954"/></proof>
  </goal>
  <goal name="dfs&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.041980" steps="14"/></proof>
  </goal>
  <goal name="dfs&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.083563" steps="133"/></proof>
  </goal>
  <goal name="dfs&#39;vc.65" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.052740" steps="256"/></proof>
  </goal>
  <goal name="dfs&#39;vc.66" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.084117" steps="169"/></proof>
  </goal>
  <goal name="dfs&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.465227" steps="934"/></proof>
  </goal>
  <goal name="dfs&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.700202" steps="1187"/></proof>
  </goal>
  <goal name="dfs&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.055605" steps="44"/></proof>
  </goal>
  <goal name="dfs&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.080589" steps="65"/></proof>
  </goal>
  <goal name="dfs&#39;vc.71" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.117603" steps="253"/></proof>
  </goal>
  <goal name="dfs&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.281619" steps="575"/></proof>
  </goal>
  <goal name="dfs&#39;vc.73" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.560319" steps="1135"/></proof>
  </goal>
  <goal name="dfs&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.897954" steps="1582"/></proof>
  </goal>
  <goal name="dfs&#39;vc.75" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.279173" steps="1035"/></proof>
  </goal>
  <goal name="dfs&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.098999" steps="99"/></proof>
  </goal>
  <goal name="dfs&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.185903" steps="484"/></proof>
  </goal>
  <goal name="dfs&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.519447" steps="1278"/></proof>
  </goal>
  <goal name="dfs&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="1.180734" steps="2667"/></proof>
  </goal>
  <goal name="dfs&#39;vc.80" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="1.185468" steps="3512"/></proof>
  </goal>
  <goal name="dfs&#39;vc.81" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.507019" steps="1256"/></proof>
  </goal>
  <goal name="dfs&#39;vc.82" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.047719" steps="99"/></proof>
  </goal>
  <goal name="dfs&#39;vc.83" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.165677" steps="522"/></proof>
  </goal>
  <goal name="dfs&#39;vc.84" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="0.634426" steps="1469"/></proof>
  </goal>
  <goal name="dfs&#39;vc.85" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="2.029641" steps="3713"/></proof>
  </goal>
  <goal name="dfs&#39;vc.86" expl="postcondition" proved="true">
  <proof prover="0" timelimit="120"><result status="valid" time="2.322325" steps="4420"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_parent&#39;vc" expl="VC for dfsnum_parent">
 <proof prover="0" timelimit="120" obsolete="true"><result status="valid" time="1.312544" steps="16445"/></proof>
 </goal>
 <goal name="dfsnum_property_a">
 <proof prover="0" timelimit="120" obsolete="true"><result status="valid" time="2.681053" steps="23271"/></proof>
 </goal>
 <goal name="dfsnum_property_b">
 <proof prover="0" timelimit="120" obsolete="true"><result status="valid" time="6.580838" steps="41924"/></proof>
 <proof prover="1" timelimit="120" obsolete="true"><result status="failure" time="0.000000"/></proof>
 </goal>
 <goal name="dfsnum_property_e">
 <proof prover="0" timelimit="120" obsolete="true"><result status="valid" time="23.996170" steps="145858"/></proof>
 </goal>
 <goal name="dfsnum_property_c">
 </goal>
 <goal name="dfsnum_property_g">
 </goal>
 <goal name="lemma1_helper_b">
 </goal>
 <goal name="InductionK.base">
 </goal>
 <goal name="InductionK.induction_step">
 </goal>
 <goal name="dfsnum_property_k">
 </goal>
 <goal name="parent_is_candidate_of_semi_dominator">
 </goal>
 <goal name="semi_dominator_less_equal_than_parent">
 </goal>
 <goal name="semi_dominator_less_than_self">
 </goal>
 <goal name="lemma3">
 </goal>
 <goal name="InductionLemma1.induction_step">
 </goal>
 <goal name="dfsnum_property_d">
 <proof prover="0" timelimit="120" obsolete="true"><result status="timeout" time="120.000000" steps="849214"/></proof>
 <proof prover="1" timelimit="120" obsolete="true"><result status="timeout" time="120.000000" steps="3199292"/></proof>
 </goal>
 <goal name="lemma1_helper">
 </goal>
 <goal name="InductionLemma1.base">
 </goal>
 <goal name="dfsnum_property_h">
 </goal>
</theory>
<theory name="Graph">
 <goal name="dfs&#39;vc" expl="VC for dfs">
 <transf name="split_goal_full" >
  <goal name="dfs&#39;vc.0" expl="precondition">
  <proof prover="0"><result status="valid" time="0.027507" steps="16"/></proof>
  </goal>
  <goal name="dfs&#39;vc.1" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.043450" steps="56"/></proof>
  </goal>
  <goal name="dfs&#39;vc.2" expl="precondition">
  <proof prover="0"><result status="valid" time="0.030368" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.3" expl="precondition">
  <proof prover="0"><result status="valid" time="0.033407" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.4" expl="precondition">
  <proof prover="0"><result status="valid" time="0.027595" steps="18"/></proof>
  <proof prover="1"><result status="valid" time="0.054147" steps="25280"/></proof>
  </goal>
  <goal name="dfs&#39;vc.5" expl="precondition">
  <proof prover="0"><result status="valid" time="0.043344" steps="188"/></proof>
  <proof prover="1"><result status="valid" time="0.105831" steps="27136"/></proof>
  <proof prover="2"><result status="valid" time="4.808196"/></proof>
  </goal>
  <goal name="dfs&#39;vc.6" expl="precondition">
  <proof prover="0"><result status="valid" time="0.069702" steps="63"/></proof>
  </goal>
  <goal name="dfs&#39;vc.7" expl="precondition">
  <proof prover="0"><result status="valid" time="0.136331" steps="59"/></proof>
  </goal>
  <goal name="dfs&#39;vc.8" expl="precondition">
  <proof prover="0"><result status="valid" time="0.037860" steps="63"/></proof>
  </goal>
  <goal name="dfs&#39;vc.9" expl="precondition">
  <proof prover="0"><result status="valid" time="0.072558" steps="69"/></proof>
  </goal>
  <goal name="dfs&#39;vc.10" expl="precondition">
  <proof prover="0"><result status="valid" time="0.123894" steps="193"/></proof>
  </goal>
  <goal name="dfs&#39;vc.11" expl="precondition">
  <proof prover="0"><result status="valid" time="0.103776" steps="581"/></proof>
  </goal>
  <goal name="dfs&#39;vc.12" expl="precondition">
  <transf name="introduce_premises" >
   <goal name="dfs&#39;vc.12.0" expl="precondition">
   <transf name="case" arg1="(w = z)">
    <goal name="dfs&#39;vc.12.0.0" expl="true case (precondition)">
    <proof prover="0"><result status="valid" time="0.084667" steps="252"/></proof>
    </goal>
    <goal name="dfs&#39;vc.12.0.1" expl="false case (precondition)">
    <transf name="assert" arg1="(mapsto v (iv, pv) dfsnum_parent /\ mapsto w (iw, pw) dfsnum_parent)">
     <goal name="dfs&#39;vc.12.0.1.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.035218" steps="46"/></proof>
     </goal>
     <goal name="dfs&#39;vc.12.0.1.1" expl="false case (precondition)">
     <proof prover="0"><result status="valid" time="0.080524" steps="222"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.13" expl="precondition">
  <proof prover="0"><result status="valid" time="0.497194" steps="1732"/></proof>
  </goal>
  <goal name="dfs&#39;vc.14" expl="precondition">
  <proof prover="0"><result status="valid" time="1.042847" steps="4073"/></proof>
  </goal>
  <goal name="dfs&#39;vc.15" expl="assertion">
  <proof prover="0"><result status="valid" time="0.186504" steps="776"/></proof>
  </goal>
  <goal name="dfs&#39;vc.16" expl="assertion">
  <proof prover="0"><result status="valid" time="0.631546" steps="3176"/></proof>
  </goal>
  <goal name="dfs&#39;vc.17" expl="assertion">
  <transf name="intros_n" arg1="25">
   <goal name="dfs&#39;vc.17.0" expl="assertion">
   <transf name="induction_pr" >
    <goal name="dfs&#39;vc.17.0.0" expl="assertion">
    <proof prover="0"><result status="valid" time="0.059398" steps="179"/></proof>
    </goal>
    <goal name="dfs&#39;vc.17.0.1" expl="assertion">
    <proof prover="0"><result status="valid" time="0.057820" steps="203"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.18" expl="assertion">
  <transf name="introduce_premises" >
   <goal name="dfs&#39;vc.18.0" expl="assertion">
   <transf name="inline_goal" >
    <goal name="dfs&#39;vc.18.0.0" expl="assertion">
    <transf name="split_goal_full" >
     <goal name="dfs&#39;vc.18.0.0.0" expl="VC for dfs">
     <proof prover="0"><result status="valid" time="0.106714" steps="43"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.1" expl="VC for dfs">
     <proof prover="0"><result status="valid" time="0.612669" steps="2807"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.2" expl="VC for dfs">
     <proof prover="0"><result status="valid" time="6.307107" steps="25720"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.3" expl="VC for dfs">
     <proof prover="0"><result status="valid" time="0.166411" steps="408"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.4" expl="VC for dfs">
     <transf name="introduce_premises" >
      <goal name="dfs&#39;vc.18.0.0.4.0" expl="VC for dfs">
      <transf name="case" arg1="(x = z)">
       <goal name="dfs&#39;vc.18.0.0.4.0.0" expl="true case">
       <proof prover="1"><result status="valid" time="4.843980" steps="191892"/></proof>
       <proof prover="2"><result status="valid" time="0.124933"/></proof>
       </goal>
       <goal name="dfs&#39;vc.18.0.0.4.0.1" expl="false case">
       <proof prover="0"><result status="valid" time="4.439804" steps="18119"/></proof>
       <transf name="assert" arg1="(exists l. (--+-&gt;) dfsnum_parent root l x)">
        <goal name="dfs&#39;vc.18.0.0.4.0.1.0" expl="asserted formula">
        <proof prover="0"><result status="valid" time="1.694384" steps="6649"/></proof>
        </goal>
        <goal name="dfs&#39;vc.18.0.0.4.0.1.1" expl="false case">
        <proof prover="0"><result status="valid" time="0.100695" steps="170"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.5" expl="VC for dfs">
     <proof prover="0"><result status="valid" time="3.531149" steps="14157"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.6" expl="VC for dfs">
     <transf name="introduce_premises" >
      <goal name="dfs&#39;vc.18.0.0.6.0" expl="VC for dfs">
      <transf name="assert" arg1="(size dfsnum_parent + 1 = sn)">
       <goal name="dfs&#39;vc.18.0.0.6.0.0" expl="asserted formula">
       <proof prover="0"><result status="valid" time="0.046859" steps="167"/></proof>
       </goal>
       <goal name="dfs&#39;vc.18.0.0.6.0.1" expl="VC for dfs">
       <transf name="assert" arg1="(i &lt; size dfsnum_parent \/ i = size dfsnum_parent )">
        <goal name="dfs&#39;vc.18.0.0.6.0.1.0" expl="asserted formula">
        <proof prover="0"><result status="valid" time="0.033087" steps="42"/></proof>
        </goal>
        <goal name="dfs&#39;vc.18.0.0.6.0.1.1" expl="VC for dfs">
        <transf name="destruct" arg1="h">
         <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0" expl="VC for dfs">
         <proof prover="2"><result status="valid" time="0.313948"/></proof>
         <transf name="assert" arg1="(exists x:vertex, p3:vertex. mapsto x (i, p3) dfsnum_parent)">
          <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.0" expl="asserted formula">
          <proof prover="2"><result status="valid" time="0.232763"/></proof>
          </goal>
          <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.1" expl="VC for dfs">
          <proof prover="0"><result status="valid" time="0.121802" steps="185"/></proof>
          <proof prover="1"><result status="valid" time="0.276791" steps="29640"/></proof>
          <proof prover="2"><result status="valid" time="0.216942"/></proof>
          <proof prover="4"><result status="valid" time="0.132185" steps="179643"/></proof>
          <proof prover="5"><result status="unknown" time="0.345575" steps="34125"/></proof>
          <transf name="destruct_rec" arg1="h">
           <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.1.0" expl="VC for dfs">
           <transf name="exists" arg1="x">
            <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.1.0.0">
            <transf name="exists" arg1="p3">
             <goal name="dfs&#39;vc.18.0.0.6.0.1.1.0.1.0.0.0">
             <proof prover="0"><result status="valid" time="0.119332" steps="53"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="dfs&#39;vc.18.0.0.6.0.1.1.1" expl="VC for dfs">
         <proof prover="0"><result status="valid" time="0.997948" steps="4697"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.7" expl="VC for dfs">
     <proof prover="0" timelimit="120"><result status="valid" time="0.488929" steps="2728"/></proof>
     </goal>
     <goal name="dfs&#39;vc.18.0.0.8" expl="VC for dfs">
     <proof prover="0"><result status="valid" time="0.306969" steps="1179"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.19" expl="assertion">
  <transf name="split_goal_full" >
   <goal name="dfs&#39;vc.19.0" expl="assertion">
   <proof prover="0"><result status="valid" time="0.056544" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.1" expl="assertion">
   <proof prover="0"><result status="valid" time="0.032935" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.2" expl="assertion">
   <proof prover="0"><result status="valid" time="0.027231" steps="16"/></proof>
   <proof prover="1"><result status="valid" time="0.167399" steps="25523"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.3" expl="assertion">
   <proof prover="0"><result status="valid" time="0.030806" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.4" expl="assertion">
   <proof prover="0"><result status="valid" time="0.024908" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.5" expl="assertion">
   <proof prover="0"><result status="valid" time="0.031081" steps="16"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.6" expl="assertion">
   <proof prover="0"><result status="valid" time="0.034020" steps="18"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.7" expl="assertion">
   <proof prover="0"><result status="valid" time="0.218428" steps="533"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.8" expl="assertion">
   <proof prover="0"><result status="valid" time="0.059792" steps="18"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.9" expl="assertion">
   <proof prover="0"><result status="valid" time="0.174746" steps="424"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.10" expl="assertion">
   <proof prover="0"><result status="valid" time="0.034965" steps="18"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.11" expl="assertion">
   <proof prover="0"><result status="valid" time="0.057176" steps="425"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.12" expl="assertion">
   <proof prover="0"><result status="valid" time="0.051599" steps="18"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.13" expl="assertion">
   <proof prover="0"><result status="valid" time="0.051795" steps="66"/></proof>
   </goal>
   <goal name="dfs&#39;vc.19.14" expl="assertion">
   <proof prover="0"><result status="valid" time="0.054996" steps="18"/></proof>
   <proof prover="1"><result status="valid" time="0.110475" steps="25529"/></proof>
   <transf name="introduce_premises" >
    <goal name="dfs&#39;vc.19.14.0" expl="assertion">
    <transf name="inline_goal" >
     <goal name="dfs&#39;vc.19.14.0.0" expl="assertion">
     <transf name="split_goal_full" >
      <goal name="dfs&#39;vc.19.14.0.0.0" expl="VC for dfs">
      <proof prover="0"><result status="valid" time="0.049396" steps="36"/></proof>
      </goal>
      <goal name="dfs&#39;vc.19.14.0.0.1" expl="VC for dfs">
      <proof prover="0"><result status="valid" time="0.023236" steps="36"/></proof>
      </goal>
      <goal name="dfs&#39;vc.19.14.0.0.2" expl="VC for dfs">
      <proof prover="0"><result status="valid" time="0.049690" steps="36"/></proof>
      </goal>
      <goal name="dfs&#39;vc.19.14.0.0.3" expl="VC for dfs">
      <proof prover="0"><result status="valid" time="0.051762" steps="36"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="dfs&#39;vc.19.15" expl="assertion">
   <proof prover="0"><result status="valid" time="0.208532" steps="494"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.20" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.096284" steps="320"/></proof>
  </goal>
  <goal name="dfs&#39;vc.21" expl="precondition">
  <proof prover="0"><result status="valid" time="0.026375" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.22" expl="precondition">
  <proof prover="0"><result status="valid" time="0.145891" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.23" expl="precondition">
  <proof prover="0"><result status="valid" time="0.097147" steps="18"/></proof>
  <proof prover="1"><result status="valid" time="0.060820" steps="25748"/></proof>
  <proof prover="2"><result status="valid" time="0.032862"/></proof>
  <proof prover="3"><result status="valid" time="0.268456" steps="36248"/></proof>
  </goal>
  <goal name="dfs&#39;vc.24" expl="precondition">
  <proof prover="0"><result status="valid" time="0.266718" steps="721"/></proof>
  </goal>
  <goal name="dfs&#39;vc.25" expl="precondition">
  <proof prover="0"><result status="valid" time="0.057153" steps="74"/></proof>
  </goal>
  <goal name="dfs&#39;vc.26" expl="precondition">
  <proof prover="0"><result status="valid" time="0.313288" steps="1097"/></proof>
  </goal>
  <goal name="dfs&#39;vc.27" expl="precondition">
  <proof prover="0"><result status="valid" time="0.064302" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.28" expl="precondition">
  <proof prover="0"><result status="valid" time="0.103880" steps="87"/></proof>
  </goal>
  <goal name="dfs&#39;vc.29" expl="precondition">
  <proof prover="0"><result status="valid" time="0.284403" steps="1259"/></proof>
  </goal>
  <goal name="dfs&#39;vc.30" expl="precondition">
  <proof prover="0"><result status="valid" time="0.396848" steps="1654"/></proof>
  </goal>
  <goal name="dfs&#39;vc.31" expl="precondition">
  <proof prover="0"><result status="valid" time="21.410667" steps="84471"/></proof>
  </goal>
  <goal name="dfs&#39;vc.32" expl="precondition">
  <proof prover="0"><result status="valid" time="0.625871" steps="2574"/></proof>
  </goal>
  <goal name="dfs&#39;vc.33" expl="precondition">
  <transf name="introduce_premises" >
   <goal name="dfs&#39;vc.33.0" expl="precondition">
   <transf name="case" arg1="(c = z)">
    <goal name="dfs&#39;vc.33.0.0" expl="true case (precondition)">
    <proof prover="0"><result status="valid" time="0.990949" steps="4594"/></proof>
    </goal>
    <goal name="dfs&#39;vc.33.0.1" expl="false case (precondition)">
    <transf name="assert" arg1="(mapsto a (ia, pa) dfsnum_parent /\ mapsto c (ic, pc) dfsnum_parent /\ mapsto b (ib, pb) dfsnum_parent)">
     <goal name="dfs&#39;vc.33.0.1.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.640334" steps="2434"/></proof>
     </goal>
     <goal name="dfs&#39;vc.33.0.1.1" expl="false case (precondition)">
     <transf name="assert" arg1="((--+-&gt;) dfsnum_parent a lac c)">
      <goal name="dfs&#39;vc.33.0.1.1.0" expl="asserted formula">
      <proof prover="0"><result status="valid" time="0.244595" steps="448"/></proof>
      </goal>
      <goal name="dfs&#39;vc.33.0.1.1.1" expl="false case (precondition)">
      <proof prover="0"><result status="valid" time="7.148116" steps="21426"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.34" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.280076" steps="784"/></proof>
  </goal>
  <goal name="dfs&#39;vc.35" expl="precondition">
  <proof prover="0"><result status="valid" time="0.028340" steps="72"/></proof>
  </goal>
  <goal name="dfs&#39;vc.36" expl="precondition">
  <proof prover="2"><result status="valid" time="0.063564"/></proof>
  </goal>
  <goal name="dfs&#39;vc.37" expl="precondition">
  <proof prover="0"><result status="valid" time="0.101471" steps="93"/></proof>
  </goal>
  <goal name="dfs&#39;vc.38" expl="precondition">
  <proof prover="0"><result status="valid" time="0.262203" steps="769"/></proof>
  </goal>
  <goal name="dfs&#39;vc.39" expl="precondition">
  <proof prover="0"><result status="valid" time="0.594252" steps="2555"/></proof>
  </goal>
  <goal name="dfs&#39;vc.40" expl="precondition">
  <proof prover="0"><result status="valid" time="0.177190" steps="470"/></proof>
  </goal>
  <goal name="dfs&#39;vc.41" expl="precondition">
  <proof prover="0"><result status="valid" time="0.063066" steps="102"/></proof>
  </goal>
  <goal name="dfs&#39;vc.42" expl="precondition">
  <proof prover="0"><result status="valid" time="0.103837" steps="108"/></proof>
  </goal>
  <goal name="dfs&#39;vc.43" expl="precondition">
  <proof prover="0"><result status="valid" time="0.297184" steps="1097"/></proof>
  <proof prover="1"><result status="valid" time="0.313616" steps="35071"/></proof>
  </goal>
  <goal name="dfs&#39;vc.44" expl="precondition">
  <proof prover="0"><result status="valid" time="0.044123" steps="72"/></proof>
  <proof prover="1"><result status="valid" time="0.074483" steps="27350"/></proof>
  <proof prover="2"><result status="valid" time="0.046131"/></proof>
  </goal>
  <goal name="dfs&#39;vc.45" expl="precondition">
  <proof prover="0"><result status="valid" time="0.266156" steps="1345"/></proof>
  </goal>
  <goal name="dfs&#39;vc.46" expl="precondition">
  <proof prover="0"><result status="valid" time="0.578483" steps="2735"/></proof>
  </goal>
  <goal name="dfs&#39;vc.47" expl="precondition">
  <proof prover="0"><result status="valid" time="1.011103" steps="3647"/></proof>
  </goal>
  <goal name="dfs&#39;vc.48" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.131485" steps="566"/></proof>
  </goal>
  <goal name="dfs&#39;vc.49" expl="precondition">
  <proof prover="0"><result status="valid" time="0.051614" steps="246"/></proof>
  </goal>
  <goal name="dfs&#39;vc.50" expl="precondition">
  <proof prover="0"><result status="valid" time="0.074554" steps="78"/></proof>
  <proof prover="1"><result status="valid" time="0.290275" steps="30570"/></proof>
  <proof prover="3"><result status="valid" time="0.404688" steps="41111"/></proof>
  </goal>
  <goal name="dfs&#39;vc.51" expl="precondition">
  <proof prover="0"><result status="valid" time="0.060714" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.52" expl="precondition">
  <proof prover="0"><result status="valid" time="0.241654" steps="910"/></proof>
  </goal>
  <goal name="dfs&#39;vc.53" expl="precondition">
  <proof prover="0"><result status="valid" time="0.066710" steps="76"/></proof>
  </goal>
  <goal name="dfs&#39;vc.54" expl="precondition">
  <proof prover="0"><result status="valid" time="0.272197" steps="782"/></proof>
  </goal>
  <goal name="dfs&#39;vc.55" expl="precondition">
  <proof prover="0"><result status="valid" time="0.030331" steps="18"/></proof>
  </goal>
  <goal name="dfs&#39;vc.56" expl="precondition">
  <transf name="inline_all" >
   <goal name="dfs&#39;vc.56.0" expl="precondition">
   <proof prover="0"><result status="valid" time="0.203598" steps="213"/></proof>
   <proof prover="1"><result status="valid" time="0.304639" steps="81753"/></proof>
   <proof prover="2"><result status="valid" time="25.068423"/></proof>
   <proof prover="3"><result status="valid" time="0.517727" steps="108618"/></proof>
   <proof prover="4"><result status="valid" time="0.171591" steps="465335"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.57" expl="precondition">
  <proof prover="0"><result status="valid" time="0.635732" steps="1968"/></proof>
  </goal>
  <goal name="dfs&#39;vc.58" expl="precondition">
  <proof prover="0"><result status="valid" time="1.030499" steps="3790"/></proof>
  <proof prover="1"><result status="valid" time="0.202039" steps="28491"/></proof>
  <proof prover="2"><result status="valid" time="1.815683"/></proof>
  </goal>
  <goal name="dfs&#39;vc.59" expl="precondition">
  <transf name="introduce_premises" >
   <goal name="dfs&#39;vc.59.0" expl="precondition">
   <transf name="case" arg1="(w = z)">
    <goal name="dfs&#39;vc.59.0.0" expl="true case (precondition)">
    <proof prover="0"><result status="valid" time="7.383265" steps="24478"/></proof>
    </goal>
    <goal name="dfs&#39;vc.59.0.1" expl="false case (precondition)">
    <transf name="assert" arg1="(mapsto v (iv, pv) dfsnum_parent /\ mapsto w (iw, pw) dfsnum_parent )">
     <goal name="dfs&#39;vc.59.0.1.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.391569" steps="1589"/></proof>
     </goal>
     <goal name="dfs&#39;vc.59.0.1.1" expl="false case (precondition)">
     <proof prover="0"><result status="valid" time="1.603223" steps="5193"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.60" expl="precondition">
  <transf name="introduce_premises" >
   <goal name="dfs&#39;vc.60.0" expl="precondition">
   <transf name="case" arg1="(b = z)">
    <goal name="dfs&#39;vc.60.0.0" expl="true case (precondition)">
    <proof prover="0"><result status="valid" time="0.296663" steps="772"/></proof>
    </goal>
    <goal name="dfs&#39;vc.60.0.1" expl="false case (precondition)">
    <transf name="assert" arg1="(mapsto a (ia, pa) dfsnum_parent /\ mapsto b (ib, pb) dfsnum_parent )">
     <goal name="dfs&#39;vc.60.0.1.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.669983" steps="2727"/></proof>
     </goal>
     <goal name="dfs&#39;vc.60.0.1.1" expl="false case (precondition)">
     <proof prover="0"><result status="valid" time="7.961960" steps="21364"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.61" expl="precondition">
  <transf name="introduce_premises" >
   <goal name="dfs&#39;vc.61.0" expl="precondition">
   <transf name="case" arg1="(c = z)">
    <goal name="dfs&#39;vc.61.0.0" expl="true case (precondition)">
    <proof prover="0"><result status="valid" time="0.741125" steps="2506"/></proof>
    </goal>
    <goal name="dfs&#39;vc.61.0.1" expl="false case (precondition)">
    <transf name="assert" arg1="(mapsto b (ib, pb) dfsnum_parent /\ mapsto a (ia, pa) dfsnum_parent /\ mapsto c (ic, pc) dfsnum_parent)">
     <goal name="dfs&#39;vc.61.0.1.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.940159" steps="3015"/></proof>
     </goal>
     <goal name="dfs&#39;vc.61.0.1.1" expl="false case (precondition)">
     <transf name="assert" arg1="((--+-&gt;) dfsnum_parent a lac c)">
      <goal name="dfs&#39;vc.61.0.1.1.0" expl="asserted formula">
      <proof prover="0"><result status="valid" time="0.235027" steps="494"/></proof>
      </goal>
      <goal name="dfs&#39;vc.61.0.1.1.1" expl="false case (precondition)">
      <proof prover="0"><result status="valid" time="62.772561" steps="213570"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.62" expl="variant decrease">
  <proof prover="0"><result status="valid" time="0.271288" steps="926"/></proof>
  </goal>
  <goal name="dfs&#39;vc.63" expl="precondition">
  <proof prover="0"><result status="valid" time="0.033590" steps="74"/></proof>
  </goal>
  <goal name="dfs&#39;vc.64" expl="precondition">
  <proof prover="0"><result status="valid" time="0.136372" steps="357"/></proof>
  </goal>
  <goal name="dfs&#39;vc.65" expl="precondition">
  <proof prover="0"><result status="valid" time="0.032268" steps="97"/></proof>
  </goal>
  <goal name="dfs&#39;vc.66" expl="precondition">
  <proof prover="0"><result status="valid" time="0.446654" steps="1614"/></proof>
  </goal>
  <goal name="dfs&#39;vc.67" expl="precondition">
  <proof prover="0"><result status="valid" time="0.586458" steps="1844"/></proof>
  </goal>
  <goal name="dfs&#39;vc.68" expl="precondition">
  <proof prover="0"><result status="valid" time="0.178011" steps="416"/></proof>
  </goal>
  <goal name="dfs&#39;vc.69" expl="precondition">
  <proof prover="0"><result status="valid" time="0.042401" steps="106"/></proof>
  </goal>
  <goal name="dfs&#39;vc.70" expl="precondition">
  <proof prover="0"><result status="valid" time="0.111046" steps="112"/></proof>
  </goal>
  <goal name="dfs&#39;vc.71" expl="precondition">
  <proof prover="0"><result status="valid" time="0.425975" steps="1415"/></proof>
  <proof prover="1"><result status="valid" time="0.320659" steps="34576"/></proof>
  <proof prover="4"><result status="valid" time="0.120342" steps="185002"/></proof>
  </goal>
  <goal name="dfs&#39;vc.72" expl="precondition">
  <proof prover="0"><result status="valid" time="1.687689" steps="5977"/></proof>
  </goal>
  <goal name="dfs&#39;vc.73" expl="precondition">
  <proof prover="0"><result status="valid" time="0.406412" steps="1853"/></proof>
  </goal>
  <goal name="dfs&#39;vc.74" expl="precondition">
  <proof prover="0"><result status="valid" time="2.585614" steps="9433"/></proof>
  </goal>
  <goal name="dfs&#39;vc.75" expl="precondition">
  <proof prover="0"><result status="valid" time="4.059553" steps="12650"/></proof>
  </goal>
  <goal name="dfs&#39;vc.76" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.030614" steps="16"/></proof>
  <proof prover="1"><result status="valid" time="0.063301" steps="25185"/></proof>
  <proof prover="2"><result status="valid" time="0.031486"/></proof>
  <proof prover="3"><result status="valid" time="0.261846" steps="35434"/></proof>
  <proof prover="4"><result status="valid" time="0.039145" steps="11667"/></proof>
  </goal>
  <goal name="dfs&#39;vc.77" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.068768" steps="137"/></proof>
  </goal>
  <goal name="dfs&#39;vc.78" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.141446" steps="53"/></proof>
  </goal>
  <goal name="dfs&#39;vc.79" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.103920" steps="174"/></proof>
  </goal>
  <goal name="dfs&#39;vc.80" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.079699" steps="149"/></proof>
  <proof prover="1"><result status="valid" time="0.251292" steps="29394"/></proof>
  <proof prover="2"><result status="valid" time="0.179647"/></proof>
  <proof prover="3"><result status="valid" time="0.339300" steps="39594"/></proof>
  <proof prover="4"><result status="valid" time="0.099073" steps="156324"/></proof>
  </goal>
  <goal name="dfs&#39;vc.81" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.152794" steps="438"/></proof>
  </goal>
  <goal name="dfs&#39;vc.82" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.161153" steps="189"/></proof>
  </goal>
  <goal name="dfs&#39;vc.83" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.353753" steps="1046"/></proof>
  </goal>
  <goal name="dfs&#39;vc.84" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.716394" steps="2046"/></proof>
  </goal>
  <goal name="dfs&#39;vc.85" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.030147" steps="40"/></proof>
  <proof prover="1"><result status="valid" time="0.201387" steps="28515"/></proof>
  </goal>
  <goal name="dfs&#39;vc.86" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.063923" steps="241"/></proof>
  </goal>
  <goal name="dfs&#39;vc.87" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.155614" steps="77"/></proof>
  </goal>
  <goal name="dfs&#39;vc.88" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.083398" steps="291"/></proof>
  </goal>
  <goal name="dfs&#39;vc.89" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.256122" steps="530"/></proof>
  </goal>
  <goal name="dfs&#39;vc.90" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.207088" steps="571"/></proof>
  </goal>
  <goal name="dfs&#39;vc.91" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.178949" steps="649"/></proof>
  </goal>
  <goal name="dfs&#39;vc.92" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.845658" steps="2927"/></proof>
  </goal>
  <goal name="dfs&#39;vc.93" expl="postcondition">
  <proof prover="0"><result status="valid" time="1.398483" steps="4327"/></proof>
  </goal>
  <goal name="dfs&#39;vc.94" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.580181" steps="2515"/></proof>
  </goal>
  <goal name="dfs&#39;vc.95" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.310956" steps="665"/></proof>
  </goal>
  <goal name="dfs&#39;vc.96" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.131159" steps="116"/></proof>
  </goal>
  <goal name="dfs&#39;vc.97" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.238403" steps="523"/></proof>
  </goal>
  <goal name="dfs&#39;vc.98" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.259759" steps="958"/></proof>
  </goal>
  <goal name="dfs&#39;vc.99" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.083466" steps="40"/></proof>
  </goal>
  <goal name="dfs&#39;vc.100" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.317318" steps="1091"/></proof>
  <proof prover="2"><result status="valid" time="25.213139"/></proof>
  </goal>
  <goal name="dfs&#39;vc.101" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.843189" steps="2877"/></proof>
  </goal>
  <goal name="dfs&#39;vc.102" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.999374" steps="2422"/></proof>
  </goal>
  <goal name="dfs&#39;vc.103" expl="postcondition">
  <proof prover="0"><result status="valid" time="1.345727" steps="4348"/></proof>
  </goal>
  <goal name="dfs&#39;vc.104" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.317218" steps="735"/></proof>
  </goal>
  <goal name="dfs&#39;vc.105" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.110529" steps="120"/></proof>
  </goal>
  <goal name="dfs&#39;vc.106" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.226671" steps="569"/></proof>
  </goal>
  <goal name="dfs&#39;vc.107" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.332937" steps="1114"/></proof>
  </goal>
  <goal name="dfs&#39;vc.108" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.418712" steps="1134"/></proof>
  </goal>
  <goal name="dfs&#39;vc.109" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.414450" steps="1240"/></proof>
  </goal>
  <goal name="dfs&#39;vc.110" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.886900" steps="3066"/></proof>
  </goal>
  <goal name="dfs&#39;vc.111" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.839435" steps="2918"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_parent&#39;vc" expl="VC for dfsnum_parent">
 <transf name="split_goal_full" >
  <goal name="dfsnum_parent&#39;vc.0" expl="precondition">
  <proof prover="0"><result status="valid" time="0.050894" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.1" expl="precondition">
  <proof prover="0"><result status="valid" time="0.137870" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.2" expl="precondition">
  <transf name="inline_goal" >
   <goal name="dfsnum_parent&#39;vc.2.0" expl="precondition">
   <transf name="split_goal_full" >
    <goal name="dfsnum_parent&#39;vc.2.0.0" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.059974" steps="137"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.1" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.091463" steps="238"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.2" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.073331" steps="235"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.3" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.080904" steps="198"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.4" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.084584" steps="189"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.5" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.080374" steps="284"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.6" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.579266" steps="4866"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.7" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.076530" steps="238"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.8" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.086494" steps="271"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.9" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.056557" steps="28"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.10" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.091107" steps="34"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.11" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.085048" steps="34"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.12" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.056197" steps="30"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.13" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.043499" steps="34"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.14" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.052670" steps="42"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.15" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.053726" steps="34"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.16" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.078667" steps="32"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.17" expl="VC for dfsnum_parent">
    <proof prover="0" timelimit="120"><result status="valid" time="0.049935" steps="32"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfsnum_parent&#39;vc.3" expl="precondition">
  <proof prover="0"><result status="valid" time="0.195920" steps="235"/></proof>
  <proof prover="1"><result status="valid" time="0.380176" steps="50924"/></proof>
  <proof prover="4"><result status="valid" time="0.113848" steps="305730"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.4" expl="precondition">
  <proof prover="0"><result status="valid" time="0.072869" steps="30"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.5" expl="precondition">
  <proof prover="0"><result status="valid" time="0.057307" steps="32"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.6" expl="precondition">
  <proof prover="0"><result status="valid" time="0.047008" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.7" expl="precondition">
  <proof prover="0"><result status="valid" time="0.059732" steps="40"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.8" expl="precondition">
  <proof prover="0"><result status="valid" time="0.092685" steps="213"/></proof>
  <proof prover="1"><result status="valid" time="0.228878" steps="42568"/></proof>
  <proof prover="4"><result status="valid" time="0.117486" steps="278344"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.9" expl="precondition">
  <proof prover="0"><result status="valid" time="0.043569" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.10" expl="precondition">
  <proof prover="0"><result status="valid" time="0.143044" steps="421"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.11" expl="precondition">
  <proof prover="0"><result status="valid" time="0.149798" steps="495"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.12" expl="precondition">
  <proof prover="0"><result status="valid" time="0.342047" steps="1182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_h">
 <proof prover="0"><result status="valid" time="21.633466" steps="73216"/></proof>
 </goal>
 <goal name="dfsnum_property_j">
 <proof prover="0"><result status="valid" time="23.220247" steps="65926"/></proof>
 </goal>
 <goal name="dfsnum_property_a">
 <proof prover="0"><result status="valid" time="29.942839" steps="102596"/></proof>
 </goal>
 <goal name="dfsnum_property_e">
 <proof prover="0"><result status="valid" time="48.939301" steps="195464"/></proof>
 </goal>
 <goal name="dfsnum_property_d">
 <transf name="induction_pr" >
  <goal name="dfsnum_property_d.0">
  <proof prover="0"><result status="valid" time="0.221401" steps="206"/></proof>
  <proof prover="1"><result status="valid" time="0.251331" steps="42411"/></proof>
  </goal>
  <goal name="dfsnum_property_d.1">
  <proof prover="0"><result status="valid" time="0.138992" steps="123"/></proof>
  <proof prover="1"><result status="valid" time="0.371778" steps="42763"/></proof>
  <proof prover="3"><result status="valid" time="0.522067" steps="57586"/></proof>
  <transf name="introduce_premises" >
   <goal name="dfsnum_property_d.1.0">
   <proof prover="0"><result status="valid" time="0.163815" steps="139"/></proof>
   <proof prover="1"><result status="valid" time="0.350560" steps="46947"/></proof>
   <proof prover="3"><result status="valid" time="0.445897" steps="61884"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_c">
 <proof prover="0"><result status="valid" time="0.284833" steps="850"/></proof>
 </goal>
 <goal name="dfsnum_property_g">
 <proof prover="0"><result status="valid" time="0.248636" steps="411"/></proof>
 </goal>
 <goal name="lemma2_helper_a">
 <proof prover="0"><result status="valid" time="0.503775" steps="1041"/></proof>
 </goal>
 <goal name="lemma2_helper_b">
 <proof prover="0"><result status="valid" time="6.537653" steps="17443"/></proof>
 </goal>
 <goal name="lemma2">
 <proof prover="0"><result status="valid" time="0.199834" steps="647"/></proof>
 </goal>
 <goal name="InductionLemma1Helper.base">
 <transf name="inline_goal" >
  <goal name="base.0">
  <transf name="introduce_premises" >
   <goal name="base.0.0">
   <transf name="exists" arg1="(Nil : list vertex)">
    <goal name="base.0.0.0">
    <transf name="exists" arg1="l">
     <goal name="base.0.0.0.0">
     <transf name="exists" arg1="a">
      <goal name="base.0.0.0.0.0">
      <transf name="exists" arg1="ia">
       <goal name="base.0.0.0.0.0.0">
       <transf name="exists" arg1="pa">
        <goal name="base.0.0.0.0.0.0.0">
        <transf name="split_goal_full" >
         <goal name="base.0.0.0.0.0.0.0.0">
         <proof prover="0"><result status="valid" time="0.059994" steps="41"/></proof>
         </goal>
         <goal name="base.0.0.0.0.0.0.0.1">
         <proof prover="0"><result status="valid" time="0.051059" steps="26"/></proof>
         </goal>
         <goal name="base.0.0.0.0.0.0.0.2">
         <proof prover="0"><result status="valid" time="0.055423" steps="26"/></proof>
         </goal>
         <goal name="base.0.0.0.0.0.0.0.3">
         <proof prover="0"><result status="valid" time="0.090979" steps="160"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1Helper.induction_step">
 <transf name="introduce_premises" >
  <goal name="induction_step.0">
  <transf name="inline_goal" >
   <goal name="induction_step.0.0">
   <transf name="introduce_premises" >
    <goal name="induction_step.0.0.0">
    <transf name="assert" arg1="(exists l5 d . l = l5 ++ Cons d Nil)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula">
     <proof prover="1"><result status="valid" time="0.787325" steps="69126"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1">
     <transf name="destruct_rec" arg1="h">
      <goal name="induction_step.0.0.0.1.0">
      <transf name="assert" arg1="(exists id pd. mapsto d (id , pd) dfsnum_parent)">
       <goal name="induction_step.0.0.0.1.0.0" expl="asserted formula">
       <proof prover="0"><result status="valid" time="26.582014" steps="89581"/></proof>
       <proof prover="1"><result status="valid" time="1.633184" steps="99392"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1">
       <transf name="destruct_rec" arg1="h">
        <goal name="induction_step.0.0.0.1.0.1.0">
        <transf name="assert" arg1="(id &lt; t \/ id &gt;= t)">
         <goal name="induction_step.0.0.0.1.0.1.0.0" expl="asserted formula">
         <proof prover="0"><result status="valid" time="0.058681" steps="36"/></proof>
         </goal>
         <goal name="induction_step.0.0.0.1.0.1.0.1">
         <transf name="destruct" arg1="h">
          <goal name="induction_step.0.0.0.1.0.1.0.1.0">
          <proof prover="0"><result status="valid" time="0.511588" steps="900"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.1.0.1.1">
          <transf name="unfold" arg1="p_lemma1_helper" arg2="in" arg3="H4">
           <goal name="induction_step.0.0.0.1.0.1.0.1.1.0">
           <transf name="instantiate" arg1="H4" arg2="l5, a, ia, pa, t">
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0">
            <transf name="assert" arg1="((exists l1:list vertex, l2:list vertex, b:vertex, ib:int, pb1:vertex. Cons a l5 = (l1 ++ Cons b l2) /\ mapsto b (ib, pb1) dfsnum_parent /\ ib &lt; t /\ (forall x:vertex, ix:int, px:vertex. mem2 x l2 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= t)))">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.0" expl="asserted formula">
             <proof prover="0"><result status="valid" time="0.549568" steps="1348"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1">
             <transf name="destruct_rec" arg1="h">
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0">
              <transf name="subst_all" >
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0">
               <transf name="exists" arg1="l1">
                <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0">
                <transf name="exists" arg1="(l2 ++ Cons d Nil)">
                 <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0.0">
                 <transf name="exists" arg1="b">
                  <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0.0.0">
                  <transf name="exists" arg1="ib">
                   <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0.0.0.0">
                   <proof prover="0"><result status="valid" time="5.770778" steps="19465"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1_helper">
 <transf name="introduce_premises" >
  <goal name="lemma1_helper.0">
  <transf name="assert" arg1="(p_lemma1_helper (length l))">
   <goal name="lemma1_helper.0.0" expl="asserted formula">
   <proof prover="0"><result status="valid" time="0.071338" steps="43"/></proof>
   </goal>
   <goal name="lemma1_helper.0.1">
   <transf name="unfold" arg1="p_lemma1_helper" arg2="in" arg3="h">
    <goal name="lemma1_helper.0.1.0">
    <transf name="instantiate" arg1="h" arg2="l, a, ia, pa">
     <goal name="lemma1_helper.0.1.0.0">
     <transf name="apply" arg1="Hinst">
      <goal name="lemma1_helper.0.1.0.0.0" expl="apply premises">
      <proof prover="0"><result status="valid" time="0.057008" steps="26"/></proof>
      </goal>
      <goal name="lemma1_helper.0.1.0.0.1" expl="apply premises">
      <proof prover="0"><result status="valid" time="0.080267" steps="42"/></proof>
      </goal>
      <goal name="lemma1_helper.0.1.0.0.2" expl="apply premises">
      <proof prover="0"><result status="valid" time="0.070656" steps="26"/></proof>
      </goal>
      <goal name="lemma1_helper.0.1.0.0.3" expl="apply premises">
      <proof prover="0"><result status="valid" time="0.064685" steps="26"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1_helper_b">
 <transf name="introduce_premises" >
  <goal name="lemma1_helper_b.0">
  <transf name="assert" arg1="(v = root \/ exists l2. path root l2 v)">
   <goal name="lemma1_helper_b.0.0" expl="asserted formula">
   <proof prover="0"><result status="valid" time="0.526992" steps="794"/></proof>
   </goal>
   <goal name="lemma1_helper_b.0.1">
   <transf name="assert" arg1="(exists l3. path v l3 x)">
    <goal name="lemma1_helper_b.0.1.0" expl="asserted formula">
    <proof prover="0"><result status="valid" time="0.334138" steps="348"/></proof>
    </goal>
    <goal name="lemma1_helper_b.0.1.1">
    <proof prover="1"><result status="valid" time="47.786523" steps="1074880"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionK.base">
 <proof prover="0"><result status="valid" time="0.394867" steps="590"/></proof>
 </goal>
 <goal name="InductionK.induction_step">
 <transf name="introduce_premises" >
  <goal name="induction_step.0">
  <transf name="inline_goal" >
   <goal name="induction_step.0.0">
   <transf name="introduce_premises" >
    <goal name="induction_step.0.0.0">
    <transf name="assert" arg1="(exists u l1 . path v l1 u /\ edge u w /\ l1 ++ Cons u Nil = l)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.301801" steps="335"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1">
     <transf name="destruct_rec" arg1="h">
      <goal name="induction_step.0.0.0.1.0">
      <transf name="case" arg1="(v = u)">
       <goal name="induction_step.0.0.0.1.0.0" expl="true case">
       <proof prover="0"><result status="valid" time="0.232896" steps="205"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1" expl="false case">
       <transf name="unfold" arg1="p_dfsnum_property_k" arg2="in" arg3="H6">
        <goal name="induction_step.0.0.0.1.0.1.0" expl="false case">
        <transf name="assert" arg1="(exists iu pu. mapsto u (iu, pu) dfsnum_parent)">
         <goal name="induction_step.0.0.0.1.0.1.0.0" expl="asserted formula">
         <proof prover="1"><result status="valid" time="7.086635" steps="251698"/></proof>
         </goal>
         <goal name="induction_step.0.0.0.1.0.1.0.1" expl="false case">
         <transf name="destruct_rec" arg1="h">
          <goal name="induction_step.0.0.0.1.0.1.0.1.0" expl="false case">
          <transf name="assert" arg1="(exists p. (--+-&gt;) dfsnum_parent v p u)">
           <goal name="induction_step.0.0.0.1.0.1.0.1.0.0" expl="asserted formula">
           <proof prover="0"><result status="valid" time="7.178775" steps="16521"/></proof>
           </goal>
           <goal name="induction_step.0.0.0.1.0.1.0.1.0.1" expl="false case">
           <transf name="assert" arg1="(iw = iu \/ iw &gt; iu \/ iw &lt; iu)">
            <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.0" expl="asserted formula">
            <proof prover="0"><result status="valid" time="0.060090" steps="50"/></proof>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1" expl="false case">
            <transf name="destruct_rec" arg1="h">
             <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.0" expl="false case">
             <proof prover="0"><result status="valid" time="5.356777" steps="13657"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.1" expl="false case">
             <transf name="assert" arg1="(exists p. (--+-&gt;) dfsnum_parent u p w)">
              <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.1.0" expl="asserted formula">
              <proof prover="0"><result status="valid" time="0.288176" steps="220"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.1.1" expl="false case">
              <proof prover="1"><result status="valid" time="9.129439" steps="295847"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.2" expl="false case">
             <proof prover="0"><result status="valid" time="0.974794" steps="1557"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_k">
 <transf name="introduce_premises" >
  <goal name="dfsnum_property_k.0">
  <transf name="assert" arg1="(p_dfsnum_property_k (length l))">
   <goal name="dfsnum_property_k.0.0" expl="asserted formula">
   <proof prover="0"><result status="valid" time="0.081781" steps="50"/></proof>
   </goal>
   <goal name="dfsnum_property_k.0.1">
   <proof prover="0"><result status="valid" time="0.566190" steps="1104"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1.base">
 <transf name="inline_goal" >
  <goal name="base.0">
  <transf name="introduce_premises" >
   <goal name="base.0.0">
   <transf name="assert" arg1="(edge  v w)">
    <goal name="base.0.0.0" expl="asserted formula">
    <proof prover="0"><result status="valid" time="0.197641" steps="164"/></proof>
    </goal>
    <goal name="base.0.0.1">
    <transf name="exists" arg1="v">
     <goal name="base.0.0.1.0">
     <transf name="split_goal_full" >
      <goal name="base.0.0.1.0.0">
      <proof prover="0"><result status="valid" time="0.175808" steps="52"/></proof>
      </goal>
      <goal name="base.0.0.1.0.1">
      <proof prover="0"><result status="valid" time="0.073091" steps="49"/></proof>
      </goal>
      <goal name="base.0.0.1.0.2">
      <proof prover="0"><result status="valid" time="0.245351" steps="166"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1.induction_step">
 <transf name="introduce_premises" >
  <goal name="induction_step.0">
  <transf name="inline_goal" >
   <goal name="induction_step.0.0">
   <transf name="introduce_premises" >
    <goal name="induction_step.0.0.0">
    <transf name="assert" arg1="(forall x. mem2 x p -&gt; mem x dfsnum_parent)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.374801" steps="450"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1">
     <transf name="instantiate" arg1="lemma1_helper" arg2="p, v, iv, pv, iw">
      <goal name="induction_step.0.0.0.1.0">
      <transf name="assert" arg1="((exists l1:list vertex, l2:list vertex, b:vertex, ib:int, pb1:vertex. Cons v p = (l1 ++ Cons b l2) /\ mapsto b (ib, pb1) dfsnum_parent /\ ib &lt; iw /\ (forall x:vertex, ix:int, px:vertex. mem2 x l2 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= iw)))">
       <goal name="induction_step.0.0.0.1.0.0" expl="asserted formula">
       <proof prover="0"><result status="valid" time="0.407944" steps="496"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1">
       <transf name="destruct_rec" arg1="h">
        <goal name="induction_step.0.0.0.1.0.1.0">
        <transf name="assert" arg1="(path b l2 w)">
         <goal name="induction_step.0.0.0.1.0.1.0.0" expl="asserted formula">
         <transf name="destruct_term" arg1="l1">
          <goal name="induction_step.0.0.0.1.0.1.0.0.0" expl="asserted formula">
          <proof prover="0"><result status="valid" time="0.544479" steps="745"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.1.0.0.1" expl="asserted formula">
          <proof prover="0"><result status="valid" time="0.194543" steps="78"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="induction_step.0.0.0.1.0.1.0.1">
         <transf name="assert" arg1="(exists l. (--+-&gt;) dfsnum_parent b l w)">
          <goal name="induction_step.0.0.0.1.0.1.0.1.0" expl="asserted formula">
          <proof prover="0"><result status="valid" time="1.074294" steps="2184"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.1.0.1.1">
          <transf name="assert" arg1="((iv = ib) \/ (iv &lt; ib) \/ (iv &gt; ib))">
           <goal name="induction_step.0.0.0.1.0.1.0.1.1.0" expl="asserted formula">
           <proof prover="0"><result status="valid" time="0.067167" steps="52"/></proof>
           </goal>
           <goal name="induction_step.0.0.0.1.0.1.0.1.1.1">
           <transf name="destruct_rec" arg1="h">
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0">
            <transf name="assert" arg1="(b = v)">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.0" expl="asserted formula">
             <proof prover="0"><result status="valid" time="14.303736" steps="35900"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.1">
             <transf name="subst" arg1="b">
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.1.0">
              <transf name="exists" arg1="v">
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.1.0.0">
               <proof prover="0"><result status="valid" time="0.188435" steps="453"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1">
            <transf name="unfold" arg1="p_lemma1" arg2="in" arg3="H5">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0">
             <transf name="instantiate" arg1="H5" arg2="v, b, iv, ib, pv, pb1">
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0">
              <transf name="destruct_term" arg1="l1">
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0">
               <transf name="assert" arg1="(path v x b)">
                <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.0" expl="asserted formula">
                <proof prover="0"><result status="valid" time="0.671312" steps="905"/></proof>
                </goal>
                <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1">
                <transf name="assert" arg1="(exists x2:vertex. mem2 x2 (Cons v x) /\ x2 -*-&gt; v /\ x2 -*-&gt; b)">
                 <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.0" expl="asserted formula">
                 <proof prover="0"><result status="valid" time="0.816560" steps="1133"/></proof>
                 </goal>
                 <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1">
                 <transf name="destruct_rec" arg1="h">
                  <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0">
                  <transf name="exists" arg1="x2">
                   <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0">
                   <transf name="split_goal_full" >
                    <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.0">
                    <proof prover="0"><result status="valid" time="0.257374" steps="339"/></proof>
                    </goal>
                    <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.1">
                    <proof prover="0"><result status="valid" time="0.061055" steps="64"/></proof>
                    </goal>
                    <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2">
                    <transf name="assert" arg1="(exists l. (--+-&gt;) dfsnum_parent b l w)">
                     <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.0" expl="asserted formula">
                     <proof prover="0"><result status="valid" time="0.212159" steps="81"/></proof>
                     </goal>
                     <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1">
                     <transf name="unfold" arg1="(-*-&gt;)" arg2="in" arg3="h1">
                      <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0">
                      <transf name="destruct_rec" arg1="h1">
                       <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.0">
                       <proof prover="0"><result status="valid" time="0.300439" steps="319"/></proof>
                       </goal>
                       <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.1">
                       <transf name="destruct_rec" arg1="h">
                        <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.1.0">
                        <transf name="instantiate" arg1="concat_lemma" arg2="dfsnum_parent, x2, l1, b, l, w">
                         <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.1.0.0">
                         <proof prover="0"><result status="valid" time="0.320597" steps="345"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.1">
               <proof prover="0"><result status="valid" time="0.086541" steps="87"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2">
            <transf name="exists" arg1="b">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0">
             <proof prover="0"><result status="valid" time="2.511009" steps="3697"/></proof>
             <transf name="split_goal_full" >
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0.0">
              <proof prover="0"><result status="valid" time="0.301636" steps="248"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0.1">
              <proof prover="0"><result status="valid" time="3.408814" steps="7626"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0.2">
              <proof prover="0"><result status="valid" time="0.287204" steps="230"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1">
 <transf name="introduce_premises" >
  <goal name="lemma1.0">
  <transf name="assert" arg1="(p_lemma1 (length p))">
   <goal name="lemma1.0.0" expl="asserted formula">
   <proof prover="0"><result status="valid" time="0.183661" steps="52"/></proof>
   </goal>
   <goal name="lemma1.0.1">
   <proof prover="0"><result status="valid" time="2.488189" steps="3252"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="parent_is_candidate_of_semi_dominator">
 <proof prover="0"><result status="valid" time="2.384784" steps="2841"/></proof>
 </goal>
 <goal name="semi_dominator_less_equal_than_parent">
 <proof prover="0"><result status="valid" time="0.263513" steps="134"/></proof>
 </goal>
 <goal name="semi_dominator_less_than_self">
 <proof prover="0"><result status="valid" time="0.718223" steps="1185"/></proof>
 </goal>
 <goal name="lemma3">
 <transf name="introduce_premises" >
  <goal name="lemma3.0">
  <transf name="assert" arg1="(exists p:list vertex. path semi_w p w /\ (forall x:vertex. mem2 x p -&gt; dfsnum x &gt; dfsnum semi_w))">
   <goal name="lemma3.0.0" expl="asserted formula">
   <proof prover="0"><result status="valid" time="5.897350" steps="13244"/></proof>
   </goal>
   <goal name="lemma3.0.1">
   <transf name="destruct_rec" arg1="h">
    <goal name="lemma3.0.1.0">
    <transf name="assert" arg1="(exists iw pw. mapsto w (iw, pw) dfsnum_parent)">
     <goal name="lemma3.0.1.0.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="16.478321" steps="58368"/></proof>
     </goal>
     <goal name="lemma3.0.1.0.1">
     <transf name="destruct_rec" arg1="h">
      <goal name="lemma3.0.1.0.1.0">
      <transf name="assert" arg1="(exists i_semi_w p_semi_w. mapsto semi_w (i_semi_w, p_semi_w) dfsnum_parent)">
       <goal name="lemma3.0.1.0.1.0.0" expl="asserted formula">
       <proof prover="1" timelimit="120"><result status="valid" time="0.333003" steps="60952"/></proof>
       </goal>
       <goal name="lemma3.0.1.0.1.0.1">
       <transf name="destruct_rec" arg1="h">
        <goal name="lemma3.0.1.0.1.0.1.0">
        <transf name="instantiate" arg1="lemma1" arg2="semi_w, w, i_semi_w, iw, p_semi_w, pw">
         <goal name="lemma3.0.1.0.1.0.1.0.0">
         <transf name="assert" arg1="(forall p3:list vertex. path semi_w p3 w -&gt; (exists x:vertex. mem2 x (Cons semi_w p3) /\ x -*-&gt; semi_w /\ x -*-&gt; w))">
          <goal name="lemma3.0.1.0.1.0.1.0.0.0" expl="asserted formula">
          <proof prover="0"><result status="valid" time="0.883575" steps="1750"/></proof>
          </goal>
          <goal name="lemma3.0.1.0.1.0.1.0.0.1">
          <transf name="instantiate" arg1="h" arg2="p">
           <goal name="lemma3.0.1.0.1.0.1.0.0.1.0">
           <transf name="assert" arg1="((exists x:vertex. mem2 x (Cons semi_w p) /\ x -*-&gt; semi_w /\ x -*-&gt; w))">
            <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.0" expl="asserted formula">
            <proof prover="0"><result status="valid" time="0.214813" steps="57"/></proof>
            </goal>
            <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1">
            <transf name="destruct_rec" arg1="h">
             <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0">
             <transf name="assert" arg1="(x = semi_w \/ mem2 x p)">
              <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.0" expl="asserted formula">
              <proof prover="0"><result status="valid" time="0.207474" steps="64"/></proof>
              </goal>
              <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.1">
              <transf name="destruct_rec" arg1="h">
               <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.1.0">
               <proof prover="0"><result status="valid" time="0.744192" steps="1280"/></proof>
               </goal>
               <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.1.1">
               <proof prover="0"><result status="valid" time="16.734644" steps="56061"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unnamed_e">
 <proof prover="0" timelimit="120"><result status="valid" time="7.140530" steps="24651"/></proof>
 </goal>
 <goal name="InductionPathIsSimpleList.base">
 <proof prover="0" timelimit="120"><result status="valid" time="2.311683" steps="6712"/></proof>
 </goal>
 <goal name="InductionPathIsSimpleList.induction_step">
 <proof prover="1" timelimit="120"><result status="valid" time="13.123758" steps="2049724"/></proof>
 </goal>
 <goal name="unnamed_d">
 <transf name="introduce_premises" >
  <goal name="unnamed_d.0">
  <transf name="assert" arg1="(p_path_is_simplelist (length l))">
   <goal name="unnamed_d.0.0" expl="asserted formula">
   <proof prover="0" timelimit="120"><result status="valid" time="0.193345" steps="48"/></proof>
   </goal>
   <goal name="unnamed_d.0.1">
   <proof prover="0" timelimit="120"><result status="valid" time="0.350809" steps="406"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
