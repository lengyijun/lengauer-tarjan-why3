<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.5.2" timelimit="120" steplimit="0" memlimit="10000"/>
<prover id="1" name="CVC5" version="1.0.8" timelimit="120" steplimit="0" memlimit="10000"/>
<prover id="2" name="Eprover" version="2.0" timelimit="120" steplimit="0" memlimit="10000"/>
<prover id="3" name="CVC4" version="1.8" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="4" name="Z3" version="4.12.2" timelimit="100" steplimit="0" memlimit="10000"/>
<prover id="5" name="Alt-Ergo" version="2.5.2" alternative="BV" timelimit="120" steplimit="0" memlimit="10000"/>
<file format="whyml">
<path name=".."/><path name="lengauer-tarjan.mlw"/>
<theory name="DfsnumParent" proved="true">
 <goal name="concat_lemma" proved="true">
 <transf name="induction_pr" proved="true" >
  <goal name="concat_lemma.0" proved="true">
  <proof prover="0"><result status="valid" time="0.030047" steps="15"/></proof>
  </goal>
  <goal name="concat_lemma.1" proved="true">
  <proof prover="0"><result status="valid" time="0.040031" steps="171"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="concat_lemma_b" proved="true">
 <proof prover="1"><result status="valid" time="0.238511" steps="29663"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentStartMemHelper" proved="true">
 <goal name="InductionNodeMem.base" proved="true">
 <proof prover="0"><result status="valid" time="0.059711" steps="373"/></proof>
 </goal>
 <goal name="InductionNodeMem.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="0.039271" steps="205"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentStartMem" proved="true">
 <goal name="start_node_mem" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="start_node_mem.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_node_mem (length l))">
   <goal name="start_node_mem.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.019648" steps="15"/></proof>
   </goal>
   <goal name="start_node_mem.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.039639" steps="108"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentSortedHelper" proved="true">
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="0"><result status="valid" time="0.102695" steps="663"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="2.384784" steps="13051"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentSorted" proved="true">
 <goal name="unnamed_a" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_a.0" proved="true">
  <transf name="assert" proved="true" arg1="(p1 (length l))">
   <goal name="unnamed_a.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.029792" steps="19"/></proof>
   </goal>
   <goal name="unnamed_a.0.1" proved="true">
   <proof prover="0"><result status="valid" time="2.174745" steps="13187"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unnamed_e" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="unnamed_e.0" proved="true">
  <proof prover="0"><result status="valid" time="0.033776" steps="174"/></proof>
  </goal>
  <goal name="unnamed_e.1" proved="true">
  <proof prover="0"><result status="valid" time="49.083250" steps="138388"/></proof>
  </goal>
  <goal name="unnamed_e.2" proved="true">
  <proof prover="0"><result status="valid" time="3.391642" steps="15536"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentSimplelistHelper" proved="true">
 <goal name="InductionPathIsSimpleList.base" proved="true">
 <proof prover="1"><result status="valid" time="0.353533" steps="39047"/></proof>
 </goal>
 <goal name="InductionPathIsSimpleList.induction_step" proved="true">
 <proof prover="1"><result status="valid" time="1.534409" steps="117586"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentSimplelist" proved="true">
 <goal name="unnamed_d" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_d.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_path_is_simplelist (length l))">
   <goal name="unnamed_d.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.031694" steps="20"/></proof>
   </goal>
   <goal name="unnamed_d.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.073901" steps="199"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentUniqueHelper" proved="true">
 <goal name="InductionUnique.base" proved="true">
 <proof prover="0"><result status="valid" time="0.284955" steps="1199"/></proof>
 <proof prover="1"><result status="valid" time="0.352554" steps="44308"/></proof>
 </goal>
 <goal name="InductionUnique.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="0.190010" steps="873"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentUnique" proved="true">
 <goal name="path_unique" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="path_unique.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_unique (length l1))">
   <goal name="path_unique.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.030915" steps="23"/></proof>
   </goal>
   <goal name="path_unique.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.050719" steps="146"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CutoffHelper" proved="true">
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="0"><result status="valid" time="0.028399" steps="47"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="intros_n" proved="true" arg1="8">
   <goal name="induction_step.0.0" proved="true">
   <transf name="induction_pr" proved="true" >
    <goal name="induction_step.0.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.063998" steps="15853"/></proof>
    </goal>
    <goal name="induction_step.0.0.1" proved="true">
    <proof prover="1"><result status="valid" time="1.838871" steps="109685"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cutoff" proved="true">
 <goal name="span_cutoff" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="span_cutoff.0" proved="true">
  <transf name="assert" proved="true" arg1="(p1 (length l))">
   <goal name="span_cutoff.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.016489" steps="16"/></proof>
   </goal>
   <goal name="span_cutoff.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.114215" steps="755"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CutoffBHelper" proved="true">
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="0"><result status="valid" time="0.063381" steps="592"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="assert" proved="true" arg1="(exists y l1. l2 = l1 ++ Cons y Nil)">
    <goal name="induction_step.0.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.168137"/></proof>
    </goal>
    <goal name="induction_step.0.0.1" proved="true">
    <proof prover="0"><result status="valid" time="0.107945" steps="609"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CutoffB" proved="true">
 <goal name="span_cutoff" proved="true">
 <proof prover="2"><result status="valid" time="0.357193"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentMustOnTree" proved="true">
 <goal name="must_on_tree" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="must_on_tree.0" proved="true">
  <proof prover="0"><result status="valid" time="0.072319" steps="94"/></proof>
  <proof prover="1"><result status="valid" time="0.115786" steps="23148"/></proof>
  <proof prover="2"><result status="valid" time="0.069921"/></proof>
  </goal>
  <goal name="must_on_tree.1" proved="true">
  <proof prover="0"><result status="valid" time="0.022607" steps="22"/></proof>
  </goal>
  <goal name="must_on_tree.2" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="must_on_tree.2.0" proved="true">
   <proof prover="1"><result status="valid" time="3.140191" steps="115539"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentMutualParent" proved="true">
 <goal name="mutual_parent" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="mutual_parent.0" proved="true">
  <transf name="case" proved="true" arg1="(a1 = b)">
   <goal name="mutual_parent.0.0" expl="true case" proved="true">
   <proof prover="0"><result status="valid" time="0.026034" steps="22"/></proof>
   </goal>
   <goal name="mutual_parent.0.1" expl="false case" proved="true">
   <transf name="case" proved="true" arg1="(a2 = b)">
    <goal name="mutual_parent.0.1.0" expl="false case (true case)" proved="true">
    <proof prover="0"><result status="valid" time="0.034306" steps="24"/></proof>
    </goal>
    <goal name="mutual_parent.0.1.1" expl="false case" proved="true">
    <transf name="case" proved="true" arg1="(a1 = a2)">
     <goal name="mutual_parent.0.1.1.0" expl="false case (true case)" proved="true">
     <proof prover="0"><result status="valid" time="0.037257" steps="105"/></proof>
     </goal>
     <goal name="mutual_parent.0.1.1.1" expl="false case" proved="true">
     <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent root l b)">
      <goal name="mutual_parent.0.1.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.077782" steps="273"/></proof>
      </goal>
      <goal name="mutual_parent.0.1.1.1.1" expl="false case" proved="true">
      <transf name="destruct_rec" proved="true" arg1="h">
       <goal name="mutual_parent.0.1.1.1.1.0" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(mem2 a1 (Cons root l) /\ mem2 a2 (Cons root l))">
        <goal name="mutual_parent.0.1.1.1.1.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.193173" steps="1181"/></proof>
        </goal>
        <goal name="mutual_parent.0.1.1.1.1.0.1" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="((exists l1 l2 l3. l1 ++ Cons a1 l2 ++ Cons a2 l3 = Cons root l) \/ (exists l1 l2 l3. l1 ++ Cons a2 l2 ++ Cons a1 l3 = Cons root l))">
         <goal name="mutual_parent.0.1.1.1.1.0.1.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="25.540314"/></proof>
         </goal>
         <goal name="mutual_parent.0.1.1.1.1.0.1.1" expl="false case" proved="true">
         <transf name="destruct_rec" proved="true" arg1="h">
          <goal name="mutual_parent.0.1.1.1.1.0.1.1.0" expl="false case" proved="true">
          <transf name="destruct_term" proved="true" arg1="l1">
           <goal name="mutual_parent.0.1.1.1.1.0.1.1.0.0" expl="false case" proved="true">
           <proof prover="0"><result status="valid" time="20.403872" steps="50945"/></proof>
           <proof prover="1" obsolete="true"><result status="failure" time="0.000000"/></proof>
           <proof prover="2" obsolete="true"><result status="failure" time="0.000000"/></proof>
           </goal>
           <goal name="mutual_parent.0.1.1.1.1.0.1.1.0.1" expl="false case" proved="true">
           <proof prover="0"><result status="valid" time="2.234231" steps="12635"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="mutual_parent.0.1.1.1.1.0.1.1.1" expl="false case" proved="true">
          <transf name="destruct_term" proved="true" arg1="l1">
           <goal name="mutual_parent.0.1.1.1.1.0.1.1.1.0" expl="false case" proved="true">
           <proof prover="0"><result status="valid" time="21.417091" steps="53282"/></proof>
           <proof prover="1" obsolete="true"><result status="failure" time="0.000000"/></proof>
           <proof prover="2" obsolete="true"><result status="failure" time="0.000000"/></proof>
           </goal>
           <goal name="mutual_parent.0.1.1.1.1.0.1.1.1.1" expl="false case" proved="true">
           <proof prover="0"><result status="valid" time="2.663124" steps="12869"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="JustSpecialPathHelper" proved="true">
 <goal name="InductionJustSpecialPath.base" proved="true">
 <proof prover="0"><result status="valid" time="0.059643" steps="318"/></proof>
 </goal>
 <goal name="InductionJustSpecialPath.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="0.071078" steps="173"/></proof>
 </goal>
</theory>
<theory name="JustSpecialPath" proved="true">
 <goal name="just_special_path" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="just_special_path.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_just_special_path (length l))">
   <goal name="just_special_path.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.036039" steps="15"/></proof>
   </goal>
   <goal name="just_special_path.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.034310" steps="82"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentSubset" proved="true">
 <goal name="subset_lemma" proved="true">
 <proof prover="0"><result status="valid" time="0.130830" steps="696"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentPathSmall2LargeHelper" proved="true">
 <goal name="Inductionc.base" proved="true">
 <proof prover="0"><result status="valid" time="0.052751" steps="185"/></proof>
 </goal>
 <goal name="Inductionc.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="0.061265" steps="159"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentPathSmall2Large" proved="true">
 <goal name="unnamed_c" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_c.0" proved="true">
  <transf name="assert" proved="true" arg1="(pc (length l))">
   <goal name="unnamed_c.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.028073" steps="14"/></proof>
   </goal>
   <goal name="unnamed_c.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.046445" steps="176"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="DfsnumParentPathLarge2SmallHelper" proved="true">
 <goal name="Inductionb.base" proved="true">
 <proof prover="0"><result status="valid" time="0.150975" steps="937"/></proof>
 </goal>
 <goal name="Inductionb.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="2.459170" steps="18397"/></proof>
 </goal>
</theory>
<theory name="DfsnumParentPathLarge2Small" proved="true">
 <goal name="unnamed_b" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="unnamed_b.0" proved="true">
  <transf name="assert" proved="true" arg1="(pb (length l))">
   <goal name="unnamed_b.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.025814" steps="17"/></proof>
   </goal>
   <goal name="unnamed_b.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.036144" steps="93"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ReachableInDfsNumHelper" proved="true">
 <goal name="SimpleInduction.base" proved="true">
 <proof prover="0"><result status="valid" time="0.033034" steps="108"/></proof>
 </goal>
 <goal name="SimpleInduction.induction_step" proved="true">
 <proof prover="0"><result status="valid" time="0.082405" steps="487"/></proof>
 </goal>
</theory>
<theory name="ReachableInDfsNum" proved="true">
 <goal name="dfsnum_property_e" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="dfsnum_property_e.0" proved="true">
  <transf name="assert" proved="true" arg1="(p1 (length p))">
   <goal name="dfsnum_property_e.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.046552" steps="15"/></proof>
   </goal>
   <goal name="dfsnum_property_e.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.105077" steps="619"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma2" proved="true">
 <goal name="lemma2" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma2.0" proved="true">
  <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent root l w)">
   <goal name="lemma2.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.056455" steps="178"/></proof>
   </goal>
   <goal name="lemma2.0.1" proved="true">
   <transf name="destruct_rec" proved="true" arg1="h">
    <goal name="lemma2.0.1.0" proved="true">
    <transf name="assert" proved="true" arg1="(mem2 idom_w (Cons root l))">
     <goal name="lemma2.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.073910" steps="304"/></proof>
     </goal>
     <goal name="lemma2.0.1.0.1" proved="true">
     <proof prover="0"><result status="valid" time="0.171063" steps="1038"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma1HelperAHelper" proved="true">
 <goal name="InductionLemma1Helper.base" proved="true">
 <proof prover="1"><result status="valid" time="2.040217" steps="137229"/></proof>
 </goal>
 <goal name="InductionLemma1Helper.induction_step" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="assert" proved="true" arg1="(exists l1 z. l = l1 ++ Cons z Nil)">
    <goal name="induction_step.0.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.183576"/></proof>
    </goal>
    <goal name="induction_step.0.0.1" proved="true">
    <transf name="destruct_rec" proved="true" arg1="h">
     <goal name="induction_step.0.0.1.0" proved="true">
     <transf name="assert" proved="true" arg1="(exists iz pz . mapsto z (iz , pz) dfsnum_parent)">
      <goal name="induction_step.0.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="5.460167" steps="33224"/></proof>
      </goal>
      <goal name="induction_step.0.0.1.0.1" proved="true">
      <transf name="destruct_rec" proved="true" arg1="h">
       <goal name="induction_step.0.0.1.0.1.0" proved="true">
       <transf name="instantiate" proved="true" arg1="H5" arg2="dfsnum_parent">
        <goal name="induction_step.0.0.1.0.1.0.0" proved="true">
        <transf name="assert" proved="true" arg1="((forall l2:list vertex, a1:vertex, ia1:int, pa1:vertex, t1:int. length l2 = n -&gt; (forall x:vertex. mem2 x l2 -&gt; mem x dfsnum_parent) -&gt; mapsto a1 (ia1, pa1) dfsnum_parent -&gt; ia1 &lt; t1 -&gt; (exists b:vertex, ib:int, pb:vertex, l11:list vertex, l21:list vertex. Cons a1 l2 = (l11 ++ Cons b l21) /\ mapsto b (ib, pb) dfsnum_parent /\ ib &lt; t1 /\ (forall x:vertex, ix:int, px:vertex. mem2 x l21 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= t1))))">
         <goal name="induction_step.0.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.067764" steps="18314"/></proof>
         </goal>
         <goal name="induction_step.0.0.1.0.1.0.0.1" proved="true">
         <transf name="instantiate" proved="true" arg1="h" arg2="l1, a, ia, pa, t">
          <goal name="induction_step.0.0.1.0.1.0.0.1.0" proved="true">
          <transf name="assert" proved="true" arg1="(iz &lt; t \/ iz &gt;= t )">
           <goal name="induction_step.0.0.1.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.016394" steps="18"/></proof>
           </goal>
           <goal name="induction_step.0.0.1.0.1.0.0.1.0.1" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h">
            <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.0" proved="true">
            <proof prover="0"><result status="valid" time="0.088639" steps="456"/></proof>
            </goal>
            <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1" proved="true">
            <transf name="assert" proved="true" arg1="((exists b:vertex, ib:int, pb:vertex, l11:list vertex, l21:list vertex. Cons a l1 = (l11 ++ Cons b l21) /\ mapsto b (ib, pb) dfsnum_parent /\ ib &lt; t /\ (forall x:vertex, ix:int, px:vertex. mem2 x l21 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= t)))">
             <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="0.080606" steps="416"/></proof>
             </goal>
             <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1.1" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h">
              <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1.1.0" proved="true">
              <transf name="exists" proved="true" arg1="b">
               <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1.1.0.0" proved="true">
               <transf name="exists" proved="true" arg1="ib">
                <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1.1.0.0.0" proved="true">
                <transf name="exists" proved="true" arg1="pb">
                 <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1.1.0.0.0.0" proved="true">
                 <transf name="exists" proved="true" arg1="l11">
                  <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1.1.0.0.0.0.0" proved="true">
                  <transf name="exists" proved="true" arg1="(l21 ++ Cons z Nil)">
                   <goal name="induction_step.0.0.1.0.1.0.0.1.0.1.1.1.0.0.0.0.0.0" proved="true">
                   <proof prover="0"><result status="valid" time="0.176515" steps="1129"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma1HelperA" proved="true">
 <goal name="lemma1_helper_a" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma1_helper_a.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_lemma1_helper (length l))">
   <goal name="lemma1_helper_a.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.023344" steps="16"/></proof>
   </goal>
   <goal name="lemma1_helper_a.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="p_lemma1_helper" arg2="in" arg3="h">
    <goal name="lemma1_helper_a.0.1.0" proved="true">
    <transf name="apply" proved="true" arg1="h" arg2="with" arg3="ia, pa">
     <goal name="lemma1_helper_a.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.023289" steps="10"/></proof>
     </goal>
     <goal name="lemma1_helper_a.0.1.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.024837" steps="10"/></proof>
     </goal>
     <goal name="lemma1_helper_a.0.1.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.030936" steps="16"/></proof>
     </goal>
     <goal name="lemma1_helper_a.0.1.0.3" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.020845" steps="10"/></proof>
     </goal>
     <goal name="lemma1_helper_a.0.1.0.4" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.025407" steps="10"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma1HelperCHelper" proved="true">
 <goal name="InductionK.base" proved="true">
 <proof prover="0"><result status="valid" time="0.050108" steps="204"/></proof>
 </goal>
 <goal name="InductionK.induction_step" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="assert" proved="true" arg1="(exists l1 z. l = l1 ++ Cons z Nil)">
    <goal name="induction_step.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.037494" steps="115"/></proof>
    </goal>
    <goal name="induction_step.0.0.1" proved="true">
    <transf name="destruct_rec" proved="true" arg1="h">
     <goal name="induction_step.0.0.1.0" proved="true">
     <transf name="case" proved="true" arg1="(v = root)">
      <goal name="induction_step.0.0.1.0.0" expl="true case" proved="true">
      <proof prover="0"><result status="valid" time="0.307584" steps="1979"/></proof>
      </goal>
      <goal name="induction_step.0.0.1.0.1" expl="false case" proved="true">
      <transf name="assert" proved="true" arg1="(path v l1 z)">
       <goal name="induction_step.0.0.1.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.030640" steps="32"/></proof>
       </goal>
       <goal name="induction_step.0.0.1.0.1.1" expl="false case" proved="true">
       <transf name="assert" proved="true" arg1="(exists l. path root l v)">
        <goal name="induction_step.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="1.493536" steps="9766"/></proof>
        </goal>
        <goal name="induction_step.0.0.1.0.1.1.1" expl="false case" proved="true">
        <transf name="assert" proved="true" arg1="(exists l. path root l z)">
         <goal name="induction_step.0.0.1.0.1.1.1.0" expl="asserted formula" proved="true">
         <proof prover="0" obsolete="true"><result status="timeout" time="120.000000" steps="654549"/></proof>
         <proof prover="1"><result status="valid" time="73.363699" steps="982071"/></proof>
         <proof prover="2"><result status="valid" time="0.103592"/></proof>
         </goal>
         <goal name="induction_step.0.0.1.0.1.1.1.1" expl="false case" proved="true">
         <transf name="assert" proved="true" arg1="(exists iz pz. mapsto z (iz , pz) dfsnum_parent)">
          <goal name="induction_step.0.0.1.0.1.1.1.1.0" expl="asserted formula" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="120.000000" steps="849567"/></proof>
          <proof prover="1"><result status="valid" time="0.557621" steps="51617"/></proof>
          <proof prover="2"><result status="valid" time="0.147164"/></proof>
          </goal>
          <goal name="induction_step.0.0.1.0.1.1.1.1.1" expl="false case" proved="true">
          <transf name="destruct_rec" proved="true" arg1="h">
           <goal name="induction_step.0.0.1.0.1.1.1.1.1.0" expl="false case" proved="true">
           <transf name="assert" proved="true" arg1="(iz &gt;= iv)">
            <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.0" expl="asserted formula" proved="true">
            <proof prover="0"><result status="valid" time="0.069188" steps="295"/></proof>
            </goal>
            <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1" expl="false case" proved="true">
            <transf name="case" proved="true" arg1="(v = z)">
             <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.0" expl="false case (true case)" proved="true">
             <proof prover="0"><result status="valid" time="0.109012" steps="305"/></proof>
             </goal>
             <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1" expl="false case" proved="true">
             <transf name="instantiate" proved="true" arg1="H8" arg2="dfsnum_parent, l1, v, iv, pv, z, iz, pz">
              <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0" expl="false case" proved="true">
              <transf name="assert" proved="true" arg1="((exists p:list vertex. (--+-&gt;) dfsnum_parent v p z))">
               <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.0" expl="asserted formula" proved="true">
               <proof prover="0"><result status="valid" time="0.847760" steps="3593"/></proof>
               </goal>
               <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1" expl="false case" proved="true">
               <transf name="case" proved="true" arg1="(w  = z)">
                <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.0" expl="false case (true case)" proved="true">
                <proof prover="0"><result status="valid" time="0.031109" steps="53"/></proof>
                </goal>
                <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.1" expl="false case" proved="true">
                <transf name="assert" proved="true" arg1="(iw &lt; iz \/ iw &gt; iz )">
                 <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.1.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="3.890722" steps="22570"/></proof>
                 </goal>
                 <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.1.1" expl="false case" proved="true">
                 <transf name="destruct" proved="true" arg1="h">
                  <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.1.1.0" expl="false case" proved="true">
                  <proof prover="0"><result status="valid" time="0.925102" steps="3158"/></proof>
                  </goal>
                  <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.1.1.1" expl="false case" proved="true">
                  <transf name="assert" proved="true" arg1="(edge z w)">
                   <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.1.1.1.0" expl="asserted formula" proved="true">
                   <proof prover="0"><result status="valid" time="0.030712" steps="52"/></proof>
                   </goal>
                   <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.1.1.1.1" expl="false case" proved="true">
                   <transf name="unfold" proved="true" arg1="super_wf_dfsnum_parent" arg2="in" arg3="H6">
                    <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.1.1.1.1.0" expl="false case" proved="true">
                    <transf name="destruct_rec" proved="true" arg1="H6">
                     <goal name="induction_step.0.0.1.0.1.1.1.1.1.0.1.1.0.1.1.1.1.1.0.0" expl="false case" proved="true">
                     <proof prover="2"><result status="valid" time="2.718938"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma1HelperC" proved="true">
 <goal name="dfsnum_property_k" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="dfsnum_property_k.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_dfsnum_property_k (length l))">
   <goal name="dfsnum_property_k.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.025473" steps="23"/></proof>
   </goal>
   <goal name="dfsnum_property_k.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.091405" steps="439"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma1HelperB" proved="true">
 <goal name="InductionLemma1.base" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="base.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="base.0.0" proved="true">
   <transf name="exists" proved="true" arg1="v">
    <goal name="base.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.069210" steps="450"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1.induction_step" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="case" proved="true" arg1="(v = root)">
    <goal name="induction_step.0.0.0" expl="true case" proved="true">
    <transf name="exists" proved="true" arg1="root">
     <goal name="induction_step.0.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.092792" steps="533"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="induction_step.0.0.1" expl="false case" proved="true">
    <transf name="case" proved="true" arg1="(length p = n + 1)">
     <goal name="induction_step.0.0.1.0" expl="false case (true case)" proved="true">
     <transf name="instantiate" proved="true" arg1="lemma1_helper_a" arg2="dfsnum_parent, p, v, iv, pv, iw">
      <goal name="induction_step.0.0.1.0.0" expl="false case (true case)" proved="true">
      <transf name="assert" proved="true" arg1="((exists b:vertex, ib:int, pb:vertex, l1:list vertex, l2:list vertex. Cons v p = (l1 ++ Cons b l2) /\ mapsto b (ib, pb) dfsnum_parent /\ ib &lt; iw /\ (forall x:vertex, ix:int, px:vertex. mem2 x l2 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= iw)))">
       <goal name="induction_step.0.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="induction_step.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.024119" steps="28"/></proof>
        </goal>
        <goal name="induction_step.0.0.1.0.0.0.1" expl="apply premises" proved="true">
        <transf name="introduce_premises" proved="true" >
         <goal name="induction_step.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(exists p. path v p x)">
          <goal name="induction_step.0.0.1.0.0.0.1.0.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.149025" steps="713"/></proof>
          </goal>
          <goal name="induction_step.0.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(exists p. path root p v)">
           <goal name="induction_step.0.0.1.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="2.799046" steps="11892"/></proof>
           </goal>
           <goal name="induction_step.0.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="(exists p. path root p x)">
            <goal name="induction_step.0.0.1.0.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
            <proof prover="0" obsolete="true"><result status="failure" time="0.000000"/></proof>
            <proof prover="1"><result status="valid" time="95.130820" steps="1319385"/></proof>
            <proof prover="2"><result status="valid" time="0.148148"/></proof>
            </goal>
            <goal name="induction_step.0.0.1.0.0.0.1.0.1.1.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.097247" steps="332"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="induction_step.0.0.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.031674" steps="28"/></proof>
        </goal>
        <goal name="induction_step.0.0.1.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.017855" steps="28"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="induction_step.0.0.1.0.0.1" expl="false case (true case)" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="induction_step.0.0.1.0.0.1.0" expl="false case (true case)" proved="true">
        <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent b l w)">
         <goal name="induction_step.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="dfsnum_property_k" arg2="with" arg3="ib, pb, iw, pw, l2">
          <goal name="induction_step.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.025920" steps="34"/></proof>
          </goal>
          <goal name="induction_step.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.039890" steps="34"/></proof>
          </goal>
          <goal name="induction_step.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.052489" steps="34"/></proof>
          </goal>
          <goal name="induction_step.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.029919" steps="34"/></proof>
          </goal>
          <goal name="induction_step.0.0.1.0.0.1.0.0.4" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.026413" steps="34"/></proof>
          </goal>
          <goal name="induction_step.0.0.1.0.0.1.0.0.5" expl="apply premises" proved="true">
          <proof prover="0" obsolete="true"><result status="failure" time="0.000000"/></proof>
          <proof prover="1"><result status="valid" time="0.136526" steps="23783"/></proof>
          </goal>
          <goal name="induction_step.0.0.1.0.0.1.0.0.6" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.033165" steps="72"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="induction_step.0.0.1.0.0.1.0.1" expl="false case (true case)" proved="true">
         <transf name="case" proved="true" arg1="(v = b)">
          <goal name="induction_step.0.0.1.0.0.1.0.1.0" expl="false case (true case)" proved="true">
          <transf name="exists" proved="true" arg1="b">
           <goal name="induction_step.0.0.1.0.0.1.0.1.0.0" proved="true">
           <proof prover="0"><result status="valid" time="0.073355" steps="327"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="induction_step.0.0.1.0.0.1.0.1.1" expl="false case (true case)" proved="true">
          <transf name="assert" proved="true" arg1="(iv &lt; ib \/ iv &gt; ib)">
           <goal name="induction_step.0.0.1.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.602144" steps="2528"/></proof>
           </goal>
           <goal name="induction_step.0.0.1.0.0.1.0.1.1.1" expl="false case (true case)" proved="true">
           <transf name="destruct" proved="true" arg1="h">
            <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0" expl="false case (true case)" proved="true">
            <transf name="destruct_term" proved="true" arg1="l1">
             <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.0" expl="false case (true case)" proved="true">
             <transf name="subst" proved="true" arg1="l1">
              <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.0.0" expl="false case (true case)" proved="true">
              <transf name="assert" proved="true" arg1="(path v x b)">
               <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0"><result status="valid" time="0.202804" steps="406"/></proof>
               </goal>
               <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.0.0.1" expl="false case (true case)" proved="true">
               <transf name="instantiate" proved="true" arg1="H7" arg2="dfsnum_parent, v, iv, pv, b, ib, pb, x">
                <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.0.0.1.0" expl="false case (true case)" proved="true">
                <transf name="assert" proved="true" arg1="((exists x2:vertex. mem2 x2 (Cons v x) /\ (--*-&gt;) dfsnum_parent x2 v /\ (--*-&gt;) dfsnum_parent x2 b))">
                 <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.0.0.1.0.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="0.069675" steps="423"/></proof>
                 </goal>
                 <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.0.0.1.0.1" expl="false case (true case)" proved="true">
                 <transf name="destruct_rec" proved="true" arg1="h">
                  <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.0.0.1.0.1.0" expl="false case (true case)" proved="true">
                  <transf name="exists" proved="true" arg1="x2">
                   <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.0.0.1.0.1.0.0" proved="true">
                   <proof prover="2"><result status="valid" time="0.240376"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.0.1" expl="false case (true case)" proved="true">
             <proof prover="0"><result status="valid" time="0.041704" steps="54"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.1" expl="false case (true case)" proved="true">
            <transf name="exists" proved="true" arg1="b">
             <goal name="induction_step.0.0.1.0.0.1.0.1.1.1.1.0" proved="true">
             <proof prover="0"><result status="valid" time="0.898828" steps="4404"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="induction_step.0.0.1.1" expl="false case" proved="true">
     <proof prover="0"><result status="valid" time="0.033405" steps="83"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Lemma1" proved="true">
 <goal name="lemma1" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma1.0" proved="true">
  <transf name="assert" proved="true" arg1="(p_lemma1 (length p))">
   <goal name="lemma1.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.027078" steps="27"/></proof>
   </goal>
   <goal name="lemma1.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.057223" steps="159"/></proof>
   <proof prover="1"><result status="valid" time="5.013886" steps="326502"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SetMinExists" proved="true">
 <goal name="min_exists_helper" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="min_exists_helper.0" proved="true">
  <transf name="apply" proved="true" arg1="Induction">
   <goal name="min_exists_helper.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.021654" steps="25"/></proof>
   </goal>
   <goal name="min_exists_helper.0.1" expl="apply premises" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="min_exists_helper.0.1.0" expl="apply premises" proved="true">
    <transf name="introduce_premises" proved="true" >
     <goal name="min_exists_helper.0.1.0.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(mem1 t s)">
      <goal name="min_exists_helper.0.1.0.0.0" expl="apply premises (true case)" proved="true">
      <proof prover="0"><result status="valid" time="0.058541" steps="305"/></proof>
      </goal>
      <goal name="min_exists_helper.0.1.0.0.1" expl="apply premises (false case)" proved="true">
      <transf name="case" proved="true" arg1="(is_empty s)">
       <goal name="min_exists_helper.0.1.0.0.1.0" expl="apply premises (false case. true case)" proved="true">
       <proof prover="0"><result status="valid" time="0.031058" steps="114"/></proof>
       </goal>
       <goal name="min_exists_helper.0.1.0.0.1.1" expl="apply premises (false case)" proved="true">
       <transf name="assert" proved="true" arg1="((exists v:vertex. mem1 v s /\ (forall x:vertex. mem1 x s -&gt; (f @ v) &lt;= (f @ x))))">
        <goal name="min_exists_helper.0.1.0.0.1.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.038681" steps="191"/></proof>
        </goal>
        <goal name="min_exists_helper.0.1.0.0.1.1.1" expl="apply premises (false case)" proved="true">
        <transf name="destruct_rec" proved="true" arg1="h">
         <goal name="min_exists_helper.0.1.0.0.1.1.1.0" expl="apply premises (false case)" proved="true">
         <transf name="assert" proved="true" arg1="(f @ v &lt;= f @ t \/ f @ v &gt; f @ t)">
          <goal name="min_exists_helper.0.1.0.0.1.1.1.0.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.009832" steps="12"/></proof>
          </goal>
          <goal name="min_exists_helper.0.1.0.0.1.1.1.0.1" expl="apply premises (false case)" proved="true">
          <proof prover="0"><result status="valid" time="0.029798" steps="201"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="min_exists" proved="true">
 <proof prover="0"><result status="valid" time="0.034741" steps="126"/></proof>
 </goal>
</theory>
<theory name="SemiDominate" proved="true">
 <goal name="parent_is_candidate_of_semi_dominator" proved="true">
 <proof prover="0"><result status="valid" time="1.163834" steps="3922"/></proof>
 </goal>
 <goal name="semi_em" proved="true">
 <proof prover="0"><result status="valid" time="0.020675" steps="10"/></proof>
 </goal>
 <goal name="min_semi_uniq" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="min_semi_uniq.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="min_semi_uniq.0.0" proved="true">
   <transf name="destruct_rec" proved="true" arg1="H2">
    <goal name="min_semi_uniq.0.0.0" proved="true">
    <transf name="destruct_rec" proved="true" arg1="H">
     <goal name="min_semi_uniq.0.0.0.0" proved="true">
     <transf name="assert" proved="true" arg1="(iv = iv1)">
      <goal name="min_semi_uniq.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.046645" steps="97"/></proof>
      </goal>
      <goal name="min_semi_uniq.0.0.0.0.1" proved="true">
      <proof prover="0"><result status="valid" time="0.120617" steps="372"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="semi_exists" proved="true">
 <proof prover="0"><result status="valid" time="0.181788" steps="928"/></proof>
 <proof prover="2"><result status="valid" time="0.675735"/></proof>
 <transf name="introduce_premises" proved="true" >
  <goal name="semi_exists.0" proved="true">
  <transf name="assert" proved="true" arg1="(exists y. (++&gt;) dfsnum_parent y x)">
   <goal name="semi_exists.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.171766" steps="925"/></proof>
   </goal>
   <goal name="semi_exists.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.029709" steps="22"/></proof>
   <transf name="assert" proved="true" arg1="(forall y. (++&gt;) dfsnum_parent y x -&gt; mem y dfsnum_parent)">
    <goal name="semi_exists.0.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.028104" steps="28"/></proof>
    </goal>
    <goal name="semi_exists.0.1.1" proved="true">
    <proof prover="0"><result status="valid" time="0.036877" steps="22"/></proof>
    <proof prover="1"><result status="valid" time="0.068281" steps="21638"/></proof>
    <proof prover="2"><result status="valid" time="0.032861"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="semi_exists_helper_a" proved="true">
 <proof prover="1"><result status="valid" time="0.737202" steps="68673"/></proof>
 <proof prover="2"><result status="valid" time="0.338540"/></proof>
 </goal>
 <goal name="min_semi_exists" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="min_semi_exists.0" proved="true">
  <transf name="assert" proved="true" arg1="((exists s:fset vertex. not is_empty1 s /\ (forall a:vertex. mem1 a s &lt;-&gt; (++&gt;) dfsnum_parent a x)))">
   <goal name="min_semi_exists.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.605275" steps="2933"/></proof>
   </goal>
   <goal name="min_semi_exists.0.1" proved="true">
   <transf name="destruct_rec" proved="true" arg1="h">
    <goal name="min_semi_exists.0.1.0" proved="true">
    <transf name="pose" proved="true" arg1="f" arg2="(fun x -&gt; let (ix, _) = find x dfsnum_parent in ix)">
     <goal name="min_semi_exists.0.1.0.0" proved="true">
     <transf name="assert" proved="true" arg1="((exists v:vertex. mem1 v s /\ (forall x1:vertex. mem1 x1 s -&gt; (f @ v) &lt;= (f @ x1))))">
      <goal name="min_semi_exists.0.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="1.845107" steps="5295"/></proof>
      </goal>
      <goal name="min_semi_exists.0.1.0.0.1" proved="true">
      <transf name="destruct_rec" proved="true" arg1="h">
       <goal name="min_semi_exists.0.1.0.0.1.0" proved="true">
       <transf name="exists" proved="true" arg1="v">
        <goal name="min_semi_exists.0.1.0.0.1.0.0" proved="true">
        <proof prover="0"><result status="valid" time="0.234073" steps="707"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="semi_dominator_less_equal_than_parent" proved="true">
 <proof prover="0"><result status="valid" time="0.217917" steps="580"/></proof>
 </goal>
 <goal name="semi_dominator_less_than_self" proved="true">
 <proof prover="0"><result status="valid" time="0.729757" steps="1904"/></proof>
 </goal>
 <goal name="lemma3" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="lemma3.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="lemma3.0.0" proved="true">
   <transf name="unfold" proved="true" arg1="(++&gt;)" arg2="in" arg3="H1">
    <goal name="lemma3.0.0.0" proved="true">
    <transf name="destruct_rec" proved="true" arg1="H1">
     <goal name="lemma3.0.0.0.0" proved="true">
     <transf name="assert" proved="true" arg1="(exists i_semi_w p_semi_w. mapsto semi_w (i_semi_w , p_semi_w) dfsnum_parent)">
      <goal name="lemma3.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.791937" steps="2448"/></proof>
      </goal>
      <goal name="lemma3.0.0.0.0.1" proved="true">
      <transf name="assert" proved="true" arg1="(exists iw pw. mapsto w (iw , pw) dfsnum_parent)">
       <goal name="lemma3.0.0.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="57.360140" steps="1039731"/></proof>
       <proof prover="2"><result status="valid" time="99.324468"/></proof>
       </goal>
       <goal name="lemma3.0.0.0.0.1.1" proved="true">
       <proof prover="0"><result status="valid" time="2.363333" steps="5962"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma4" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma4.0" proved="true">
  <transf name="assert" proved="true" arg1="(mem w dfsnum_parent /\ mem semi_w dfsnum_parent /\ mem idom_w dfsnum_parent )">
   <goal name="lemma4.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.486165" steps="1455"/></proof>
   </goal>
   <goal name="lemma4.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent root l w)">
    <goal name="lemma4.0.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.348553" steps="1417"/></proof>
    </goal>
    <goal name="lemma4.0.1.1" proved="true">
    <transf name="destruct_rec" proved="true" arg1="h">
     <goal name="lemma4.0.1.1.0" proved="true">
     <transf name="assert" proved="true" arg1="((idom_w = root \/ mem2 idom_w l))">
      <goal name="lemma4.0.1.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.953200" steps="1984"/></proof>
      </goal>
      <goal name="lemma4.0.1.1.0.1" proved="true">
      <transf name="assert" proved="true" arg1="((semi_w = root \/ mem2 semi_w l))">
       <goal name="lemma4.0.1.1.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="2.082962" steps="4249"/></proof>
       </goal>
       <goal name="lemma4.0.1.1.0.1.1" proved="true">
       <transf name="destruct" proved="true" arg1="h1">
        <goal name="lemma4.0.1.1.0.1.1.0" proved="true">
        <proof prover="0"><result status="valid" time="0.386918" steps="1004"/></proof>
        </goal>
        <goal name="lemma4.0.1.1.0.1.1.1" proved="true">
        <proof prover="0" obsolete="true"><result status="failure" time="0.000000"/></proof>
        <transf name="assert" proved="true" arg1="(exists i_idom_w p_idom_w . mapsto idom_w (i_idom_w, p_idom_w) dfsnum_parent)">
         <goal name="lemma4.0.1.1.0.1.1.1.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="6.748907" steps="14153"/></proof>
         </goal>
         <goal name="lemma4.0.1.1.0.1.1.1.1" proved="true">
         <transf name="destruct_rec" proved="true" arg1="h">
          <goal name="lemma4.0.1.1.0.1.1.1.1.0" proved="true">
          <transf name="assert" proved="true" arg1="(exists iw pw. mapsto w (iw , pw) dfsnum_parent )">
           <goal name="lemma4.0.1.1.0.1.1.1.1.0.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.506499" steps="1098"/></proof>
           </goal>
           <goal name="lemma4.0.1.1.0.1.1.1.1.0.1" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h">
            <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0" proved="true">
            <transf name="assert" proved="true" arg1="(i_idom_w &lt; iw )">
             <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="0.173306" steps="198"/></proof>
             </goal>
             <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h3">
              <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.0" proved="true">
              <proof prover="0"><result status="valid" time="13.601972" steps="29735"/></proof>
              </goal>
              <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1" proved="true">
              <proof prover="0" obsolete="true"><result status="failure" time="0.000000"/></proof>
              <transf name="instantiate" proved="true" arg1="span_cutoff" arg2="dfsnum_parent, root, l, w, semi_w">
               <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0" proved="true">
               <transf name="destruct_rec" proved="true" arg1="Hinst">
                <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.0" expl="destruct premise" proved="true">
                <proof prover="0"><result status="valid" time="0.036623" steps="50"/></proof>
                </goal>
                <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.1" expl="destruct premise" proved="true">
                <proof prover="0"><result status="valid" time="0.034134" steps="50"/></proof>
                </goal>
                <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2" proved="true">
                <proof prover="0" obsolete="true"><result status="failure" time="0.000000"/></proof>
                <transf name="assert" proved="true" arg1="((mem2 idom_w (l1 ++ Cons semi_w Nil)) \/ (mem2 idom_w l2 /\ not mem2 idom_w (l1 ++ Cons semi_w Nil)))">
                 <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="0.125320" steps="339"/></proof>
                 </goal>
                 <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1" proved="true">
                 <transf name="destruct_rec" proved="true" arg1="h">
                  <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.0" proved="true">
                  <proof prover="0"><result status="valid" time="2.138155" steps="5268"/></proof>
                  </goal>
                  <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.1" proved="true">
                  <proof prover="0" obsolete="true"><result status="failure" time="0.000000"/></proof>
                  <transf name="unfold" proved="true" arg1="(+&gt;)" arg2="in" arg3="H">
                   <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.1.0" proved="true">
                   <transf name="destruct_rec" proved="true" arg1="H">
                    <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.1.0.0" proved="true">
                    <transf name="unfold" proved="true" arg1="(++&gt;)" arg2="in" arg3="H1">
                     <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.1.0.0.0" proved="true">
                     <transf name="destruct_rec" proved="true" arg1="H1">
                      <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.1.0.0.0.0" proved="true">
                      <transf name="assert" proved="true" arg1="(path root (l1 ++ Cons semi_w p) w)">
                       <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
                       <proof prover="0"><result status="valid" time="0.725073" steps="1650"/></proof>
                       </goal>
                       <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.1.0.0.0.0.1" proved="true">
                       <transf name="assert" proved="true" arg1="False">
                        <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
                        <proof prover="0"><result status="valid" time="67.982360" steps="186919"/></proof>
                        </goal>
                        <goal name="lemma4.0.1.1.0.1.1.1.1.0.1.0.1.1.0.2.1.1.0.0.0.0.1.1" proved="true">
                        <proof prover="0"><result status="valid" time="0.037177" steps="64"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="IdomInDfsnumParent" proved="true">
 <goal name="idom_in_dfsnum_parent" proved="true">
 <proof prover="0"><result status="valid" time="2.365112" steps="8367"/></proof>
 </goal>
</theory>
<theory name="Lemma5" proved="true">
 <goal name="lemma5" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="lemma5.0" proved="true">
  <transf name="assert" proved="true" arg1="(mem w dfsnum_parent)">
   <goal name="lemma5.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.058489" steps="110"/></proof>
   </goal>
   <goal name="lemma5.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(mem idom_w dfsnum_parent)">
    <goal name="lemma5.0.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.084450" steps="114"/></proof>
    </goal>
    <goal name="lemma5.0.1.1" proved="true">
    <transf name="assert" proved="true" arg1="(mem v dfsnum_parent)">
     <goal name="lemma5.0.1.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.052305" steps="118"/></proof>
     </goal>
     <goal name="lemma5.0.1.1.1" proved="true">
     <transf name="assert" proved="true" arg1="(mem idom_v dfsnum_parent)">
      <goal name="lemma5.0.1.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.047986" steps="122"/></proof>
      <proof prover="1"><result status="valid" time="0.124736" steps="27332"/></proof>
      <proof prover="2"><result status="valid" time="0.131867"/></proof>
      </goal>
      <goal name="lemma5.0.1.1.1.1" proved="true">
      <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent root l w)">
       <goal name="lemma5.0.1.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.024423" steps="2868"/></proof>
       </goal>
       <goal name="lemma5.0.1.1.1.1.1" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="lemma5.0.1.1.1.1.1.0" proved="true">
        <transf name="instantiate" proved="true" arg1="span_cutoff" arg2="dfsnum_parent, root, l, w, v">
         <goal name="lemma5.0.1.1.1.1.1.0.0" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="lemma5.0.1.1.1.1.1.0.0.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.023402" steps="38"/></proof>
          </goal>
          <goal name="lemma5.0.1.1.1.1.1.0.0.1" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="1.068931" steps="3725"/></proof>
          </goal>
          <goal name="lemma5.0.1.1.1.1.1.0.0.2" proved="true">
          <transf name="assert" proved="true" arg1="(mem2 idom_w (Cons root l1) \/ mem2 idom_w (Cons v l2))">
           <goal name="lemma5.0.1.1.1.1.1.0.0.2.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="19.894502" steps="43948"/></proof>
           <proof prover="1"><result status="valid" time="4.946719" steps="135484"/></proof>
           <proof prover="2"><result status="valid" time="0.239352"/></proof>
           </goal>
           <goal name="lemma5.0.1.1.1.1.1.0.0.2.1" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h">
            <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0" proved="true">
            <transf name="assert" proved="true" arg1="(idom_w = root \/ mem2 idom_w l1)">
             <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="0.032999" steps="50"/></proof>
             </goal>
             <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1" proved="true">
             <transf name="destruct_rec" proved="true" arg1="h">
              <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.0" proved="true">
              <proof prover="0"><result status="valid" time="4.884606" steps="11385"/></proof>
              </goal>
              <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1" proved="true">
              <transf name="instantiate" proved="true" arg1="span_cutoff" arg2="dfsnum_parent, root, l1, v, idom_w">
               <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0" proved="true">
               <transf name="destruct_rec" proved="true" arg1="Hinst">
                <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.0" expl="destruct premise" proved="true">
                <proof prover="0"><result status="valid" time="0.020863" steps="48"/></proof>
                </goal>
                <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.1" expl="destruct premise" proved="true">
                <proof prover="0"><result status="valid" time="0.032064" steps="48"/></proof>
                </goal>
                <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2" proved="true">
                <transf name="assert" proved="true" arg1="(mem2 idom_v (Cons root l1) \/ mem2 idom_v (Cons idom_w l2))">
                 <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="25.764980" steps="66053"/></proof>
                 </goal>
                 <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1" proved="true">
                 <transf name="destruct_rec" proved="true" arg1="h">
                  <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0" proved="true">
                  <transf name="case" proved="true" arg1="(idom_w = idom_v)">
                   <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.0" expl="true case" proved="true">
                   <proof prover="0"><result status="valid" time="0.039186" steps="64"/></proof>
                   </goal>
                   <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1" expl="false case" proved="true">
                   <transf name="assert" proved="true" arg1="(not idom_w ~~&gt; v)">
                    <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0" expl="asserted formula" proved="true">
                    <transf name="assert" proved="true" arg1="(exists l3 l4. Cons root l1 = l3 ++ Cons idom_v l4 /\ not mem2 idom_v l4)">
                     <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0.0" expl="asserted formula" proved="true">
                     <proof prover="0"><result status="valid" time="59.468399" steps="157543"/></proof>
                     </goal>
                     <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0.1" expl="asserted formula" proved="true">
                     <transf name="destruct_rec" proved="true" arg1="h1">
                      <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0.1.0" expl="asserted formula" proved="true">
                      <transf name="subst_all" proved="true" >
                       <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0.1.0.0" expl="asserted formula" proved="true">
                       <transf name="apply" proved="true" arg1="idom_is_the_last" arg2="with" arg3="idom_v, (l1 ++ Cons idom_w l2), l3, (l4 ++ Cons idom_w l2)">
                        <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="0.036100" steps="58"/></proof>
                        </goal>
                        <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="1.077007" steps="1904"/></proof>
                        </goal>
                        <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="0.157010" steps="394"/></proof>
                        </goal>
                        <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0.1.0.0.3" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="3.491024"/></proof>
                        </goal>
                        <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.0.1.0.0.4" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="0.229409" steps="370"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.1" expl="false case" proved="true">
                    <transf name="assert" proved="true" arg1="(exists p. path root p v /\ not mem2 idom_w p)">
                     <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.1.0" expl="asserted formula" proved="true">
                     <proof prover="0"><result status="valid" time="1.034979" steps="1810"/></proof>
                     </goal>
                     <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.1.1" expl="false case" proved="true">
                     <transf name="destruct_rec" proved="true" arg1="h">
                      <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.1.1.0" expl="false case" proved="true">
                      <transf name="assert" proved="true" arg1="(path root (p ++ Cons v l21) w)">
                       <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.1.1.0.0" expl="asserted formula" proved="true">
                       <proof prover="0"><result status="valid" time="1.052683" steps="1994"/></proof>
                       </goal>
                       <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.0.1.1.1.0.1" expl="false case" proved="true">
                       <proof prover="0"><result status="valid" time="41.120051" steps="87953"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.0.1.1.0.2.1.1" proved="true">
                  <proof prover="0"><result status="valid" time="3.938609" steps="8890"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="lemma5.0.1.1.1.1.1.0.0.2.1.1" proved="true">
            <proof prover="0"><result status="valid" time="1.113435" steps="2595"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Theorem2B" proved="true">
 <goal name="theorem2_b" proved="true">
 <proof prover="2"><result status="valid" time="5.566124"/></proof>
 </goal>
</theory>
<theory name="Theorem23Helper" proved="true">
 <goal name="theorem23helper" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="theorem23helper.0" proved="true">
  <transf name="case" proved="true" arg1="(v = root)">
   <goal name="theorem23helper.0.0" expl="true case" proved="true">
   <proof prover="0"><result status="valid" time="0.061239" steps="119"/></proof>
   </goal>
   <goal name="theorem23helper.0.1" expl="false case" proved="true">
   <transf name="instantiate" proved="true" arg1="ggg" arg2="(Cons root p), (fun x -&gt; (dfsnum @ x ) &lt; (dfsnum @ v))">
    <goal name="theorem23helper.0.1.0" expl="false case" proved="true">
    <transf name="destruct_rec" proved="true" arg1="Hinst">
     <goal name="theorem23helper.0.1.0.0" expl="destruct premise" proved="true">
     <transf name="exists" proved="true" arg1="root">
      <goal name="theorem23helper.0.1.0.0.0" proved="true">
      <proof prover="1"><result status="valid" time="2.839829" steps="145485"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="theorem23helper.0.1.0.1" expl="false case" proved="true">
     <transf name="right" proved="true" >
      <goal name="theorem23helper.0.1.0.1.0" expl="right case" proved="true">
      <transf name="exists" proved="true" arg1="x">
       <goal name="theorem23helper.0.1.0.1.0.0" proved="true">
       <transf name="exists" proved="true" arg1="l1">
        <goal name="theorem23helper.0.1.0.1.0.0.0" proved="true">
        <transf name="instantiate" proved="true" arg1="hhh" arg2="(l2 ++ Cons w Nil), (fun a -&gt; (--*-&gt;) dfsnum_parent v a /\ (--*-&gt;) dfsnum_parent a w)">
         <goal name="theorem23helper.0.1.0.1.0.0.0.0" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="theorem23helper.0.1.0.1.0.0.0.0.0" expl="destruct premise" proved="true">
          <transf name="exists" proved="true" arg1="w">
           <goal name="theorem23helper.0.1.0.1.0.0.0.0.0.0" proved="true">
           <proof prover="1"><result status="valid" time="0.507017" steps="51500"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="theorem23helper.0.1.0.1.0.0.0.0.1" proved="true">
          <transf name="exists" proved="true" arg1="y">
           <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0" proved="true">
           <transf name="exists" proved="true" arg1="l1">
            <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0" proved="true">
            <transf name="exists" proved="true" arg1="l2">
             <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.0" proved="true">
              <proof prover="0"><result status="valid" time="0.078769" steps="78"/></proof>
              </goal>
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1" proved="true">
              <transf name="destruct_term" proved="true" arg1="l11">
               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.0" proved="true">
               <transf name="destruct_term" proved="true" arg1="l2">
                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.0.0" proved="true">
                <transf name="assert" proved="true" arg1="(exists z l9. l2 = l9 ++ Cons z Nil)">
                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="0.498139" steps="2489"/></proof>
                 </goal>
                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.0.0.1" proved="true">
                 <proof prover="0"><result status="valid" time="4.175526" steps="22400"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.0.1" proved="true">
                <proof prover="0"><result status="valid" time="0.285962" steps="1909"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.1" proved="true">
               <transf name="destruct_term" proved="true" arg1="l2">
                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.1.0" proved="true">
                <transf name="assert" proved="true" arg1="(exists z l9. l2 = l9 ++ Cons z Nil)">
                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="0.625581" steps="4357"/></proof>
                 </goal>
                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.1.0.1" proved="true">
                 <proof prover="0"><result status="valid" time="5.371319" steps="39465"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.1.1.1" proved="true">
                <proof prover="0"><result status="valid" time="0.098844" steps="248"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.2" proved="true">
              <transf name="destruct_term" proved="true" arg1="l11">
               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.2.0" proved="true">
               <proof prover="0"><result status="valid" time="0.689473" steps="4204"/></proof>
               </goal>
               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.2.1" proved="true">
               <proof prover="0"><result status="valid" time="0.169880" steps="820"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.3" proved="true">
              <proof prover="0"><result status="valid" time="0.315529" steps="1779"/></proof>
              </goal>
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.4" proved="true">
              <proof prover="0"><result status="valid" time="0.051680" steps="56"/></proof>
              </goal>
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5" proved="true">
              <transf name="assert" proved="true" arg1="(a = w \/ mem2 a l21)">
               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5.0" expl="asserted formula" proved="true">
               <proof prover="0"><result status="valid" time="0.191300" steps="251"/></proof>
               </goal>
               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5.1" proved="true">
               <transf name="destruct_rec" proved="true" arg1="h">
                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5.1.0" proved="true">
                <proof prover="1"><result status="valid" time="4.130815" steps="251035"/></proof>
                </goal>
                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5.1.1" proved="true">
                <transf name="assert" proved="true" arg1="(mem v dfsnum_parent )">
                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5.1.1.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="0.245826" steps="1064"/></proof>
                 </goal>
                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5.1.1.1" proved="true">
                 <transf name="assert" proved="true" arg1="(mem w dfsnum_parent )">
                  <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5.1.1.1.0" expl="asserted formula" proved="true">
                  <proof prover="0"><result status="valid" time="0.281237" steps="1083"/></proof>
                  </goal>
                  <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5.1.1.1.1" proved="true">
                  <transf name="instantiate" proved="true" arg1="unnamed_a" arg2="dfsnum_parent, v, w, l">
                   <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.5.1.1.1.1.0" proved="true">
                   <proof prover="0"><result status="valid" time="0.049932" steps="66"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.6" proved="true">
              <proof prover="0"><result status="valid" time="0.053063" steps="61"/></proof>
              </goal>
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.7" proved="true">
              <proof prover="0"><result status="valid" time="0.048882" steps="56"/></proof>
              </goal>
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.8" proved="true">
              <proof prover="0"><result status="valid" time="0.052054" steps="56"/></proof>
              </goal>
              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9" proved="true">
              <transf name="assert" proved="true" arg1="((forall a. mem2 a l1 -&gt; (dfsnum @ a) &gt; (dfsnum @ y) ) \/ (exists a. mem2 a l1 /\ (dfsnum @ a) &lt;= (dfsnum @ y)))">
               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.0" expl="asserted formula" proved="true">
               <proof prover="0"><result status="valid" time="0.043834" steps="65"/></proof>
               </goal>
               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1" proved="true">
               <transf name="destruct_rec" proved="true" arg1="h">
                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.0" proved="true">
                <proof prover="0"><result status="valid" time="0.051184" steps="62"/></proof>
                </goal>
                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1" proved="true">
                <transf name="assert" proved="true" arg1="False">
                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0" expl="asserted formula" proved="true">
                 <transf name="assert" proved="true" arg1="(exists lxa lay. lxa ++ Cons a lay = l1 )">
                  <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.0" expl="asserted formula" proved="true">
                  <proof prover="0"><result status="valid" time="0.086105" steps="267"/></proof>
                  </goal>
                  <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1" expl="asserted formula" proved="true">
                  <transf name="destruct_rec" proved="true" arg1="h1">
                   <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0" expl="asserted formula" proved="true">
                   <transf name="assert" proved="true" arg1="(path x l21 w)">
                    <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.0" expl="asserted formula" proved="true">
                    <transf name="destruct_term" proved="true" arg1="l11">
                     <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.0.0" expl="asserted formula" proved="true">
                     <proof prover="0"><result status="valid" time="0.997740" steps="4312"/></proof>
                     </goal>
                     <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.0.1" expl="asserted formula" proved="true">
                     <proof prover="0"><result status="valid" time="0.096663" steps="89"/></proof>
                     <proof prover="1"><result status="valid" time="2.174593" steps="76322"/></proof>
                     <proof prover="2"><result status="valid" time="0.069444"/></proof>
                     <proof prover="5"><result status="valid" time="0.105704" steps="89"/></proof>
                     <transf name="assert" proved="true" arg1="(root = x)">
                      <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.0.1.0" expl="asserted formula" proved="true">
                      <proof prover="0"><result status="valid" time="0.087745" steps="88"/></proof>
                      </goal>
                      <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.0.1.1" expl="asserted formula" proved="true">
                      <transf name="assert" proved="true" arg1="(l21 = p)">
                       <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.0.1.1.0" expl="asserted formula" proved="true">
                       <proof prover="0"><result status="valid" time="0.103306" steps="90"/></proof>
                       </goal>
                       <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.0.1.1.1" expl="asserted formula" proved="true">
                       <proof prover="0"><result status="valid" time="0.080976" steps="62"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1" expl="asserted formula" proved="true">
                    <transf name="assert" proved="true" arg1="(path x l1 y)">
                     <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.0" expl="asserted formula" proved="true">
                     <transf name="destruct_term" proved="true" arg1="l2">
                      <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.0.0" expl="asserted formula" proved="true">
                      <transf name="assert" proved="true" arg1="(exists z l9. l2 = l9 ++ Cons z Nil)">
                       <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
                       <proof prover="0"><result status="valid" time="3.402157" steps="7360"/></proof>
                       </goal>
                       <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.0.0.1" expl="asserted formula" proved="true">
                       <transf name="destruct_rec" proved="true" arg1="h1">
                        <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.0.0.1.0" expl="asserted formula" proved="true">
                        <transf name="assert" proved="true" arg1="(z = w)">
                         <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
                         <proof prover="0"><result status="valid" time="4.380002" steps="9118"/></proof>
                         </goal>
                         <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
                         <proof prover="0"><result status="valid" time="27.080368" steps="51777"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.0.1" expl="asserted formula" proved="true">
                      <proof prover="0"><result status="valid" time="0.262482" steps="412"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1" expl="asserted formula" proved="true">
                     <transf name="assert" proved="true" arg1="(path x lxa a /\ path a lay y)">
                      <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.0" expl="asserted formula" proved="true">
                      <proof prover="0"><result status="valid" time="0.056190" steps="75"/></proof>
                      </goal>
                      <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1" expl="asserted formula" proved="true">
                      <transf name="assert" proved="true" arg1="(mem y dfsnum_parent )">
                       <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.0" expl="asserted formula" proved="true">
                       <proof prover="0"><result status="valid" time="3.413457" steps="6461"/></proof>
                       </goal>
                       <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1" expl="asserted formula" proved="true">
                       <transf name="assert" proved="true" arg1="(exists iy py. mapsto y (iy, py) dfsnum_parent )">
                        <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.0" expl="asserted formula" proved="true">
                        <proof prover="1"><result status="valid" time="0.401097" steps="38219"/></proof>
                        </goal>
                        <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1" expl="asserted formula" proved="true">
                        <transf name="assert" proved="true" arg1="(mem a dfsnum_parent )">
                         <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.0" expl="asserted formula" proved="true">
                         <proof prover="2"><result status="valid" time="2.938456"/></proof>
                         </goal>
                         <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1" expl="asserted formula" proved="true">
                         <transf name="assert" proved="true" arg1="(exists ia pa. mapsto a (ia, pa) dfsnum_parent )">
                          <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.0" expl="asserted formula" proved="true">
                          <proof prover="1"><result status="valid" time="0.387152" steps="38534"/></proof>
                          </goal>
                          <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1" expl="asserted formula" proved="true">
                          <transf name="destruct_rec" proved="true" arg1="h1">
                           <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0" expl="asserted formula" proved="true">
                           <transf name="destruct_rec" proved="true" arg1="h3">
                            <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0" expl="asserted formula" proved="true">
                            <transf name="instantiate" proved="true" arg1="lemma1" arg2="dfsnum_parent, a, ia, pa, y, iy, py, lay">
                             <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0" expl="asserted formula" proved="true">
                             <transf name="destruct_rec" proved="true" arg1="Hinst">
                              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.0" expl="destruct premise" proved="true">
                              <proof prover="0"><result status="valid" time="0.056325" steps="72"/></proof>
                              </goal>
                              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.1" expl="destruct premise" proved="true">
                              <proof prover="0"><result status="valid" time="0.060981" steps="72"/></proof>
                              </goal>
                              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.2" expl="destruct premise" proved="true">
                              <proof prover="0"><result status="valid" time="0.044209" steps="72"/></proof>
                              </goal>
                              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.3" expl="destruct premise" proved="true">
                              <proof prover="0"><result status="valid" time="0.046885" steps="72"/></proof>
                              </goal>
                              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.4" expl="destruct premise" proved="true">
                              <proof prover="0"><result status="valid" time="30.937012" steps="63549"/></proof>
                              </goal>
                              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.5" expl="destruct premise" proved="true">
                              <proof prover="0"><result status="valid" time="0.040194" steps="72"/></proof>
                              </goal>
                              <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6" expl="asserted formula" proved="true">
                              <transf name="assert" proved="true" arg1="((--*-&gt;) dfsnum_parent x y)">
                               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.0" expl="asserted formula" proved="true">
                               <proof prover="0"><result status="valid" time="0.047411" steps="78"/></proof>
                               </goal>
                               <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1" expl="asserted formula" proved="true">
                               <transf name="assert" proved="true" arg1="((--*-&gt;) dfsnum_parent x w)">
                                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.0" expl="asserted formula" proved="true">
                                <proof prover="0"><result status="valid" time="0.048155" steps="94"/></proof>
                                </goal>
                                <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1" expl="asserted formula" proved="true">
                                <transf name="assert" proved="true" arg1="((--*-&gt;) dfsnum_parent v x)">
                                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0" expl="asserted formula" proved="true">
                                 <transf name="assert" proved="true" arg1="(dfsnum x &gt;= dfsnum v)">
                                  <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.0" expl="asserted formula" proved="true">
                                  <transf name="assert" proved="true" arg1="(mem2 x l21)">
                                   <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.0.0" expl="asserted formula" proved="true">
                                   <transf name="destruct_term" proved="true" arg1="l2">
                                    <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.0.0.0" expl="asserted formula" proved="true">
                                    <transf name="assert" proved="true" arg1="(exists z l9. l2 = l9 ++ Cons z Nil)">
                                     <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
                                     <proof prover="0"><result status="valid" time="5.222212" steps="10373"/></proof>
                                     </goal>
                                     <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.0.0.0.1" expl="asserted formula" proved="true">
                                     <proof prover="2"><result status="valid" time="8.056664"/></proof>
                                     </goal>
                                    </transf>
                                    </goal>
                                    <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.0.0.1" expl="asserted formula" proved="true">
                                    <proof prover="0"><result status="valid" time="1.282223" steps="2673"/></proof>
                                    </goal>
                                   </transf>
                                   </goal>
                                   <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.0.1" expl="asserted formula" proved="true">
                                   <proof prover="0"><result status="valid" time="0.075049" steps="99"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                  <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1" expl="asserted formula" proved="true">
                                  <transf name="instantiate" proved="true" arg1="mutual_parent" arg2="dfsnum_parent, v, x, w">
                                   <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0" expl="asserted formula" proved="true">
                                   <transf name="destruct_rec" proved="true" arg1="Hinst">
                                    <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.0" expl="destruct premise" proved="true">
                                    <proof prover="0"><result status="valid" time="0.062754" steps="99"/></proof>
                                    </goal>
                                    <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.1" expl="destruct premise" proved="true">
                                    <proof prover="0"><result status="valid" time="0.309347" steps="453"/></proof>
                                    </goal>
                                    <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.2" expl="destruct premise" proved="true">
                                    <proof prover="0"><result status="valid" time="0.074030" steps="82"/></proof>
                                    </goal>
                                    <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.3" expl="asserted formula" proved="true">
                                    <proof prover="0"><result status="valid" time="0.046585" steps="84"/></proof>
                                    </goal>
                                    <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4" expl="asserted formula" proved="true">
                                    <transf name="unfold" proved="true" arg1="(--*-&gt;)" arg2="in" arg3="Hinst">
                                     <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0" expl="asserted formula" proved="true">
                                     <transf name="destruct_rec" proved="true" arg1="Hinst">
                                      <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0.0" expl="asserted formula" proved="true">
                                      <proof prover="0"><result status="valid" time="0.072146" steps="109"/></proof>
                                      </goal>
                                      <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0.1" expl="asserted formula" proved="true">
                                      <transf name="assert" proved="true" arg1="(exists iv pv. mapsto v (iv , pv) dfsnum_parent )">
                                       <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0.1.0" expl="asserted formula" proved="true">
                                       <proof prover="0"><result status="valid" time="0.668327" steps="3321"/></proof>
                                       </goal>
                                       <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0.1.1" expl="asserted formula" proved="true">
                                       <transf name="assert" proved="true" arg1="(exists ix px. mapsto x (ix , px) dfsnum_parent )">
                                        <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0.1.1.0" expl="asserted formula" proved="true">
                                        <proof prover="1"><result status="valid" time="0.517589" steps="81110"/></proof>
                                        </goal>
                                        <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0.1.1.1" expl="asserted formula" proved="true">
                                        <transf name="destruct_rec" proved="true" arg1="h1">
                                         <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0.1.1.1.0" expl="asserted formula" proved="true">
                                         <transf name="destruct_rec" proved="true" arg1="h2">
                                          <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0.1.1.1.0.0" expl="asserted formula" proved="true">
                                          <transf name="instantiate" proved="true" arg1="unnamed_a" arg2="dfsnum_parent, x, v, l, ix, px, iv, pv">
                                           <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.0.1.0.4.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
                                           <proof prover="0"><result status="valid" time="0.492149" steps="2142"/></proof>
                                           </goal>
                                          </transf>
                                          </goal>
                                         </transf>
                                         </goal>
                                        </transf>
                                        </goal>
                                       </transf>
                                       </goal>
                                      </transf>
                                      </goal>
                                     </transf>
                                     </goal>
                                    </transf>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.0.1.0.1.1.1.1.1.1.1.0.0.0.6.1.1.1" expl="asserted formula" proved="true">
                                 <proof prover="0"><result status="valid" time="0.978672" steps="1761"/></proof>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="theorem23helper.0.1.0.1.0.0.0.0.1.0.0.0.9.1.1.1" proved="true">
                 <proof prover="0"><result status="valid" time="0.043984" steps="54"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Theorem2A" proved="true">
 <goal name="theorem2_a" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="theorem2_a.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="theorem2_a.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="theorem2_a.0.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.370542" steps="49685"/></proof>
    </goal>
    <goal name="theorem2_a.0.0.1" proved="true">
    <proof prover="0"><result status="valid" time="0.056736" steps="128"/></proof>
    </goal>
    <goal name="theorem2_a.0.0.2" proved="true">
    <transf name="instantiate" proved="true" arg1="lemma3" arg2="dfsnum_parent, w, semi_w">
     <goal name="theorem2_a.0.0.2.0" proved="true">
     <transf name="destruct_rec" proved="true" arg1="Hinst">
      <goal name="theorem2_a.0.0.2.0.0" expl="destruct premise" proved="true">
      <proof prover="0"><result status="valid" time="0.047326" steps="40"/></proof>
      </goal>
      <goal name="theorem2_a.0.0.2.0.1" expl="destruct premise" proved="true">
      <proof prover="0"><result status="valid" time="0.036503" steps="40"/></proof>
      </goal>
      <goal name="theorem2_a.0.0.2.0.2" expl="destruct premise" proved="true">
      <proof prover="0"><result status="valid" time="0.040245" steps="40"/></proof>
      </goal>
      <goal name="theorem2_a.0.0.2.0.3" proved="true">
      <transf name="instantiate" proved="true" arg1="theorem23helper" arg2="dfsnum_parent, semi_w, w, p">
       <goal name="theorem2_a.0.0.2.0.3.0" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Hinst">
        <goal name="theorem2_a.0.0.2.0.3.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.043078" steps="42"/></proof>
        </goal>
        <goal name="theorem2_a.0.0.2.0.3.0.1" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.044825" steps="42"/></proof>
        </goal>
        <goal name="theorem2_a.0.0.2.0.3.0.2" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.052981" steps="43"/></proof>
        </goal>
        <goal name="theorem2_a.0.0.2.0.3.0.3" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.040179" steps="42"/></proof>
        </goal>
        <goal name="theorem2_a.0.0.2.0.3.0.4" proved="true">
        <transf name="eliminate_let" proved="true" >
         <goal name="theorem2_a.0.0.2.0.3.0.4.0" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="theorem2_a.0.0.2.0.3.0.4.0.0" proved="true">
          <proof prover="0"><result status="valid" time="0.061292" steps="179"/></proof>
          </goal>
          <goal name="theorem2_a.0.0.2.0.3.0.4.0.1" proved="true">
          <transf name="assert" proved="true" arg1="(y = semi_w)">
           <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0" expl="asserted formula" proved="true">
           <transf name="case" proved="true" arg1="(y = root)">
            <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.0" expl="true case (asserted formula)" proved="true">
            <transf name="assert" proved="true" arg1="(semi_w = root)">
             <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.0.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="0.100341" steps="472"/></proof>
             <proof prover="1"><result status="valid" time="0.225473" steps="40598"/></proof>
             </goal>
             <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.0.1" expl="true case (asserted formula)" proved="true">
             <proof prover="0"><result status="valid" time="0.046235" steps="60"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1" expl="false case (asserted formula)" proved="true">
            <transf name="instantiate" proved="true" arg1="min_semi_exists" arg2="dfsnum_parent, y">
             <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0" expl="false case (asserted formula)" proved="true">
             <transf name="destruct_rec" proved="true" arg1="Hinst">
              <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.0" expl="destruct premise" proved="true">
              <proof prover="0"><result status="valid" time="0.053040" steps="58"/></proof>
              </goal>
              <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.1" expl="destruct premise" proved="true">
              <proof prover="0"><result status="valid" time="0.039782" steps="58"/></proof>
              </goal>
              <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.2" expl="destruct premise" proved="true">
              <proof prover="0"><result status="valid" time="0.046245" steps="58"/></proof>
              </goal>
              <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.3" expl="destruct premise" proved="true">
              <proof prover="0"><result status="valid" time="0.051250" steps="58"/></proof>
              </goal>
              <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4" expl="false case (asserted formula)" proved="true">
              <transf name="assert" proved="true" arg1="((++&gt;) dfsnum_parent x y)">
               <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.0" expl="asserted formula" proved="true">
               <transf name="unfold" proved="true" arg1="(++&gt;)">
                <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.0.0" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.0.0.0" proved="true">
                 <proof prover="0"><result status="valid" time="0.049692" steps="60"/></proof>
                 </goal>
                 <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.0.0.1" proved="true">
                 <proof prover="0"><result status="valid" time="0.045535" steps="60"/></proof>
                 </goal>
                 <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.0.0.2" proved="true">
                 <proof prover="0"><result status="valid" time="0.046535" steps="60"/></proof>
                 </goal>
                 <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.0.0.3" proved="true">
                 <proof prover="0"><result status="valid" time="0.047814" steps="60"/></proof>
                 <proof prover="1"><result status="valid" time="0.074555" steps="28848"/></proof>
                 <proof prover="2"><result status="valid" time="0.045207"/></proof>
                 </goal>
                 <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.0.0.4" proved="true">
                 <proof prover="0"><result status="valid" time="0.100017" steps="299"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1" expl="false case (asserted formula)" proved="true">
               <transf name="assert" proved="true" arg1="(exists i_semi_y p_semi_y. mapsto semi_x (i_semi_y, p_semi_y) dfsnum_parent )">
                <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.0" expl="asserted formula" proved="true">
                <proof prover="1"><result status="valid" time="3.534233" steps="280750"/></proof>
                <proof prover="2"><result status="valid" time="0.652785"/></proof>
                </goal>
                <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1" expl="false case (asserted formula)" proved="true">
                <transf name="destruct_rec" proved="true" arg1="h1">
                 <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0" expl="false case (asserted formula)" proved="true">
                 <transf name="assert" proved="true" arg1="(exists ix, px. mapsto x (ix ,px ) dfsnum_parent )">
                  <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.0" expl="asserted formula" proved="true">
                  <proof prover="1"><result status="valid" time="0.278266" steps="38552"/></proof>
                  </goal>
                  <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1" expl="false case (asserted formula)" proved="true">
                  <transf name="destruct_rec" proved="true" arg1="h1">
                   <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0" expl="false case (asserted formula)" proved="true">
                   <transf name="assert" proved="true" arg1="(i_semi_y &lt;= ix)">
                    <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.0" expl="asserted formula" proved="true">
                    <proof prover="0"><result status="valid" time="1.430135" steps="5329"/></proof>
                    </goal>
                    <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1" expl="false case (asserted formula)" proved="true">
                    <transf name="assert" proved="true" arg1="(ix &lt; i_semi_w)">
                     <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.0" expl="asserted formula" proved="true">
                     <proof prover="0"><result status="valid" time="0.305279" steps="1244"/></proof>
                     </goal>
                     <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1" expl="false case (asserted formula)" proved="true">
                     <transf name="case" proved="true" arg1="(y = semi_w)">
                      <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.0" expl="false case (true case. asserted formula)" proved="true">
                      <proof prover="0"><result status="valid" time="0.049391" steps="72"/></proof>
                      </goal>
                      <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1" expl="false case (asserted formula)" proved="true">
                      <transf name="instantiate" proved="true" arg1="H1" arg2="y, semi_x">
                       <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1.0" expl="false case (asserted formula)" proved="true">
                       <transf name="destruct_rec" proved="true" arg1="Hinst">
                        <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1.0.0" expl="destruct premise" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1.0.0.0" proved="true">
                         <proof prover="0"><result status="valid" time="0.104011" steps="296"/></proof>
                         <proof prover="1"><result status="valid" time="0.190892" steps="37151"/></proof>
                         <proof prover="2"><result status="valid" time="0.527174"/></proof>
                         <transf name="unfold" proved="true" arg1="(--*-&gt;)" arg2="in" arg3="Hinst3">
                          <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1.0.0.0.0" proved="true">
                          <transf name="destruct_rec" proved="true" arg1="Hinst3">
                           <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1.0.0.0.0.0" proved="true">
                           <proof prover="0"><result status="valid" time="0.050017" steps="71"/></proof>
                           <proof prover="1"><result status="valid" time="0.072675" steps="28938"/></proof>
                           <proof prover="2"><result status="valid" time="0.042164"/></proof>
                           </goal>
                           <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1.0.0.0.0.1" proved="true">
                           <proof prover="0"><result status="valid" time="0.100293" steps="76"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1.0.0.1" proved="true">
                         <proof prover="0"><result status="valid" time="0.086698" steps="72"/></proof>
                         <proof prover="1"><result status="valid" time="0.079421" steps="28911"/></proof>
                         <proof prover="2"><result status="valid" time="0.039067"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1.0.1" expl="destruct premise" proved="true">
                        <proof prover="0"><result status="valid" time="0.054158" steps="72"/></proof>
                        </goal>
                        <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.0.1.0.4.1.1.0.1.0.1.1.1.0.2" expl="false case (asserted formula)" proved="true">
                        <proof prover="0"><result status="valid" time="0.083404" steps="144"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="theorem2_a.0.0.2.0.3.0.4.0.1.1" proved="true">
           <proof prover="2"><result status="valid" time="3.335318"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Theorem2" proved="true">
 <goal name="theorem2" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="theorem2.0" proved="true">
  <transf name="assert" proved="true" arg1="(semi_w ~~&gt; w)">
   <goal name="theorem2.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="2.815994" steps="239468"/></proof>
   </goal>
   <goal name="theorem2.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(forall idom_w. idom_w ~&gt; w -&gt; (--*-&gt;) dfsnum_parent idom_w semi_w)">
    <goal name="theorem2.0.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.042860" steps="47"/></proof>
    </goal>
    <goal name="theorem2.0.1.1" proved="true">
    <transf name="assert" proved="true" arg1="(exists idom_w. idom_w ~&gt; w)">
     <goal name="theorem2.0.1.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.247650" steps="1280"/></proof>
     </goal>
     <goal name="theorem2.0.1.1.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="theorem2.0.1.1.1.0" proved="true">
      <transf name="instantiate" proved="true" arg1="h1" arg2="idom_w">
       <goal name="theorem2.0.1.1.1.0.0" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Hinst">
        <goal name="theorem2.0.1.1.1.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.040618" steps="42"/></proof>
        </goal>
        <goal name="theorem2.0.1.1.1.0.0.1" proved="true">
        <transf name="unfold" proved="true" arg1="(--*-&gt;)" arg2="in" arg3="Hinst">
         <goal name="theorem2.0.1.1.1.0.0.1.0" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="theorem2.0.1.1.1.0.0.1.0.0" proved="true">
          <proof prover="0"><result status="valid" time="0.037041" steps="46"/></proof>
          </goal>
          <goal name="theorem2.0.1.1.1.0.0.1.0.1" proved="true">
          <transf name="assert" proved="true" arg1="(exists l2. (--+-&gt;) dfsnum_parent semi_w l2 w)">
           <goal name="theorem2.0.1.1.1.0.0.1.0.1.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.066404" steps="161"/></proof>
           </goal>
           <goal name="theorem2.0.1.1.1.0.0.1.0.1.1" proved="true">
           <transf name="destruct_rec" proved="true" arg1="h">
            <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0" proved="true">
            <transf name="case" proved="true" arg1="(idom_w = root )">
             <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.0" expl="true case" proved="true">
             <transf name="instantiate" proved="true" arg1="idom_is_the_last" arg2="w, idom_w, (l ++ Cons semi_w l2), (Nil : list vertex), (l ++ Cons semi_w l2), semi_w">
              <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.0.0" expl="true case" proved="true">
              <transf name="destruct_rec" proved="true" arg1="Hinst">
               <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.0.0.0" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.051283" steps="48"/></proof>
               </goal>
               <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.0.0.1" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.157912" steps="815"/></proof>
               </goal>
               <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.0.0.2" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.086467" steps="57"/></proof>
               </goal>
               <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.0.0.3" expl="destruct premise" proved="true">
               <proof prover="1"><result status="valid" time="2.250956" steps="196535"/></proof>
               <proof prover="2"><result status="valid" time="0.488154"/></proof>
               </goal>
               <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.0.0.4" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.102014" steps="189"/></proof>
               </goal>
               <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.0.0.5" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.036362" steps="48"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1" expl="false case" proved="true">
             <transf name="assert" proved="true" arg1="(exists l1. (--+-&gt;) dfsnum_parent root l1 idom_w)">
              <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.0" expl="asserted formula" proved="true">
              <proof prover="0"><result status="valid" time="3.720552" steps="12266"/></proof>
              <proof prover="1"><result status="valid" time="0.599650" steps="80298"/></proof>
              </goal>
              <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.1" expl="false case" proved="true">
              <transf name="destruct_rec" proved="true" arg1="h">
               <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.1.0" expl="false case" proved="true">
               <transf name="instantiate" proved="true" arg1="idom_is_the_last" arg2="w, idom_w, (l1 ++ Cons idom_w l ++ Cons semi_w l2), (Cons root l1), (l ++ Cons semi_w l2), semi_w">
                <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.1.0.0" expl="false case" proved="true">
                <transf name="destruct_rec" proved="true" arg1="Hinst">
                 <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.1.0.0.0" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.046603" steps="50"/></proof>
                 </goal>
                 <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.1.0.0.1" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.206473" steps="999"/></proof>
                 </goal>
                 <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.1.0.0.2" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.052108" steps="74"/></proof>
                 </goal>
                 <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.1.0.0.3" expl="destruct premise" proved="true">
                 <proof prover="0" obsolete="true"><result status="failure" time="0.000000"/></proof>
                 <proof prover="1" obsolete="true"><result status="failure" time="0.000000"/></proof>
                 <proof prover="2"><result status="valid" time="16.159422"/></proof>
                 </goal>
                 <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.1.0.0.4" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.073484" steps="192"/></proof>
                 </goal>
                 <goal name="theorem2.0.1.1.1.0.0.1.0.1.1.0.1.1.0.0.5" expl="destruct premise" proved="true">
                 <proof prover="0"><result status="valid" time="0.043883" steps="50"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Theorem3" proved="true">
 <goal name="theorem3" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="theorem3.0" proved="true">
  <transf name="assert" proved="true" arg1="((dfsnum @ semi_u) &lt;= (dfsnum @ semi_w))">
   <goal name="theorem3.0.0" expl="asserted formula" proved="true">
   <transf name="instantiate" proved="true" arg1="H" arg2="u">
    <goal name="theorem3.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="timeout" time="120.000000" steps="496404"/></proof>
    <proof prover="1"><result status="valid" time="0.214212" steps="40634"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="theorem3.0.1" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="theorem3.0.1.0" proved="true">
    <proof prover="0"><result status="valid" time="0.039644" steps="46"/></proof>
    </goal>
    <goal name="theorem3.0.1.1" proved="true">
    <transf name="unfold" proved="true" arg1="(--*-&gt;)" arg2="in" arg3="H3">
     <goal name="theorem3.0.1.1.0" proved="true">
     <transf name="destruct_rec" proved="true" arg1="H3">
      <goal name="theorem3.0.1.1.0.0" proved="true">
      <proof prover="0"><result status="valid" time="0.043512" steps="55"/></proof>
      </goal>
      <goal name="theorem3.0.1.1.0.1" proved="true">
      <transf name="instantiate" proved="true" arg1="lemma5" arg2="dfsnum_parent, u, w, idom_w, idom_u, l">
       <goal name="theorem3.0.1.1.0.1.0" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Hinst">
        <goal name="theorem3.0.1.1.0.1.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.052762" steps="50"/></proof>
        </goal>
        <goal name="theorem3.0.1.1.0.1.0.1" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.049983" steps="50"/></proof>
        </goal>
        <goal name="theorem3.0.1.1.0.1.0.2" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.037944" steps="50"/></proof>
        </goal>
        <goal name="theorem3.0.1.1.0.1.0.3" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.049082" steps="50"/></proof>
        </goal>
        <goal name="theorem3.0.1.1.0.1.0.4" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.039612" steps="50"/></proof>
        </goal>
        <goal name="theorem3.0.1.1.0.1.0.5" proved="true">
        <transf name="assert" proved="true" arg1="False">
         <goal name="theorem3.0.1.1.0.1.0.5.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent idom_w l u)">
          <goal name="theorem3.0.1.1.0.1.0.5.0.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="timeout" time="120.000000" steps="480202"/></proof>
          <proof prover="1"><result status="valid" time="14.072676" steps="459189"/></proof>
          <proof prover="2"><result status="valid" time="5.899773"/></proof>
          </goal>
          <goal name="theorem3.0.1.1.0.1.0.5.0.1" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="26.061329" steps="108456"/></proof>
          <proof prover="1"><result status="timeout" time="120.000000" steps="4853479"/></proof>
          <proof prover="2"><result status="timeout" time="120.000000"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="theorem3.0.1.1.0.1.0.5.1" proved="true">
         <proof prover="0"><result status="valid" time="0.047378" steps="52"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="theorem3.0.1.1.0.1.0.6" proved="true">
        <transf name="unfold" proved="true" arg1="(--*-&gt;)" arg2="in" arg3="Hinst">
         <goal name="theorem3.0.1.1.0.1.0.6.0" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="theorem3.0.1.1.0.1.0.6.0.0" proved="true">
          <proof prover="0"><result status="valid" time="0.066931" steps="54"/></proof>
          </goal>
          <goal name="theorem3.0.1.1.0.1.0.6.0.1" proved="true">
          <transf name="assert" proved="true" arg1="(idom_u ~~&gt; w)">
           <goal name="theorem3.0.1.1.0.1.0.6.0.1.0" expl="asserted formula" proved="true">
           <transf name="inline_goal" proved="true" >
            <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0" expl="asserted formula" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.0" proved="true">
             <proof prover="0"><result status="valid" time="0.070468" steps="183"/></proof>
             </goal>
             <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.1" proved="true">
             <proof prover="0"><result status="valid" time="0.044938" steps="52"/></proof>
             </goal>
             <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2" proved="true">
             <transf name="instantiate" proved="true" arg1="theorem23helper" arg2="dfsnum_parent, idom_u, w, p">
              <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0" proved="true">
              <transf name="destruct_rec" proved="true" arg1="Hinst">
               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.0" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.042308" steps="54"/></proof>
               </goal>
               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.1" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.068247" steps="54"/></proof>
               </goal>
               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.2" expl="destruct premise" proved="true">
               <proof prover="0"><result status="timeout" time="120.000000" steps="471561"/></proof>
               <proof prover="1"><result status="timeout" time="120.000000" steps="1495912"/></proof>
               <proof prover="2"><result status="valid" time="1.792237"/></proof>
               </goal>
               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.3" expl="destruct premise" proved="true">
               <proof prover="0"><result status="valid" time="0.040864" steps="54"/></proof>
               </goal>
               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4" proved="true">
               <transf name="eliminate_let" proved="true" >
                <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0" proved="true">
                <transf name="destruct_rec" proved="true" arg1="Hinst">
                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.0" proved="true">
                 <proof prover="0"><result status="valid" time="0.085016" steps="230"/></proof>
                 </goal>
                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1" proved="true">
                 <transf name="instantiate" proved="true" arg1="min_semi_exists" arg2="dfsnum_parent, y">
                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0" proved="true">
                  <transf name="destruct_rec" proved="true" arg1="Hinst">
                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.0" expl="destruct premise" proved="true">
                   <proof prover="0"><result status="valid" time="0.048590" steps="68"/></proof>
                   </goal>
                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.1" expl="destruct premise" proved="true">
                   <proof prover="0"><result status="valid" time="0.037587" steps="68"/></proof>
                   </goal>
                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.2" expl="destruct premise" proved="true">
                   <proof prover="0"><result status="valid" time="0.046830" steps="68"/></proof>
                   </goal>
                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.3" expl="destruct premise" proved="true">
                   <proof prover="0"><result status="valid" time="0.809050" steps="4385"/></proof>
                   </goal>
                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4" proved="true">
                   <transf name="pose" proved="true" arg1="semi_y" arg2="semi_x">
                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0" proved="true">
                    <transf name="subst" proved="true" arg1="semi_x">
                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0" proved="true">
                     <transf name="assert" proved="true" arg1="(exists i_semi_y p_semi_y. mapsto semi_y (i_semi_y, p_semi_y) dfsnum_parent)">
                      <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.0" expl="asserted formula" proved="true">
                      <proof prover="1"><result status="valid" time="28.966470" steps="838281"/></proof>
                      <proof prover="2"><result status="valid" time="0.663660"/></proof>
                      </goal>
                      <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1" proved="true">
                      <transf name="destruct_rec" proved="true" arg1="h1">
                       <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0" proved="true">
                       <transf name="assert" proved="true" arg1="(exists i_idom_u p_idom_u. mapsto idom_u (i_idom_u , p_idom_u) dfsnum_parent)">
                        <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
                        <proof prover="0"><result status="valid" time="0.425122" steps="2340"/></proof>
                        </goal>
                        <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1" proved="true">
                        <transf name="destruct_rec" proved="true" arg1="h1">
                         <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0" proved="true">
                         <transf name="assert" proved="true" arg1="(i_semi_y &lt; i_idom_u)">
                          <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
                          <transf name="assert" proved="true" arg1="((++&gt;) dfsnum_parent x y)">
                           <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
                           <proof prover="1"><result status="valid" time="1.950918" steps="168160"/></proof>
                           </goal>
                           <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.0.1" expl="asserted formula" proved="true">
                           <proof prover="1"><result status="valid" time="1.292391" steps="99339"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1" proved="true">
                          <transf name="assert" proved="true" arg1="((not mem2 y (l2 ++ Cons w Nil)) )">
                           <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
                           <transf name="assert" proved="true" arg1="((not mem2 y (l2 ++ Cons w Nil)) \/ (mem2 y (l2 ++ Cons w Nil)))">
                            <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.0" expl="asserted formula" proved="true">
                            <proof prover="0"><result status="valid" time="0.051624" steps="76"/></proof>
                            </goal>
                            <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1" expl="asserted formula" proved="true">
                            <transf name="destruct_rec" proved="true" arg1="h1">
                             <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
                             <proof prover="0"><result status="valid" time="0.048951" steps="78"/></proof>
                             </goal>
                             <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1" expl="asserted formula" proved="true">
                             <transf name="assert" proved="true" arg1="False">
                              <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0" expl="asserted formula" proved="true">
                              <transf name="instantiate" proved="true" arg1="H3" arg2="y">
                               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0" expl="asserted formula" proved="true">
                               <transf name="destruct_rec" proved="true" arg1="Hinst">
                                <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.0" expl="destruct premise" proved="true">
                                <transf name="split_vc" proved="true" >
                                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.0.0" proved="true">
                                 <transf name="assert" proved="true" arg1="((mem2 y l2) \/ y = w)">
                                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
                                  <proof prover="0"><result status="valid" time="0.121690" steps="404"/></proof>
                                  </goal>
                                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.0.0.1" proved="true">
                                  <transf name="destruct_rec" proved="true" arg1="h">
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.0.0.1.0" proved="true">
                                   <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent u l y)">
                                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
                                    <proof prover="0"><result status="valid" time="0.130274" steps="441"/></proof>
                                    </goal>
                                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.0.0.1.0.1" proved="true">
                                    <proof prover="0"><result status="timeout" time="120.000000" steps="526757"/></proof>
                                    <proof prover="1"><result status="timeout" time="120.000000" steps="1028345"/></proof>
                                    <proof prover="2"><result status="valid" time="5.974883"/></proof>
                                    </goal>
                                   </transf>
                                   </goal>
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.0.0.1.1" proved="true">
                                   <proof prover="0"><result status="valid" time="0.140990" steps="479"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.0.1" proved="true">
                                 <proof prover="0"><result status="valid" time="0.091830" steps="78"/></proof>
                                 </goal>
                                </transf>
                                </goal>
                                <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.1" expl="asserted formula" proved="true">
                                <transf name="instantiate" proved="true" arg1="Hinst" arg2="semi_y">
                                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.1.0" expl="asserted formula" proved="true">
                                 <transf name="destruct_rec" proved="true" arg1="Hinst">
                                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.1.0.0" expl="destruct premise" proved="true">
                                  <proof prover="0"><result status="valid" time="0.076678" steps="78"/></proof>
                                  </goal>
                                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.1.0.1" expl="asserted formula" proved="true">
                                  <transf name="assert" proved="true" arg1="((semi_u = idom_u) \/ (exists l. (--+-&gt;) dfsnum_parent idom_u l semi_u))">
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.1.0.1.0" expl="asserted formula" proved="true">
                                   <proof prover="0"><result status="valid" time="3.482929" steps="8201"/></proof>
                                   <proof prover="1"><result status="valid" time="0.672579" steps="75341"/></proof>
                                   </goal>
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.1.0.1.1" expl="asserted formula" proved="true">
                                   <proof prover="2"><result status="timeout" time="120.000000"/></proof>
                                   <transf name="destruct_rec" proved="true" arg1="h1">
                                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
                                    <proof prover="1"><result status="valid" time="0.352217" steps="46758"/></proof>
                                    </goal>
                                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.0.0.1.0.1.1.1" expl="asserted formula" proved="true">
                                    <proof prover="0"><result status="valid" time="1.742601" steps="8970"/></proof>
                                    <proof prover="1"><result status="timeout" time="120.000000" steps="1880252"/></proof>
                                    <proof prover="2"><result status="timeout" time="120.000000"/></proof>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.0.1.1.1" expl="asserted formula" proved="true">
                              <proof prover="0"><result status="valid" time="0.047740" steps="78"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1" proved="true">
                           <transf name="case" proved="true" arg1="(idom_u = y)">
                            <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.0" expl="true case" proved="true">
                            <transf name="subst" proved="true" arg1="idom_u">
                             <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.0.0" expl="true case" proved="true">
                             <transf name="clear_but" proved="true" arg1="h1, Hinst10">
                              <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.0.0.0" expl="true case" proved="true">
                              <proof prover="0"><result status="timeout" time="120.000000" steps="759363"/></proof>
                              <proof prover="1"><result status="valid" time="25.132660" steps="605353"/></proof>
                              <proof prover="2"><result status="valid" time="8.983838"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1" expl="false case" proved="true">
                            <transf name="case" proved="true" arg1="(y = u)">
                             <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.0" expl="false case (true case)" proved="true">
                             <proof prover="0"><result status="valid" time="2.966466" steps="11171"/></proof>
                             <proof prover="2"><result status="timeout" time="120.000000"/></proof>
                             </goal>
                             <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1" expl="false case" proved="true">
                             <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent idom_u l y)">
                              <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.0" expl="asserted formula" proved="true">
                              <proof prover="0"><result status="valid" time="0.124619" steps="382"/></proof>
                              </goal>
                              <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1" expl="false case" proved="true">
                              <transf name="destruct_rec" proved="true" arg1="h1">
                               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0" expl="false case" proved="true">
                               <transf name="remove" proved="true" arg1="Hinst3">
                                <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0" expl="false case" proved="true">
                                <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent semi_y l idom_u)">
                                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.0" expl="asserted formula" proved="true">
                                 <transf name="instantiate" proved="true" arg1="mutual_parent" arg2="dfsnum_parent, idom_u, semi_y, y">
                                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
                                  <transf name="destruct_rec" proved="true" arg1="Hinst">
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.0.0.0" expl="destruct premise" proved="true">
                                   <proof prover="0"><result status="valid" time="0.068975" steps="88"/></proof>
                                   </goal>
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.0.0.1" expl="destruct premise" proved="true">
                                   <proof prover="0"><result status="valid" time="0.134707" steps="379"/></proof>
                                   </goal>
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.0.0.2" expl="destruct premise" proved="true">
                                   <proof prover="0"><result status="valid" time="0.135306" steps="383"/></proof>
                                   </goal>
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.0.0.3" expl="asserted formula" proved="true">
                                   <proof prover="0"><result status="valid" time="0.507481" steps="1817"/></proof>
                                   </goal>
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.0.0.4" expl="asserted formula" proved="true">
                                   <proof prover="0"><result status="valid" time="0.497412" steps="1801"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1" expl="false case" proved="true">
                                 <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent idom_u l u)">
                                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.0" expl="asserted formula" proved="true">
                                  <proof prover="0"><result status="valid" time="24.395977" steps="91655"/></proof>
                                  <proof prover="1"><result status="valid" time="0.480996" steps="73968"/></proof>
                                  </goal>
                                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1" expl="false case" proved="true">
                                  <transf name="destruct_rec" proved="true" arg1="h1">
                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0" expl="false case" proved="true">
                                   <transf name="assert" proved="true" arg1="(not mem2 y l)">
                                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0" expl="asserted formula" proved="true">
                                    <transf name="assert" proved="true" arg1="(mem2 y l \/ not mem2 y l)">
                                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
                                     <proof prover="0"><result status="valid" time="0.037570" steps="88"/></proof>
                                     </goal>
                                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1" expl="asserted formula" proved="true">
                                     <transf name="destruct_rec" proved="true" arg1="h1">
                                      <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0" expl="asserted formula" proved="true">
                                      <transf name="assert" proved="true" arg1="False">
                                       <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0" expl="asserted formula" proved="true">
                                       <transf name="assert" proved="true" arg1="(exists l6 lyu. l6 ++ Cons y lyu = l)">
                                        <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
                                        <proof prover="0"><result status="valid" time="0.160345" steps="435"/></proof>
                                        </goal>
                                        <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1" expl="asserted formula" proved="true">
                                        <transf name="destruct_rec" proved="true" arg1="h1">
                                         <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
                                         <transf name="unfold" proved="true" arg1="(+&gt;)" arg2="in" arg3="Hinst">
                                          <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
                                          <transf name="destruct" proved="true" arg1="Hinst">
                                           <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
                                           <transf name="unfold" proved="true" arg1="(++&gt;)" arg2="in" arg3="Hinst1">
                                            <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
                                            <transf name="destruct_rec" proved="true" arg1="Hinst1">
                                             <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
                                             <transf name="case" proved="true" arg1="(semi_y = root )">
                                              <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
                                              <transf name="assert" proved="true" arg1="(path root (p ++ Cons y lyu) u)">
                                               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                                               <proof prover="0"><result status="valid" time="0.635478" steps="2701"/></proof>
                                               </goal>
                                               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.0.1" expl="true case (asserted formula)" proved="true">
                                               <proof prover="1"><result status="valid" time="47.694509" steps="878071"/></proof>
                                               <transf name="assert" arg1="(not mem2 idom_u (p ++ Cons y lyu))">
                                                <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.0.1.0" expl="asserted formula">
                                                <proof prover="1"><result status="timeout" time="120.000000" steps="1750944"/></proof>
                                                </goal>
                                                <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.0.1.1" expl="true case (asserted formula)" proved="true">
                                                <proof prover="0"><result status="valid" time="5.371855" steps="16335"/></proof>
                                                <proof prover="1"><result status="valid" time="20.023513" steps="633609"/></proof>
                                                </goal>
                                               </transf>
                                               </goal>
                                              </transf>
                                              </goal>
                                              <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
                                              <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent root l semi_y)">
                                               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                                               <proof prover="0"><result status="timeout" time="120.000000" steps="537216"/></proof>
                                               <proof prover="1"><result status="valid" time="5.385730" steps="336217"/></proof>
                                               <proof prover="2"><result status="valid" time="0.454102"/></proof>
                                               </goal>
                                               <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
                                               <transf name="destruct_rec" proved="true" arg1="h1">
                                                <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0" expl="false case (asserted formula)" proved="true">
                                                <transf name="assert" proved="true" arg1="(path root (l ++ Cons semi_y p ++ Cons y lyu) u)">
                                                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
                                                 <proof prover="0"><result status="valid" time="0.929140" steps="3861"/></proof>
                                                 </goal>
                                                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1" expl="false case (asserted formula)" proved="true">
                                                 <transf name="assert" proved="true" arg1="(not mem2 idom_u ((l ++ Cons semi_y p) ++ Cons y lyu))">
                                                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1.0" expl="asserted formula" proved="true">
                                                  <transf name="assert" proved="true" arg1="(not mem2 idom_u p)">
                                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1.0.0" expl="asserted formula" proved="true">
                                                   <transf name="assert" proved="true" arg1="(exists iy py. mapsto y (iy, py) dfsnum_parent)">
                                                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1.0.0.0" expl="asserted formula" proved="true">
                                                    <proof prover="0"><result status="valid" time="1.345675" steps="5676"/></proof>
                                                    </goal>
                                                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1.0.0.1" expl="asserted formula" proved="true">
                                                    <transf name="destruct_rec" proved="true" arg1="h1">
                                                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1.0.0.1.0" expl="asserted formula" proved="true">
                                                     <transf name="assert" proved="true" arg1="(iy &gt;= i_idom_u)">
                                                      <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
                                                      <proof prover="0"><result status="valid" time="0.088460" steps="119"/></proof>
                                                      </goal>
                                                      <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
                                                      <proof prover="0"><result status="valid" time="1.186662" steps="3568"/></proof>
                                                      </goal>
                                                     </transf>
                                                     </goal>
                                                    </transf>
                                                    </goal>
                                                   </transf>
                                                   </goal>
                                                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1.0.1" expl="asserted formula" proved="true">
                                                   <proof prover="2"><result status="valid" time="1.337644"/></proof>
                                                   </goal>
                                                  </transf>
                                                  </goal>
                                                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.0.1.0.0.0.0.0.1.1.0.1.1" expl="false case (asserted formula)" proved="true">
                                                  <proof prover="0"><result status="valid" time="6.262284" steps="17653"/></proof>
                                                  </goal>
                                                 </transf>
                                                 </goal>
                                                </transf>
                                                </goal>
                                               </transf>
                                               </goal>
                                              </transf>
                                              </goal>
                                             </transf>
                                             </goal>
                                            </transf>
                                            </goal>
                                           </transf>
                                           </goal>
                                          </transf>
                                          </goal>
                                         </transf>
                                         </goal>
                                        </transf>
                                        </goal>
                                       </transf>
                                       </goal>
                                       <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.0.1" expl="asserted formula" proved="true">
                                       <proof prover="0"><result status="valid" time="0.056737" steps="90"/></proof>
                                       </goal>
                                      </transf>
                                      </goal>
                                      <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.0.1.1" expl="asserted formula" proved="true">
                                      <proof prover="0"><result status="valid" time="0.045700" steps="90"/></proof>
                                      </goal>
                                     </transf>
                                     </goal>
                                    </transf>
                                    </goal>
                                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1" expl="false case" proved="true">
                                    <transf name="unfold" proved="true" arg1="(--*-&gt;)" arg2="in" arg3="Hinst2">
                                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1.0" expl="false case" proved="true">
                                     <transf name="destruct_rec" proved="true" arg1="Hinst2">
                                      <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1.0.0" expl="false case" proved="true">
                                      <proof prover="0"><result status="valid" time="0.144463" steps="472"/></proof>
                                      </goal>
                                      <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1.0.1" expl="false case" proved="true">
                                      <transf name="assert" proved="true" arg1="((--+-&gt;) dfsnum_parent idom_u (l1 ++ Cons y l2) w)">
                                       <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1.0.1.0" expl="asserted formula" proved="true">
                                       <proof prover="0"><result status="valid" time="0.066011" steps="97"/></proof>
                                       </goal>
                                       <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1.0.1.1" expl="false case" proved="true">
                                       <transf name="assert" proved="true" arg1="((--+-&gt;) dfsnum_parent idom_u (l ++ Cons u l5) w)">
                                        <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1.0.1.1.0" expl="asserted formula" proved="true">
                                        <proof prover="0"><result status="valid" time="0.069825" steps="103"/></proof>
                                        </goal>
                                        <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1.0.1.1.1" expl="false case" proved="true">
                                        <transf name="assert" proved="true" arg1="((l1 ++ Cons y l2) = (l ++ Cons u l5))">
                                         <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1.0.1.1.1.0" expl="asserted formula" proved="true">
                                         <proof prover="0"><result status="valid" time="0.695583" steps="2249"/></proof>
                                         </goal>
                                         <goal name="theorem3.0.1.1.0.1.0.6.0.1.0.0.2.0.4.0.1.0.4.0.0.1.0.1.0.1.1.1.1.1.0.0.1.1.0.1.0.1.1.1.1" expl="false case" proved="true">
                                         <proof prover="0"><result status="timeout" time="120.000000" steps="521752"/></proof>
                                         <proof prover="1"><result status="timeout" time="120.000000" steps="1037464"/></proof>
                                         <proof prover="2"><result status="valid" time="1.468239"/></proof>
                                         </goal>
                                        </transf>
                                        </goal>
                                       </transf>
                                       </goal>
                                      </transf>
                                      </goal>
                                     </transf>
                                     </goal>
                                    </transf>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="theorem3.0.1.1.0.1.0.6.0.1.1" proved="true">
           <proof prover="0"><result status="timeout" time="120.000000" steps="489914"/></proof>
           <proof prover="1"><result status="timeout" time="120.000000" steps="1422641"/></proof>
           <proof prover="2"><result status="timeout" time="120.000000"/></proof>
           <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent idom_w l w)">
            <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.0" expl="asserted formula" proved="true">
            <proof prover="0"><result status="valid" time="1.835517" steps="7349"/></proof>
            </goal>
            <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1" proved="true">
            <transf name="destruct_rec" proved="true" arg1="h">
             <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0" proved="true">
             <transf name="assert" proved="true" arg1="((exists l. (--+-&gt;) dfsnum_parent idom_u l w) \/ (exists l. (--+-&gt;) dfsnum_parent w l idom_u))">
              <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.0" expl="asserted formula" proved="true">
              <proof prover="2"><result status="valid" time="0.922812"/></proof>
              </goal>
              <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1" proved="true">
              <transf name="destruct_rec" proved="true" arg1="h">
               <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0" proved="true">
               <transf name="remove" proved="true" arg1="h1">
                <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0" proved="true">
                <transf name="case" proved="true" arg1="(idom_w  = root)">
                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.0" expl="true case" proved="true">
                 <transf name="subst" proved="true" arg1="idom_w">
                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.0.0" expl="true case" proved="true">
                  <transf name="instantiate" proved="true" arg1="idom_is_the_last" arg2="w, root, (l2 ++ Cons idom_u l), (Nil: list vertex), (Cons idom_u l), idom_u">
                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.0.0.0" expl="true case" proved="true">
                   <transf name="destruct_rec" proved="true" arg1="Hinst">
                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
                    <proof prover="0"><result status="valid" time="0.050400" steps="56"/></proof>
                    </goal>
                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.0.0.0.1" expl="destruct premise" proved="true">
                    <proof prover="0"><result status="valid" time="0.185143" steps="668"/></proof>
                    </goal>
                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.0.0.0.2" expl="destruct premise" proved="true">
                    <proof prover="1"><result status="valid" time="4.316901" steps="234664"/></proof>
                    </goal>
                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.0.0.0.3" expl="destruct premise" proved="true">
                    <proof prover="0"><result status="valid" time="0.630871" steps="2389"/></proof>
                    </goal>
                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.0.0.0.4" expl="destruct premise" proved="true">
                    <proof prover="0"><result status="valid" time="0.069583" steps="59"/></proof>
                    </goal>
                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.0.0.0.5" expl="destruct premise" proved="true">
                    <proof prover="0"><result status="valid" time="0.043552" steps="56"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1" expl="false case" proved="true">
                 <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent root l idom_w)">
                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.0" expl="asserted formula" proved="true">
                  <proof prover="0"><result status="valid" time="2.937257" steps="12021"/></proof>
                  <proof prover="1"><result status="valid" time="0.999906" steps="122917"/></proof>
                  </goal>
                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.1" expl="false case" proved="true">
                  <transf name="destruct_rec" proved="true" arg1="h">
                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.1.0" expl="false case" proved="true">
                   <transf name="instantiate" proved="true" arg1="idom_is_the_last" arg2="w, idom_w, (l ++ Cons idom_w l3 ++ Cons idom_u l1), (Cons root l), (l3 ++ Cons idom_u l1), idom_u">
                    <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.1.0.0" expl="false case" proved="true">
                    <transf name="destruct_rec" proved="true" arg1="Hinst">
                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.1.0.0.0" expl="destruct premise" proved="true">
                     <proof prover="0"><result status="valid" time="0.076172" steps="60"/></proof>
                     </goal>
                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.1.0.0.1" expl="destruct premise" proved="true">
                     <proof prover="0"><result status="valid" time="0.284644" steps="1181"/></proof>
                     </goal>
                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.1.0.0.2" expl="destruct premise" proved="true">
                     <proof prover="0"><result status="valid" time="0.065263" steps="80"/></proof>
                     </goal>
                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.1.0.0.3" expl="destruct premise" proved="true">
                     <proof prover="0"><result status="failure" time="0.000000"/></proof>
                     <proof prover="1"><result status="failure" time="0.000000"/></proof>
                     <proof prover="2"><result status="valid" time="12.511363"/></proof>
                     </goal>
                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.1.0.0.4" expl="destruct premise" proved="true">
                     <proof prover="0"><result status="valid" time="0.090385" steps="222"/></proof>
                     </goal>
                     <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.0.0.1.1.0.0.5" expl="destruct premise" proved="true">
                     <proof prover="0"><result status="valid" time="0.078650" steps="60"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.1" proved="true">
               <transf name="remove" proved="true" arg1="Hinst">
                <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.1.0" proved="true">
                <transf name="assert" proved="true" arg1="(exists l. (--+-&gt;) dfsnum_parent root l w)">
                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.1.0.0" expl="asserted formula" proved="true">
                 <proof prover="0"><result status="valid" time="2.347550" steps="9654"/></proof>
                 </goal>
                 <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.1.0.1" proved="true">
                 <transf name="destruct_rec" proved="true" arg1="h">
                  <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.1.0.1.0" proved="true">
                  <transf name="assert" proved="true" arg1="(not mem2 idom_u l)">
                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.1.0.1.0.0" expl="asserted formula" proved="true">
                   <proof prover="0"><result status="valid" time="0.622126" steps="2988"/></proof>
                   </goal>
                   <goal name="theorem3.0.1.1.0.1.0.6.0.1.1.1.0.1.1.0.1.0.1" proved="true">
                   <proof prover="0"><result status="valid" time="4.330369" steps="18257"/></proof>
                   <proof prover="2"><result status="valid" time="0.398042"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Corollary1" proved="true">
 <goal name="corollary1" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="corollary1.0" proved="true">
  <transf name="instantiate" proved="true" arg1="theorem3" arg2="dfsnum_parent, w, semi_w, u, semi_u">
   <goal name="corollary1.0.0" proved="true">
   <transf name="destruct_rec" proved="true" arg1="Hinst">
    <goal name="corollary1.0.0.0" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.049984" steps="46"/></proof>
    </goal>
    <goal name="corollary1.0.0.1" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.040557" steps="46"/></proof>
    </goal>
    <goal name="corollary1.0.0.2" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.044854" steps="46"/></proof>
    </goal>
    <goal name="corollary1.0.0.3" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.037967" steps="46"/></proof>
    </goal>
    <goal name="corollary1.0.0.4" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.046582" steps="46"/></proof>
    </goal>
    <goal name="corollary1.0.0.5" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.053124" steps="48"/></proof>
    </goal>
    <goal name="corollary1.0.0.6" proved="true">
    <transf name="assert" proved="true" arg1="(exists i_semi_w p_semi_w. mapsto semi_w (i_semi_w, p_semi_w) dfsnum_parent )">
     <goal name="corollary1.0.0.6.0" expl="asserted formula" proved="true">
     <proof prover="0"><undone/></proof>
     <proof prover="1"><result status="valid" time="0.312496" steps="45089"/></proof>
     </goal>
     <goal name="corollary1.0.0.6.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="corollary1.0.0.6.1.0" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="corollary1.0.0.6.1.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="corollary1.0.0.6.1.0.0.0" proved="true">
        <transf name="instantiate" proved="true" arg1="theorem2" arg2="dfsnum_parent, w, semi_w, i_semi_w, p_semi_w">
         <goal name="corollary1.0.0.6.1.0.0.0.0" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="corollary1.0.0.6.1.0.0.0.0.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.073112" steps="50"/></proof>
          </goal>
          <goal name="corollary1.0.0.6.1.0.0.0.0.1" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.043090" steps="50"/></proof>
          </goal>
          <goal name="corollary1.0.0.6.1.0.0.0.0.2" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.054267" steps="50"/></proof>
          </goal>
          <goal name="corollary1.0.0.6.1.0.0.0.0.3" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.046551" steps="50"/></proof>
          </goal>
          <goal name="corollary1.0.0.6.1.0.0.0.0.4" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.538749" steps="2053"/></proof>
          </goal>
          <goal name="corollary1.0.0.6.1.0.0.0.0.5" proved="true">
          <proof prover="0"><result status="valid" time="0.051273" steps="52"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="corollary1.0.0.6.1.0.0.1" proved="true">
        <transf name="eliminate_let" proved="true" >
         <goal name="corollary1.0.0.6.1.0.0.1.0" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="corollary1.0.0.6.1.0.0.1.0.0" expl="destruct premise" proved="true">
          <proof prover="0"><result status="valid" time="0.377121" steps="1905"/></proof>
          </goal>
          <goal name="corollary1.0.0.6.1.0.0.1.0.1" proved="true">
          <proof prover="0"><undone/></proof>
          <proof prover="1"><result status="valid" time="14.357679" steps="451422"/></proof>
          <proof prover="2"><result status="valid" time="0.531852"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="LengauerTarjan">
 <goal name="dfs&#39;vc" expl="VC for dfs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="dfs&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.024691" steps="22"/></proof>
  </goal>
  <goal name="dfs&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.036411" steps="40"/></proof>
  </goal>
  <goal name="dfs&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.026112" steps="34"/></proof>
  </goal>
  <goal name="dfs&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.019841" steps="30"/></proof>
  </goal>
  <goal name="dfs&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.024936" steps="30"/></proof>
  </goal>
  <goal name="dfs&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.046444" steps="167"/></proof>
  </goal>
  <goal name="dfs&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.036913" steps="51"/></proof>
  </goal>
  <goal name="dfs&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.032983" steps="47"/></proof>
  </goal>
  <goal name="dfs&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.033114" steps="32"/></proof>
  </goal>
  <goal name="dfs&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.059953" steps="195"/></proof>
  </goal>
  <goal name="dfs&#39;vc.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.429782" steps="1041"/></proof>
  </goal>
  <goal name="dfs&#39;vc.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.753188" steps="1531"/></proof>
  </goal>
  <goal name="dfs&#39;vc.12" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.243543" steps="661"/></proof>
  </goal>
  <goal name="dfs&#39;vc.13" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.594926" steps="5436"/></proof>
  </goal>
  <goal name="dfs&#39;vc.14" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.171957" steps="592"/></proof>
  </goal>
  <goal name="dfs&#39;vc.15" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="dfs&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="dfs&#39;vc.15.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.037013" steps="46"/></proof>
    </goal>
    <goal name="dfs&#39;vc.15.0.1" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="1.017391" steps="2469"/></proof>
    </goal>
    <goal name="dfs&#39;vc.15.0.2" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="4.352073" steps="10437"/></proof>
    </goal>
    <goal name="dfs&#39;vc.15.0.3" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.258682" steps="902"/></proof>
    </goal>
    <goal name="dfs&#39;vc.15.0.4" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="54.555729" steps="1209858"/></proof>
    </goal>
    <goal name="dfs&#39;vc.15.0.5" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="9.086629" steps="18574"/></proof>
    </goal>
    <goal name="dfs&#39;vc.15.0.6" expl="assertion" proved="true">
    <transf name="case" proved="true" arg1="(i = sn -1)">
     <goal name="dfs&#39;vc.15.0.6.0" expl="true case (assertion)" proved="true">
     <proof prover="0"><result status="valid" time="1.946879" steps="4923"/></proof>
     </goal>
     <goal name="dfs&#39;vc.15.0.6.1" expl="false case (assertion)" proved="true">
     <transf name="assert" proved="true" arg1="(exists x:vertex, p:vertex. mapsto x (i, p) dfsnum_parent)">
      <goal name="dfs&#39;vc.15.0.6.1.0" expl="asserted formula" proved="true">
      <transf name="unfold" proved="true" arg1="wf_dfsnum_parent" arg2="in" arg3="Requires7">
       <goal name="dfs&#39;vc.15.0.6.1.0.0" expl="asserted formula" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Requires7">
        <goal name="dfs&#39;vc.15.0.6.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="eliminate_let" proved="true" >
         <goal name="dfs&#39;vc.15.0.6.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Requires7">
          <goal name="dfs&#39;vc.15.0.6.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="Requires8">
           <goal name="dfs&#39;vc.15.0.6.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.054873" steps="198"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="dfs&#39;vc.15.0.6.1.1" expl="false case (assertion)" proved="true">
      <proof prover="0"><result status="valid" time="0.060838" steps="195"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="dfs&#39;vc.15.0.7" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.905301" steps="2698"/></proof>
    </goal>
    <goal name="dfs&#39;vc.15.0.8" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="1.158611" steps="2814"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.152799" steps="565"/></proof>
  </goal>
  <goal name="dfs&#39;vc.17" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.104161" steps="331"/></proof>
  </goal>
  <goal name="dfs&#39;vc.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.064651" steps="201"/></proof>
  </goal>
  <goal name="dfs&#39;vc.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.044192" steps="60"/></proof>
  </goal>
  <goal name="dfs&#39;vc.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.029911" steps="38"/></proof>
  </goal>
  <goal name="dfs&#39;vc.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.704173" steps="1713"/></proof>
  </goal>
  <goal name="dfs&#39;vc.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.066295" steps="61"/></proof>
  </goal>
  <goal name="dfs&#39;vc.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.041155" steps="58"/></proof>
  </goal>
  <goal name="dfs&#39;vc.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.093724" steps="298"/></proof>
  </goal>
  <goal name="dfs&#39;vc.25" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(w = z)">
   <goal name="dfs&#39;vc.25.0" expl="true case (precondition)" proved="true">
   <proof prover="0"><result status="valid" time="31.744371" steps="111550"/></proof>
   </goal>
   <goal name="dfs&#39;vc.25.1" expl="false case (precondition)" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="120.000000" steps="572517"/></proof>
   <transf name="assert" proved="true" arg1="(mapsto v (iv, pv) dfsnum_parent /\ mapsto w (iw, pw) dfsnum_parent)">
    <goal name="dfs&#39;vc.25.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.547170" steps="1258"/></proof>
    </goal>
    <goal name="dfs&#39;vc.25.1.1" expl="false case (precondition)" proved="true">
    <proof prover="0"><result status="valid" time="1.691141" steps="2624"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.26" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(b = z)">
   <goal name="dfs&#39;vc.26.0" expl="true case (precondition)" proved="true">
   <proof prover="0"><result status="valid" time="0.786921" steps="1745"/></proof>
   </goal>
   <goal name="dfs&#39;vc.26.1" expl="false case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(mapsto b (ib, pb) dfsnum_parent /\ mapsto a (ia, pa) dfsnum_parent )">
    <goal name="dfs&#39;vc.26.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.883062" steps="2002"/></proof>
    </goal>
    <goal name="dfs&#39;vc.26.1.1" expl="false case (precondition)" proved="true">
    <proof prover="0"><result status="valid" time="13.293279" steps="28142"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.27" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(c = z)">
   <goal name="dfs&#39;vc.27.0" expl="true case (precondition)" proved="true">
   <proof prover="0"><result status="valid" time="7.604717" steps="14590"/></proof>
   </goal>
   <goal name="dfs&#39;vc.27.1" expl="false case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(mapsto c (ic, pc) dfsnum_parent /\ mapsto a (ia, pa) dfsnum_parent /\ mapsto b (ib, pb) dfsnum_parent)">
    <goal name="dfs&#39;vc.27.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.641889" steps="2103"/></proof>
    </goal>
    <goal name="dfs&#39;vc.27.1.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="((--+-&gt;) dfsnum_parent a lac c)">
     <goal name="dfs&#39;vc.27.1.1.0" expl="asserted formula" proved="true">
     <proof prover="0" obsolete="true"><result status="failure" time="0.000000"/></proof>
     <proof prover="2"><result status="valid" time="26.013895"/></proof>
     </goal>
     <goal name="dfs&#39;vc.27.1.1.1" expl="false case (precondition)" proved="true">
     <proof prover="0"><result status="valid" time="11.109786" steps="18604"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfs&#39;vc.28" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.324397" steps="835"/></proof>
  </goal>
  <goal name="dfs&#39;vc.29" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.196492" steps="365"/></proof>
  </goal>
  <goal name="dfs&#39;vc.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.031148" steps="46"/></proof>
  </goal>
  <goal name="dfs&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.425461" steps="1068"/></proof>
  </goal>
  <goal name="dfs&#39;vc.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.045522" steps="57"/></proof>
  </goal>
  <goal name="dfs&#39;vc.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.426243" steps="1634"/></proof>
  </goal>
  <goal name="dfs&#39;vc.34" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="9.029429" steps="252154"/></proof>
  </goal>
  <goal name="dfs&#39;vc.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.077290" steps="66"/></proof>
  </goal>
  <goal name="dfs&#39;vc.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.356323" steps="639"/></proof>
  </goal>
  <goal name="dfs&#39;vc.37" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.445115" steps="943"/></proof>
  </goal>
  <goal name="dfs&#39;vc.38" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.395449" steps="5589"/></proof>
  </goal>
  <goal name="dfs&#39;vc.39" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.553699" steps="3235"/></proof>
  </goal>
  <goal name="dfs&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.300152" steps="992"/></proof>
  </goal>
  <goal name="dfs&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.113015" steps="367"/></proof>
  </goal>
  <goal name="dfs&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.269943" steps="828"/></proof>
  </goal>
  <goal name="dfs&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.706757" steps="1641"/></proof>
  </goal>
  <goal name="dfs&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.550615" steps="9942"/></proof>
  </goal>
  <goal name="dfs&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="5.253895" steps="13645"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_parent&#39;vc" expl="VC for dfsnum_parent" proved="true">
 <transf name="split_goal_full" proved="true" >
  <goal name="dfsnum_parent&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.028050" steps="14"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.039781" steps="14"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.2" expl="precondition" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="dfsnum_parent&#39;vc.2.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="dfsnum_parent&#39;vc.2.0.0" expl="precondition" proved="true">
    <transf name="split_goal_full" proved="true" >
     <goal name="dfsnum_parent&#39;vc.2.0.0.0" expl="VC for dfsnum_parent" proved="true">
     <proof prover="0"><result status="valid" time="0.052700" steps="168"/></proof>
     </goal>
     <goal name="dfsnum_parent&#39;vc.2.0.0.1" expl="VC for dfsnum_parent" proved="true">
     <proof prover="0"><result status="valid" time="0.074529" steps="236"/></proof>
     </goal>
     <goal name="dfsnum_parent&#39;vc.2.0.0.2" expl="VC for dfsnum_parent" proved="true">
     <proof prover="0"><result status="valid" time="0.077052" steps="214"/></proof>
     </goal>
     <goal name="dfsnum_parent&#39;vc.2.0.0.3" expl="VC for dfsnum_parent" proved="true">
     <proof prover="0"><result status="valid" time="0.066983" steps="215"/></proof>
     </goal>
     <goal name="dfsnum_parent&#39;vc.2.0.0.4" expl="VC for dfsnum_parent" proved="true">
     <proof prover="0"><result status="valid" time="0.067862" steps="190"/></proof>
     </goal>
     <goal name="dfsnum_parent&#39;vc.2.0.0.5" expl="VC for dfsnum_parent" proved="true">
     <proof prover="0"><result status="valid" time="0.077529" steps="249"/></proof>
     </goal>
     <goal name="dfsnum_parent&#39;vc.2.0.0.6" expl="VC for dfsnum_parent" proved="true">
     <proof prover="0"><result status="valid" time="3.162179" steps="15381"/></proof>
     </goal>
     <goal name="dfsnum_parent&#39;vc.2.0.0.7" expl="VC for dfsnum_parent" proved="true">
     <proof prover="0"><result status="valid" time="0.075265" steps="242"/></proof>
     </goal>
     <goal name="dfsnum_parent&#39;vc.2.0.0.8" expl="VC for dfsnum_parent" proved="true">
     <proof prover="0"><result status="valid" time="0.083980" steps="299"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfsnum_parent&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.073342" steps="219"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.050402" steps="32"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.036195" steps="28"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.054366" steps="102"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.205217" steps="369"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.262405" steps="577"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.451867" steps="923"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_a">
 <proof prover="0" obsolete="true"><result status="timeout" time="182.679950" steps="1654832"/></proof>
 </goal>
 <goal name="dfsnum_property_b">
 <proof prover="0"><result status="timeout" time="168.567242" steps="759494"/></proof>
 </goal>
 <goal name="dfsnum_property_e">
 <transf name="introduce_premises" >
  <goal name="dfsnum_property_e.0">
  <transf name="case" arg1="(x = root)">
   <goal name="dfsnum_property_e.0.0" expl="true case">
   <transf name="subst_all" >
    <goal name="dfsnum_property_e.0.0.0" expl="true case">
    <proof prover="0" obsolete="true"><result status="timeout" time="120.000000" steps="877140"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="dfsnum_property_e.0.1" expl="false case">
   <proof prover="0" obsolete="true"><result status="failure" time="0.000000"/></proof>
   <proof prover="1" obsolete="true"><result status="failure" time="0.000000"/></proof>
   <proof prover="2" obsolete="true"><result status="failure" time="0.000000"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_c">
 </goal>
 <goal name="dfsnum_property_g">
 </goal>
 <goal name="semi_dominator_less_equal_than_parent">
 </goal>
 <goal name="dfsnum_property_d">
 <proof prover="0" obsolete="true"><result status="timeout" time="120.000000" steps="849214"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="120.000000" steps="3199292"/></proof>
 </goal>
 <goal name="dfsnum_property_h">
 </goal>
</theory>
<theory name="Jiqian" proved="true">
 <goal name="ss" proved="true">
 <proof prover="0"><result status="valid" time="0.041405" steps="252"/></proof>
 </goal>
 <goal name="tt" proved="true">
 <proof prover="0"><result status="valid" time="0.013701" steps="6"/></proof>
 </goal>
 <goal name="gg" proved="true">
 <proof prover="0"><result status="valid" time="0.013103" steps="14"/></proof>
 </goal>
</theory>
<theory name="SingintonFmap" proved="true">
 <goal name="unique" proved="true">
 <proof prover="0"><result status="valid" time="0.023282" steps="24"/></proof>
 </goal>
</theory>
<theory name="FmapInductionA" proved="true">
 <goal name="InductionNodeMem.base" proved="true">
 <proof prover="0"><result status="timeout" time="120.000000" steps="662405"/></proof>
 <proof prover="1"><result status="timeout" time="120.000000" steps="3072878"/></proof>
 <proof prover="2"><result status="timeout" time="120.000000"/></proof>
 <transf name="inline_goal" proved="true" >
  <goal name="base.0" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="base.0.0" proved="true">
   <transf name="assert" proved="true" arg1="(exists k v. mapsto k v x)">
    <goal name="base.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.030760" steps="86"/></proof>
    </goal>
    <goal name="base.0.0.1" proved="true">
    <proof prover="0"><result status="timeout" time="120.000000" steps="758443"/></proof>
    <transf name="inline_goal" proved="true" >
     <goal name="base.0.0.1.0" proved="true">
     <transf name="introduce_premises" proved="true" >
      <goal name="base.0.0.1.0.0" proved="true">
      <transf name="destruct_rec" proved="true" arg1="h">
       <goal name="base.0.0.1.0.0.0" proved="true">
       <proof prover="0"><result status="timeout" time="120.000000" steps="794439"/></proof>
       <transf name="exists" proved="true" arg1="k">
        <goal name="base.0.0.1.0.0.0.0" proved="true">
        <proof prover="0"><result status="timeout" time="120.000000" steps="798371"/></proof>
        <transf name="split_vc" proved="true" >
         <goal name="base.0.0.1.0.0.0.0.0" proved="true">
         <transf name="destruct_term" proved="true" arg1="v">
          <goal name="base.0.0.1.0.0.0.0.0.0" proved="true">
          <proof prover="0"><result status="valid" time="0.030871" steps="75"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionNodeMem.induction_step" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="induction_step.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="induction_step.0.0" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="induction_step.0.0.0" proved="true">
    <transf name="assert" proved="true" arg1="(exists g k v. size g + 1 = size x /\ add k v g = x)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.039841" steps="193"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1" proved="true">
     <transf name="destruct_rec" proved="true" arg1="h">
      <goal name="induction_step.0.0.0.1.0" proved="true">
      <transf name="assert" proved="true" arg1="((exists v1:vertex, iv:int, pv:vertex. mapsto v1 (iv, pv) g /\ (forall x1:vertex, ix:int, px:vertex. mapsto x1 (ix, px) g -&gt; iv &lt;= ix)))">
       <goal name="induction_step.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.047697" steps="172"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1" proved="true">
       <transf name="destruct_rec" proved="true" arg1="h">
        <goal name="induction_step.0.0.0.1.0.1.0" proved="true">
        <transf name="destruct_term" proved="true" arg1="v">
         <goal name="induction_step.0.0.0.1.0.1.0.0" proved="true">
         <transf name="subst" proved="true" arg1="v">
          <goal name="induction_step.0.0.0.1.0.1.0.0.0" proved="true">
          <transf name="assert" proved="true" arg1="(x1 &lt;= iv \/ x1 &gt; iv)">
           <goal name="induction_step.0.0.0.1.0.1.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.024325" steps="14"/></proof>
           </goal>
           <goal name="induction_step.0.0.0.1.0.1.0.0.0.1" proved="true">
           <transf name="destruct" proved="true" arg1="h">
            <goal name="induction_step.0.0.0.1.0.1.0.0.0.1.0" proved="true">
            <transf name="exists" proved="true" arg1="k">
             <goal name="induction_step.0.0.0.1.0.1.0.0.0.1.0.0" proved="true">
             <transf name="exists" proved="true" arg1="x1">
              <goal name="induction_step.0.0.0.1.0.1.0.0.0.1.0.0.0" proved="true">
              <transf name="exists" proved="true" arg1="x">
               <goal name="induction_step.0.0.0.1.0.1.0.0.0.1.0.0.0.0" proved="true">
               <proof prover="0"><result status="valid" time="0.187450" steps="1498"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.0.0.1.1" proved="true">
            <transf name="exists" proved="true" arg1="v1">
             <goal name="induction_step.0.0.0.1.0.1.0.0.0.1.1.0" proved="true">
             <transf name="exists" proved="true" arg1="iv">
              <goal name="induction_step.0.0.0.1.0.1.0.0.0.1.1.0.0" proved="true">
              <transf name="exists" proved="true" arg1="pv">
               <goal name="induction_step.0.0.0.1.0.1.0.0.0.1.1.0.0.0" proved="true">
               <proof prover="0"><result status="valid" time="0.165060" steps="1254"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="MinExists" proved="true">
 <goal name="min_exists" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="min_exists.0" proved="true">
  <transf name="assert" proved="true" arg1="(p2 (size dfsnum_parent - 1))">
   <goal name="min_exists.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.024534" steps="38"/></proof>
   </goal>
   <goal name="min_exists.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.023441" steps="92"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Graph">
 <goal name="dfsnum_parent&#39;vc" expl="VC for dfsnum_parent">
 <transf name="split_goal_full" >
  <goal name="dfsnum_parent&#39;vc.0" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.050894" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.1" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.137870" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.2" expl="precondition">
  <transf name="inline_goal" >
   <goal name="dfsnum_parent&#39;vc.2.0" expl="precondition">
   <transf name="split_goal_full" >
    <goal name="dfsnum_parent&#39;vc.2.0.0" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.059974" steps="137"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.1" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.091463" steps="238"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.2" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.073331" steps="235"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.3" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.080904" steps="198"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.4" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.084584" steps="189"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.5" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.080374" steps="284"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.6" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.579266" steps="4866"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.7" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.076530" steps="238"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.8" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.086494" steps="271"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.9" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.056557" steps="28"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.10" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.091107" steps="34"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.11" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.085048" steps="34"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.12" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.056197" steps="30"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.13" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.043499" steps="34"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.14" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.052670" steps="42"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.15" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.053726" steps="34"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.16" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.078667" steps="32"/></proof>
    </goal>
    <goal name="dfsnum_parent&#39;vc.2.0.17" expl="VC for dfsnum_parent">
    <proof prover="0"><result status="valid" time="0.049935" steps="32"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="dfsnum_parent&#39;vc.3" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.195920" steps="235"/></proof>
  <proof prover="1" timelimit="100"><result status="valid" time="0.380176" steps="50924"/></proof>
  <proof prover="4"><result status="valid" time="0.113848" steps="305730"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.4" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.072869" steps="30"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.5" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.057307" steps="32"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.6" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.047008" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.7" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.059732" steps="40"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.8" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.092685" steps="213"/></proof>
  <proof prover="1" timelimit="100"><result status="valid" time="0.228878" steps="42568"/></proof>
  <proof prover="4"><result status="valid" time="0.117486" steps="278344"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.9" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.043569" steps="16"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.10" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.143044" steps="421"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.11" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.149798" steps="495"/></proof>
  </goal>
  <goal name="dfsnum_parent&#39;vc.12" expl="precondition">
  <proof prover="0" timelimit="100"><result status="valid" time="0.342047" steps="1182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_h">
 <proof prover="0" timelimit="100"><result status="valid" time="21.633466" steps="73216"/></proof>
 </goal>
 <goal name="dfsnum_property_j">
 <proof prover="0" timelimit="100"><result status="valid" time="23.220247" steps="65926"/></proof>
 </goal>
 <goal name="dfsnum_property_a">
 <proof prover="0" timelimit="100"><result status="valid" time="29.942839" steps="102596"/></proof>
 </goal>
 <goal name="dfsnum_property_e">
 <proof prover="0" timelimit="100"><result status="valid" time="48.939301" steps="195464"/></proof>
 </goal>
 <goal name="dfsnum_property_d">
 <transf name="induction_pr" >
  <goal name="dfsnum_property_d.0">
  <proof prover="0" timelimit="100"><result status="valid" time="0.221401" steps="206"/></proof>
  <proof prover="1" timelimit="100"><result status="valid" time="0.251331" steps="42411"/></proof>
  </goal>
  <goal name="dfsnum_property_d.1">
  <proof prover="0" timelimit="100"><result status="valid" time="0.138992" steps="123"/></proof>
  <proof prover="1" timelimit="100"><result status="valid" time="0.371778" steps="42763"/></proof>
  <proof prover="3"><result status="valid" time="0.522067" steps="57586"/></proof>
  <transf name="introduce_premises" >
   <goal name="dfsnum_property_d.1.0">
   <proof prover="0" timelimit="100"><result status="valid" time="0.163815" steps="139"/></proof>
   <proof prover="1" timelimit="100"><result status="valid" time="0.350560" steps="46947"/></proof>
   <proof prover="3"><result status="valid" time="0.445897" steps="61884"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_c">
 <proof prover="0" timelimit="100"><result status="valid" time="0.284833" steps="850"/></proof>
 </goal>
 <goal name="dfsnum_property_g">
 <proof prover="0" timelimit="100"><result status="valid" time="0.248636" steps="411"/></proof>
 </goal>
 <goal name="lemma2_helper_a">
 <proof prover="0" timelimit="100"><result status="valid" time="0.503775" steps="1041"/></proof>
 </goal>
 <goal name="lemma2_helper_b">
 <proof prover="0" timelimit="100"><result status="valid" time="6.537653" steps="17443"/></proof>
 </goal>
 <goal name="lemma2">
 <proof prover="0" timelimit="100"><result status="valid" time="0.199834" steps="647"/></proof>
 </goal>
 <goal name="InductionLemma1Helper.base">
 <transf name="inline_goal" >
  <goal name="base.0">
  <transf name="introduce_premises" >
   <goal name="base.0.0">
   <transf name="exists" arg1="(Nil : list vertex)">
    <goal name="base.0.0.0">
    <transf name="exists" arg1="l">
     <goal name="base.0.0.0.0">
     <transf name="exists" arg1="a">
      <goal name="base.0.0.0.0.0">
      <transf name="exists" arg1="ia">
       <goal name="base.0.0.0.0.0.0">
       <transf name="exists" arg1="pa">
        <goal name="base.0.0.0.0.0.0.0">
        <transf name="split_goal_full" >
         <goal name="base.0.0.0.0.0.0.0.0">
         <proof prover="0" timelimit="100"><result status="valid" time="0.059994" steps="41"/></proof>
         </goal>
         <goal name="base.0.0.0.0.0.0.0.1">
         <proof prover="0" timelimit="100"><result status="valid" time="0.051059" steps="26"/></proof>
         </goal>
         <goal name="base.0.0.0.0.0.0.0.2">
         <proof prover="0" timelimit="100"><result status="valid" time="0.055423" steps="26"/></proof>
         </goal>
         <goal name="base.0.0.0.0.0.0.0.3">
         <proof prover="0" timelimit="100"><result status="valid" time="0.090979" steps="160"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1Helper.induction_step">
 <transf name="introduce_premises" >
  <goal name="induction_step.0">
  <transf name="inline_goal" >
   <goal name="induction_step.0.0">
   <transf name="introduce_premises" >
    <goal name="induction_step.0.0.0">
    <transf name="assert" arg1="(exists l5 d . l = l5 ++ Cons d Nil)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula">
     <proof prover="1" timelimit="100"><result status="valid" time="0.787325" steps="69126"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1">
     <transf name="destruct_rec" arg1="h">
      <goal name="induction_step.0.0.0.1.0">
      <transf name="assert" arg1="(exists id pd. mapsto d (id , pd) dfsnum_parent)">
       <goal name="induction_step.0.0.0.1.0.0" expl="asserted formula">
       <proof prover="0" timelimit="100"><result status="valid" time="26.582014" steps="89581"/></proof>
       <proof prover="1" timelimit="100"><result status="valid" time="1.633184" steps="99392"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1">
       <transf name="destruct_rec" arg1="h">
        <goal name="induction_step.0.0.0.1.0.1.0">
        <transf name="assert" arg1="(id &lt; t \/ id &gt;= t)">
         <goal name="induction_step.0.0.0.1.0.1.0.0" expl="asserted formula">
         <proof prover="0" timelimit="100"><result status="valid" time="0.058681" steps="36"/></proof>
         </goal>
         <goal name="induction_step.0.0.0.1.0.1.0.1">
         <transf name="destruct" arg1="h">
          <goal name="induction_step.0.0.0.1.0.1.0.1.0">
          <proof prover="0" timelimit="100"><result status="valid" time="0.511588" steps="900"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.1.0.1.1">
          <transf name="unfold" arg1="p_lemma1_helper" arg2="in" arg3="H4">
           <goal name="induction_step.0.0.0.1.0.1.0.1.1.0">
           <transf name="instantiate" arg1="H4" arg2="l5, a, ia, pa, t">
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0">
            <transf name="assert" arg1="((exists l1:list vertex, l2:list vertex, b:vertex, ib:int, pb1:vertex. Cons a l5 = (l1 ++ Cons b l2) /\ mapsto b (ib, pb1) dfsnum_parent /\ ib &lt; t /\ (forall x:vertex, ix:int, px:vertex. mem2 x l2 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= t)))">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.0" expl="asserted formula">
             <proof prover="0" timelimit="100"><result status="valid" time="0.549568" steps="1348"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1">
             <transf name="destruct_rec" arg1="h">
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0">
              <transf name="subst_all" >
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0">
               <transf name="exists" arg1="l1">
                <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0">
                <transf name="exists" arg1="(l2 ++ Cons d Nil)">
                 <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0.0">
                 <transf name="exists" arg1="b">
                  <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0.0.0">
                  <transf name="exists" arg1="ib">
                   <goal name="induction_step.0.0.0.1.0.1.0.1.1.0.0.1.0.0.0.0.0.0">
                   <proof prover="0" timelimit="100"><result status="valid" time="5.770778" steps="19465"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1_helper">
 <transf name="introduce_premises" >
  <goal name="lemma1_helper.0">
  <transf name="assert" arg1="(p_lemma1_helper (length l))">
   <goal name="lemma1_helper.0.0" expl="asserted formula">
   <proof prover="0" timelimit="100"><result status="valid" time="0.071338" steps="43"/></proof>
   </goal>
   <goal name="lemma1_helper.0.1">
   <transf name="unfold" arg1="p_lemma1_helper" arg2="in" arg3="h">
    <goal name="lemma1_helper.0.1.0">
    <transf name="instantiate" arg1="h" arg2="l, a, ia, pa">
     <goal name="lemma1_helper.0.1.0.0">
     <transf name="apply" arg1="Hinst">
      <goal name="lemma1_helper.0.1.0.0.0" expl="apply premises">
      <proof prover="0" timelimit="100"><result status="valid" time="0.057008" steps="26"/></proof>
      </goal>
      <goal name="lemma1_helper.0.1.0.0.1" expl="apply premises">
      <proof prover="0" timelimit="100"><result status="valid" time="0.080267" steps="42"/></proof>
      </goal>
      <goal name="lemma1_helper.0.1.0.0.2" expl="apply premises">
      <proof prover="0" timelimit="100"><result status="valid" time="0.070656" steps="26"/></proof>
      </goal>
      <goal name="lemma1_helper.0.1.0.0.3" expl="apply premises">
      <proof prover="0" timelimit="100"><result status="valid" time="0.064685" steps="26"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1_helper_b">
 <transf name="introduce_premises" >
  <goal name="lemma1_helper_b.0">
  <transf name="assert" arg1="(v = root \/ exists l2. path root l2 v)">
   <goal name="lemma1_helper_b.0.0" expl="asserted formula">
   <proof prover="0" timelimit="100"><result status="valid" time="0.526992" steps="794"/></proof>
   </goal>
   <goal name="lemma1_helper_b.0.1">
   <transf name="assert" arg1="(exists l3. path v l3 x)">
    <goal name="lemma1_helper_b.0.1.0" expl="asserted formula">
    <proof prover="0" timelimit="100"><result status="valid" time="0.334138" steps="348"/></proof>
    </goal>
    <goal name="lemma1_helper_b.0.1.1">
    <proof prover="1" timelimit="100"><result status="valid" time="47.786523" steps="1074880"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionK.base">
 <proof prover="0" timelimit="100"><result status="valid" time="0.394867" steps="590"/></proof>
 </goal>
 <goal name="InductionK.induction_step">
 <transf name="introduce_premises" >
  <goal name="induction_step.0">
  <transf name="inline_goal" >
   <goal name="induction_step.0.0">
   <transf name="introduce_premises" >
    <goal name="induction_step.0.0.0">
    <transf name="assert" arg1="(exists u l1 . path v l1 u /\ edge u w /\ l1 ++ Cons u Nil = l)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula">
     <proof prover="0" timelimit="100"><result status="valid" time="0.301801" steps="335"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1">
     <transf name="destruct_rec" arg1="h">
      <goal name="induction_step.0.0.0.1.0">
      <transf name="case" arg1="(v = u)">
       <goal name="induction_step.0.0.0.1.0.0" expl="true case">
       <proof prover="0" timelimit="100"><result status="valid" time="0.232896" steps="205"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1" expl="false case">
       <transf name="unfold" arg1="p_dfsnum_property_k" arg2="in" arg3="H6">
        <goal name="induction_step.0.0.0.1.0.1.0" expl="false case">
        <transf name="assert" arg1="(exists iu pu. mapsto u (iu, pu) dfsnum_parent)">
         <goal name="induction_step.0.0.0.1.0.1.0.0" expl="asserted formula">
         <proof prover="1" timelimit="100"><result status="valid" time="7.086635" steps="251698"/></proof>
         </goal>
         <goal name="induction_step.0.0.0.1.0.1.0.1" expl="false case">
         <transf name="destruct_rec" arg1="h">
          <goal name="induction_step.0.0.0.1.0.1.0.1.0" expl="false case">
          <transf name="assert" arg1="(exists p. (--+-&gt;) dfsnum_parent v p u)">
           <goal name="induction_step.0.0.0.1.0.1.0.1.0.0" expl="asserted formula">
           <proof prover="0" timelimit="100"><result status="valid" time="7.178775" steps="16521"/></proof>
           </goal>
           <goal name="induction_step.0.0.0.1.0.1.0.1.0.1" expl="false case">
           <transf name="assert" arg1="(iw = iu \/ iw &gt; iu \/ iw &lt; iu)">
            <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.0" expl="asserted formula">
            <proof prover="0" timelimit="100"><result status="valid" time="0.060090" steps="50"/></proof>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1" expl="false case">
            <transf name="destruct_rec" arg1="h">
             <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.0" expl="false case">
             <proof prover="0" timelimit="100"><result status="valid" time="5.356777" steps="13657"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.1" expl="false case">
             <transf name="assert" arg1="(exists p. (--+-&gt;) dfsnum_parent u p w)">
              <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.1.0" expl="asserted formula">
              <proof prover="0" timelimit="100"><result status="valid" time="0.288176" steps="220"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.1.1" expl="false case">
              <proof prover="1" timelimit="100"><result status="valid" time="9.129439" steps="295847"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.0.1.1.2" expl="false case">
             <proof prover="0" timelimit="100"><result status="valid" time="0.974794" steps="1557"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="dfsnum_property_k">
 <transf name="introduce_premises" >
  <goal name="dfsnum_property_k.0">
  <transf name="assert" arg1="(p_dfsnum_property_k (length l))">
   <goal name="dfsnum_property_k.0.0" expl="asserted formula">
   <proof prover="0" timelimit="100"><result status="valid" time="0.081781" steps="50"/></proof>
   </goal>
   <goal name="dfsnum_property_k.0.1">
   <proof prover="0" timelimit="100"><result status="valid" time="0.566190" steps="1104"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1.base">
 <transf name="inline_goal" >
  <goal name="base.0">
  <transf name="introduce_premises" >
   <goal name="base.0.0">
   <transf name="assert" arg1="(edge  v w)">
    <goal name="base.0.0.0" expl="asserted formula">
    <proof prover="0" timelimit="100"><result status="valid" time="0.197641" steps="164"/></proof>
    </goal>
    <goal name="base.0.0.1">
    <transf name="exists" arg1="v">
     <goal name="base.0.0.1.0">
     <transf name="split_goal_full" >
      <goal name="base.0.0.1.0.0">
      <proof prover="0" timelimit="100"><result status="valid" time="0.175808" steps="52"/></proof>
      </goal>
      <goal name="base.0.0.1.0.1">
      <proof prover="0" timelimit="100"><result status="valid" time="0.073091" steps="49"/></proof>
      </goal>
      <goal name="base.0.0.1.0.2">
      <proof prover="0" timelimit="100"><result status="valid" time="0.245351" steps="166"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="InductionLemma1.induction_step">
 <transf name="introduce_premises" >
  <goal name="induction_step.0">
  <transf name="inline_goal" >
   <goal name="induction_step.0.0">
   <transf name="introduce_premises" >
    <goal name="induction_step.0.0.0">
    <transf name="assert" arg1="(forall x. mem2 x p -&gt; mem x dfsnum_parent)">
     <goal name="induction_step.0.0.0.0" expl="asserted formula">
     <proof prover="0" timelimit="100"><result status="valid" time="0.374801" steps="450"/></proof>
     </goal>
     <goal name="induction_step.0.0.0.1">
     <transf name="instantiate" arg1="lemma1_helper" arg2="p, v, iv, pv, iw">
      <goal name="induction_step.0.0.0.1.0">
      <transf name="assert" arg1="((exists l1:list vertex, l2:list vertex, b:vertex, ib:int, pb1:vertex. Cons v p = (l1 ++ Cons b l2) /\ mapsto b (ib, pb1) dfsnum_parent /\ ib &lt; iw /\ (forall x:vertex, ix:int, px:vertex. mem2 x l2 -&gt; mapsto x (ix, px) dfsnum_parent -&gt; ix &gt;= iw)))">
       <goal name="induction_step.0.0.0.1.0.0" expl="asserted formula">
       <proof prover="0" timelimit="100"><result status="valid" time="0.407944" steps="496"/></proof>
       </goal>
       <goal name="induction_step.0.0.0.1.0.1">
       <transf name="destruct_rec" arg1="h">
        <goal name="induction_step.0.0.0.1.0.1.0">
        <transf name="assert" arg1="(path b l2 w)">
         <goal name="induction_step.0.0.0.1.0.1.0.0" expl="asserted formula">
         <transf name="destruct_term" arg1="l1">
          <goal name="induction_step.0.0.0.1.0.1.0.0.0" expl="asserted formula">
          <proof prover="0" timelimit="100"><result status="valid" time="0.544479" steps="745"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.1.0.0.1" expl="asserted formula">
          <proof prover="0" timelimit="100"><result status="valid" time="0.194543" steps="78"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="induction_step.0.0.0.1.0.1.0.1">
         <transf name="assert" arg1="(exists l. (--+-&gt;) dfsnum_parent b l w)">
          <goal name="induction_step.0.0.0.1.0.1.0.1.0" expl="asserted formula">
          <proof prover="0" timelimit="100"><result status="valid" time="1.074294" steps="2184"/></proof>
          </goal>
          <goal name="induction_step.0.0.0.1.0.1.0.1.1">
          <transf name="assert" arg1="((iv = ib) \/ (iv &lt; ib) \/ (iv &gt; ib))">
           <goal name="induction_step.0.0.0.1.0.1.0.1.1.0" expl="asserted formula">
           <proof prover="0" timelimit="100"><result status="valid" time="0.067167" steps="52"/></proof>
           </goal>
           <goal name="induction_step.0.0.0.1.0.1.0.1.1.1">
           <transf name="destruct_rec" arg1="h">
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0">
            <transf name="assert" arg1="(b = v)">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.0" expl="asserted formula">
             <proof prover="0" timelimit="100"><result status="valid" time="14.303736" steps="35900"/></proof>
             </goal>
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.1">
             <transf name="subst" arg1="b">
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.1.0">
              <transf name="exists" arg1="v">
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.0.1.0.0">
               <proof prover="0" timelimit="100"><result status="valid" time="0.188435" steps="453"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1">
            <transf name="unfold" arg1="p_lemma1" arg2="in" arg3="H5">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0">
             <transf name="instantiate" arg1="H5" arg2="v, b, iv, ib, pv, pb1">
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0">
              <transf name="destruct_term" arg1="l1">
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0">
               <transf name="assert" arg1="(path v x b)">
                <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.0" expl="asserted formula">
                <proof prover="0" timelimit="100"><result status="valid" time="0.671312" steps="905"/></proof>
                </goal>
                <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1">
                <transf name="assert" arg1="(exists x2:vertex. mem2 x2 (Cons v x) /\ x2 -*-&gt; v /\ x2 -*-&gt; b)">
                 <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.0" expl="asserted formula">
                 <proof prover="0" timelimit="100"><result status="valid" time="0.816560" steps="1133"/></proof>
                 </goal>
                 <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1">
                 <transf name="destruct_rec" arg1="h">
                  <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0">
                  <transf name="exists" arg1="x2">
                   <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0">
                   <transf name="split_goal_full" >
                    <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.0">
                    <proof prover="0" timelimit="100"><result status="valid" time="0.257374" steps="339"/></proof>
                    </goal>
                    <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.1">
                    <proof prover="0" timelimit="100"><result status="valid" time="0.061055" steps="64"/></proof>
                    </goal>
                    <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2">
                    <transf name="assert" arg1="(exists l. (--+-&gt;) dfsnum_parent b l w)">
                     <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.0" expl="asserted formula">
                     <proof prover="0" timelimit="100"><result status="valid" time="0.212159" steps="81"/></proof>
                     </goal>
                     <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1">
                     <transf name="unfold" arg1="(-*-&gt;)" arg2="in" arg3="h1">
                      <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0">
                      <transf name="destruct_rec" arg1="h1">
                       <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.0">
                       <proof prover="0" timelimit="100"><result status="valid" time="0.300439" steps="319"/></proof>
                       </goal>
                       <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.1">
                       <transf name="destruct_rec" arg1="h">
                        <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.1.0">
                        <transf name="instantiate" arg1="concat_lemma" arg2="dfsnum_parent, x2, l1, b, l, w">
                         <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.0.1.1.0.0.2.1.0.1.0.0">
                         <proof prover="0" timelimit="100"><result status="valid" time="0.320597" steps="345"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.1.0.0.1">
               <proof prover="0" timelimit="100"><result status="valid" time="0.086541" steps="87"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2">
            <transf name="exists" arg1="b">
             <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0">
             <proof prover="0" timelimit="100"><result status="valid" time="2.511009" steps="3697"/></proof>
             <transf name="split_goal_full" >
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0.0">
              <proof prover="0" timelimit="100"><result status="valid" time="0.301636" steps="248"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0.1">
              <proof prover="0" timelimit="100"><result status="valid" time="3.408814" steps="7626"/></proof>
              </goal>
              <goal name="induction_step.0.0.0.1.0.1.0.1.1.1.2.0.2">
              <proof prover="0" timelimit="100"><result status="valid" time="0.287204" steps="230"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="lemma1">
 <transf name="introduce_premises" >
  <goal name="lemma1.0">
  <transf name="assert" arg1="(p_lemma1 (length p))">
   <goal name="lemma1.0.0" expl="asserted formula">
   <proof prover="0" timelimit="100"><result status="valid" time="0.183661" steps="52"/></proof>
   </goal>
   <goal name="lemma1.0.1">
   <proof prover="0" timelimit="100"><result status="valid" time="2.488189" steps="3252"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="parent_is_candidate_of_semi_dominator">
 <proof prover="0" timelimit="100"><result status="valid" time="2.384784" steps="2841"/></proof>
 </goal>
 <goal name="semi_dominator_less_equal_than_parent">
 <proof prover="0" timelimit="100"><result status="valid" time="0.263513" steps="134"/></proof>
 </goal>
 <goal name="semi_dominator_less_than_self">
 <proof prover="0" timelimit="100"><result status="valid" time="0.718223" steps="1185"/></proof>
 </goal>
 <goal name="lemma3">
 <transf name="introduce_premises" >
  <goal name="lemma3.0">
  <transf name="assert" arg1="(exists p:list vertex. path semi_w p w /\ (forall x:vertex. mem2 x p -&gt; dfsnum x &gt; dfsnum semi_w))">
   <goal name="lemma3.0.0" expl="asserted formula">
   <proof prover="0" timelimit="100"><result status="valid" time="5.897350" steps="13244"/></proof>
   </goal>
   <goal name="lemma3.0.1">
   <transf name="destruct_rec" arg1="h">
    <goal name="lemma3.0.1.0">
    <transf name="assert" arg1="(exists iw pw. mapsto w (iw, pw) dfsnum_parent)">
     <goal name="lemma3.0.1.0.0" expl="asserted formula">
     <proof prover="0" timelimit="100"><result status="valid" time="16.478321" steps="58368"/></proof>
     </goal>
     <goal name="lemma3.0.1.0.1">
     <transf name="destruct_rec" arg1="h">
      <goal name="lemma3.0.1.0.1.0">
      <transf name="assert" arg1="(exists i_semi_w p_semi_w. mapsto semi_w (i_semi_w, p_semi_w) dfsnum_parent)">
       <goal name="lemma3.0.1.0.1.0.0" expl="asserted formula">
       <proof prover="1"><result status="valid" time="0.333003" steps="60952"/></proof>
       </goal>
       <goal name="lemma3.0.1.0.1.0.1">
       <transf name="destruct_rec" arg1="h">
        <goal name="lemma3.0.1.0.1.0.1.0">
        <transf name="instantiate" arg1="lemma1" arg2="semi_w, w, i_semi_w, iw, p_semi_w, pw">
         <goal name="lemma3.0.1.0.1.0.1.0.0">
         <transf name="assert" arg1="(forall p3:list vertex. path semi_w p3 w -&gt; (exists x:vertex. mem2 x (Cons semi_w p3) /\ x -*-&gt; semi_w /\ x -*-&gt; w))">
          <goal name="lemma3.0.1.0.1.0.1.0.0.0" expl="asserted formula">
          <proof prover="0" timelimit="100"><result status="valid" time="0.883575" steps="1750"/></proof>
          </goal>
          <goal name="lemma3.0.1.0.1.0.1.0.0.1">
          <transf name="instantiate" arg1="h" arg2="p">
           <goal name="lemma3.0.1.0.1.0.1.0.0.1.0">
           <transf name="assert" arg1="((exists x:vertex. mem2 x (Cons semi_w p) /\ x -*-&gt; semi_w /\ x -*-&gt; w))">
            <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.0" expl="asserted formula">
            <proof prover="0" timelimit="100"><result status="valid" time="0.214813" steps="57"/></proof>
            </goal>
            <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1">
            <transf name="destruct_rec" arg1="h">
             <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0">
             <transf name="assert" arg1="(x = semi_w \/ mem2 x p)">
              <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.0" expl="asserted formula">
              <proof prover="0" timelimit="100"><result status="valid" time="0.207474" steps="64"/></proof>
              </goal>
              <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.1">
              <transf name="destruct_rec" arg1="h">
               <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.1.0">
               <proof prover="0" timelimit="100"><result status="valid" time="0.744192" steps="1280"/></proof>
               </goal>
               <goal name="lemma3.0.1.0.1.0.1.0.0.1.0.1.0.1.1">
               <proof prover="0" timelimit="100"><result status="valid" time="16.734644" steps="56061"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="unnamed_e">
 <proof prover="0"><result status="valid" time="7.140530" steps="24651"/></proof>
 </goal>
 <goal name="InductionPathIsSimpleList.base">
 <proof prover="0"><result status="valid" time="2.311683" steps="6712"/></proof>
 </goal>
 <goal name="InductionPathIsSimpleList.induction_step">
 <proof prover="1"><result status="valid" time="13.123758" steps="2049724"/></proof>
 </goal>
 <goal name="unnamed_d">
 <transf name="introduce_premises" >
  <goal name="unnamed_d.0">
  <transf name="assert" arg1="(p_path_is_simplelist (length l))">
   <goal name="unnamed_d.0.0" expl="asserted formula">
   <proof prover="0"><result status="valid" time="0.193345" steps="48"/></proof>
   </goal>
   <goal name="unnamed_d.0.1">
   <proof prover="0"><result status="valid" time="0.350809" steps="406"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
